// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: combined.sql

package psql

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countAccount = `-- name: CountAccount :one
SELECT count(*) as account_count from accounts
`

// Count # of Account
func (q *Queries) CountAccount(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countAccount)
	var account_count int64
	err := row.Scan(&account_count)
	return account_count, err
}

const countUser = `-- name: CountUser :one
SELECT count(*) as user_count from users
`

// Count # of User
func (q *Queries) CountUser(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countUser)
	var user_count int64
	err := row.Scan(&user_count)
	return user_count, err
}

const deleteAccount = `-- name: DeleteAccount :exec
DELETE FROM accounts
WHERE id = $1
`

// Delete one Account using id
func (q *Queries) DeleteAccount(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteAccount, id)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

// Delete one User using id
func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const insertAccount = `-- name: InsertAccount :one
INSERT INTO accounts
( 
    first_name
 ,  last_name
 ,  email
 ,  created_at
 ,  updated_at
) VALUES (
    $1
 ,  $2
 ,  $3
 ,  $4
 ,  $5
)
RETURNING id, first_name, last_name, email, created_at, updated_at
`

type InsertAccountParams struct {
	FirstName pgtype.Text
	LastName  pgtype.Text
	Email     string
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
}

// Insert one row of Account
func (q *Queries) InsertAccount(ctx context.Context, arg InsertAccountParams) (Account, error) {
	row := q.db.QueryRow(ctx, insertAccount,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const insertUser = `-- name: InsertUser :one
INSERT INTO users
( 
    name
 ,  password
 ,  email
 ,  created_at
 ,  updated_at
) VALUES (
    $1
 ,  $2
 ,  $3
 ,  $4
 ,  $5
)
RETURNING id, name, password, email, created_at, updated_at
`

type InsertUserParams struct {
	Name      pgtype.Text
	Password  pgtype.Text
	Email     string
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
}

// Insert one row of User
func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (User, error) {
	row := q.db.QueryRow(ctx, insertUser,
		arg.Name,
		arg.Password,
		arg.Email,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Password,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listAccount = `-- name: ListAccount :many
SELECT id, first_name, last_name, email, created_at, updated_at FROM accounts
WHERE id > $1
ORDER BY id
LIMIT 1000
`

// Lists 1000 Account having id > @id
func (q *Queries) ListAccount(ctx context.Context, id int32) ([]Account, error) {
	rows, err := q.db.Query(ctx, listAccount, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Account
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUser = `-- name: ListUser :many
SELECT id, name, password, email, created_at, updated_at FROM users
WHERE id > $1
ORDER BY id
LIMIT 1000
`

// Lists 1000 User having id > @id
func (q *Queries) ListUser(ctx context.Context, id int32) ([]User, error) {
	rows, err := q.db.Query(ctx, listUser, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Password,
			&i.Email,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectAccount = `-- name: SelectAccount :one
SELECT
    id
 ,  first_name
 ,  last_name
 ,  email
 ,  created_at
 ,  updated_at
FROM accounts
WHERE id = $1
`

// Select one Account using id
func (q *Queries) SelectAccount(ctx context.Context, id int32) (Account, error) {
	row := q.db.QueryRow(ctx, selectAccount, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const selectUser = `-- name: SelectUser :one
SELECT
    id
 ,  name
 ,  password
 ,  email
 ,  created_at
 ,  updated_at
FROM users
WHERE id = $1
`

// Select one User using id
func (q *Queries) SelectUser(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, selectUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Password,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateAccount = `-- name: UpdateAccount :one
UPDATE accounts
SET 
    first_name = $1
 ,  last_name = $2
 ,  email = $3
 ,  created_at = $4
 ,  updated_at = $5
WHERE id = $6
RETURNING id, first_name, last_name, email, created_at, updated_at
`

type UpdateAccountParams struct {
	FirstName pgtype.Text
	LastName  pgtype.Text
	Email     string
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
	ID        int32
}

// Update one row of Account using id
func (q *Queries) UpdateAccount(ctx context.Context, arg UpdateAccountParams) (Account, error) {
	row := q.db.QueryRow(ctx, updateAccount,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.ID,
	)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET 
    name = $1
 ,  password = $2
 ,  email = $3
 ,  created_at = $4
 ,  updated_at = $5
WHERE id = $6
RETURNING id, name, password, email, created_at, updated_at
`

type UpdateUserParams struct {
	Name      pgtype.Text
	Password  pgtype.Text
	Email     string
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
	ID        int32
}

// Update one row of User using id
func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.Name,
		arg.Password,
		arg.Email,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Password,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const example = `-- name: example :exec
SELECT id, first_name, last_name, email, created_at, updated_at FROM accounts
`

func (q *Queries) example(ctx context.Context) error {
	_, err := q.db.Exec(ctx, example)
	return err
}

const name = `-- name: name :exec
SELECT accounts.id AS "accounts.id",
     accounts.first_name AS "accounts.first_name",
     accounts.last_name AS "accounts.last_name",
     accounts.email AS "accounts.email",
     accounts.created_at AS "accounts.created_at",
     accounts.updated_at AS "accounts.updated_at"
FROM public.accounts
`

func (q *Queries) name(ctx context.Context) error {
	_, err := q.db.Exec(ctx, name)
	return err
}
