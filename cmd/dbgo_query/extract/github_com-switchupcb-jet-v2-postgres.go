// Code generated by 'yaegi extract github.com/switchupcb/jet/v2/postgres'. DO NOT EDIT.

package extract

import (
	"context"
	"database/sql"
	"github.com/switchupcb/jet/v2/notinternal/jet"
	"github.com/switchupcb/jet/v2/postgres"
	"github.com/switchupcb/jet/v2/qrm"
	"reflect"
)

func init() {
	Symbols["github.com/switchupcb/jet/v2/postgres/postgres"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"ABSf":                        reflect.ValueOf(&postgres.ABSf).Elem(),
		"ABSi":                        reflect.ValueOf(&postgres.ABSi).Elem(),
		"AND":                         reflect.ValueOf(&postgres.AND).Elem(),
		"AVG":                         reflect.ValueOf(&postgres.AVG).Elem(),
		"BIT_AND":                     reflect.ValueOf(&postgres.BIT_AND).Elem(),
		"BIT_LENGTH":                  reflect.ValueOf(&postgres.BIT_LENGTH).Elem(),
		"BIT_NOT":                     reflect.ValueOf(&postgres.BIT_NOT).Elem(),
		"BIT_OR":                      reflect.ValueOf(&postgres.BIT_OR).Elem(),
		"BOOL_AND":                    reflect.ValueOf(&postgres.BOOL_AND).Elem(),
		"BOOL_OR":                     reflect.ValueOf(&postgres.BOOL_OR).Elem(),
		"BTRIM":                       reflect.ValueOf(&postgres.BTRIM).Elem(),
		"BinaryOperator":              reflect.ValueOf(&postgres.BinaryOperator).Elem(),
		"Bool":                        reflect.ValueOf(postgres.Bool),
		"BoolColumn":                  reflect.ValueOf(&postgres.BoolColumn).Elem(),
		"BoolExp":                     reflect.ValueOf(&postgres.BoolExp).Elem(),
		"Bytea":                       reflect.ValueOf(postgres.Bytea),
		"CASE":                        reflect.ValueOf(&postgres.CASE).Elem(),
		"CAST":                        reflect.ValueOf(postgres.CAST),
		"CBRT":                        reflect.ValueOf(&postgres.CBRT).Elem(),
		"CEIL":                        reflect.ValueOf(&postgres.CEIL).Elem(),
		"CENTURY":                     reflect.ValueOf(postgres.CENTURY),
		"CHAR_LENGTH":                 reflect.ValueOf(&postgres.CHAR_LENGTH).Elem(),
		"CHR":                         reflect.ValueOf(&postgres.CHR).Elem(),
		"COALESCE":                    reflect.ValueOf(&postgres.COALESCE).Elem(),
		"CONCAT":                      reflect.ValueOf(&postgres.CONCAT).Elem(),
		"CONCAT_WS":                   reflect.ValueOf(postgres.CONCAT_WS),
		"CONVERT":                     reflect.ValueOf(&postgres.CONVERT).Elem(),
		"CONVERT_FROM":                reflect.ValueOf(&postgres.CONVERT_FROM).Elem(),
		"CONVERT_TO":                  reflect.ValueOf(&postgres.CONVERT_TO).Elem(),
		"COUNT":                       reflect.ValueOf(&postgres.COUNT).Elem(),
		"CTE":                         reflect.ValueOf(postgres.CTE),
		"CUBE":                        reflect.ValueOf(&postgres.CUBE).Elem(),
		"CUME_DIST":                   reflect.ValueOf(&postgres.CUME_DIST).Elem(),
		"CURRENT_DATE":                reflect.ValueOf(&postgres.CURRENT_DATE).Elem(),
		"CURRENT_ROW":                 reflect.ValueOf(&postgres.CURRENT_ROW).Elem(),
		"CURRENT_TIME":                reflect.ValueOf(&postgres.CURRENT_TIME).Elem(),
		"CURRENT_TIMESTAMP":           reflect.ValueOf(&postgres.CURRENT_TIMESTAMP).Elem(),
		"Char":                        reflect.ValueOf(postgres.Char),
		"CustomExpression":            reflect.ValueOf(&postgres.CustomExpression).Elem(),
		"DATE_RANGE":                  reflect.ValueOf(&postgres.DATE_RANGE).Elem(),
		"DATE_TRUNC":                  reflect.ValueOf(postgres.DATE_TRUNC),
		"DAY":                         reflect.ValueOf(postgres.DAY),
		"DECADE":                      reflect.ValueOf(postgres.DECADE),
		"DECODE":                      reflect.ValueOf(&postgres.DECODE).Elem(),
		"DEFAULT":                     reflect.ValueOf(postgres.DEFAULT),
		"DENSE_RANK":                  reflect.ValueOf(&postgres.DENSE_RANK).Elem(),
		"DISTINCT":                    reflect.ValueOf(&postgres.DISTINCT).Elem(),
		"DOW":                         reflect.ValueOf(postgres.DOW),
		"DOY":                         reflect.ValueOf(postgres.DOY),
		"Date":                        reflect.ValueOf(postgres.Date),
		"DateColumn":                  reflect.ValueOf(&postgres.DateColumn).Elem(),
		"DateExp":                     reflect.ValueOf(&postgres.DateExp).Elem(),
		"DateRangeColumn":             reflect.ValueOf(&postgres.DateRangeColumn).Elem(),
		"DateRangeExp":                reflect.ValueOf(&postgres.DateRangeExp).Elem(),
		"DateT":                       reflect.ValueOf(postgres.DateT),
		"Decimal":                     reflect.ValueOf(&postgres.Decimal).Elem(),
		"Dialect":                     reflect.ValueOf(&postgres.Dialect).Elem(),
		"Double":                      reflect.ValueOf(postgres.Double),
		"ENCODE":                      reflect.ValueOf(&postgres.ENCODE).Elem(),
		"EPOCH":                       reflect.ValueOf(postgres.EPOCH),
		"EVERY":                       reflect.ValueOf(&postgres.EVERY).Elem(),
		"EXCEPT":                      reflect.ValueOf(postgres.EXCEPT),
		"EXCEPT_ALL":                  reflect.ValueOf(postgres.EXCEPT_ALL),
		"EXISTS":                      reflect.ValueOf(&postgres.EXISTS).Elem(),
		"EXTRACT":                     reflect.ValueOf(postgres.EXTRACT),
		"FIRST_VALUE":                 reflect.ValueOf(&postgres.FIRST_VALUE).Elem(),
		"FLOOR":                       reflect.ValueOf(&postgres.FLOOR).Elem(),
		"FOLLOWING":                   reflect.ValueOf(postgres.FOLLOWING),
		"FORMAT":                      reflect.ValueOf(postgres.FORMAT),
		"Float":                       reflect.ValueOf(&postgres.Float).Elem(),
		"FloatColumn":                 reflect.ValueOf(&postgres.FloatColumn).Elem(),
		"FloatExp":                    reflect.ValueOf(&postgres.FloatExp).Elem(),
		"Func":                        reflect.ValueOf(&postgres.Func).Elem(),
		"GENERATE_SERIES":             reflect.ValueOf(postgres.GENERATE_SERIES),
		"GREATEST":                    reflect.ValueOf(&postgres.GREATEST).Elem(),
		"GROUPING":                    reflect.ValueOf(&postgres.GROUPING).Elem(),
		"GROUPING_SETS":               reflect.ValueOf(&postgres.GROUPING_SETS).Elem(),
		"HOUR":                        reflect.ValueOf(postgres.HOUR),
		"INITCAP":                     reflect.ValueOf(&postgres.INITCAP).Elem(),
		"INT4_RANGE":                  reflect.ValueOf(&postgres.INT4_RANGE).Elem(),
		"INT8_RANGE":                  reflect.ValueOf(&postgres.INT8_RANGE).Elem(),
		"INTERSECT":                   reflect.ValueOf(postgres.INTERSECT),
		"INTERSECT_ALL":               reflect.ValueOf(postgres.INTERSECT_ALL),
		"INTERVAL":                    reflect.ValueOf(postgres.INTERVAL),
		"INTERVALd":                   reflect.ValueOf(postgres.INTERVALd),
		"ISODOW":                      reflect.ValueOf(postgres.ISODOW),
		"ISOYEAR":                     reflect.ValueOf(postgres.ISOYEAR),
		"Int":                         reflect.ValueOf(&postgres.Int).Elem(),
		"Int16":                       reflect.ValueOf(postgres.Int16),
		"Int32":                       reflect.ValueOf(postgres.Int32),
		"Int4RangeColumn":             reflect.ValueOf(&postgres.Int4RangeColumn).Elem(),
		"Int4RangeExp":                reflect.ValueOf(&postgres.Int4RangeExp).Elem(),
		"Int64":                       reflect.ValueOf(postgres.Int64),
		"Int8":                        reflect.ValueOf(postgres.Int8),
		"Int8RangeColumn":             reflect.ValueOf(&postgres.Int8RangeColumn).Elem(),
		"Int8RangeExp":                reflect.ValueOf(&postgres.Int8RangeExp).Elem(),
		"IntExp":                      reflect.ValueOf(&postgres.IntExp).Elem(),
		"IntegerColumn":               reflect.ValueOf(&postgres.IntegerColumn).Elem(),
		"IntervalColumn":              reflect.ValueOf(postgres.IntervalColumn),
		"IntervalExp":                 reflect.ValueOf(postgres.IntervalExp),
		"JULIAN":                      reflect.ValueOf(postgres.JULIAN),
		"Json":                        reflect.ValueOf(postgres.Json),
		"KEY_SHARE":                   reflect.ValueOf(&postgres.KEY_SHARE).Elem(),
		"LAG":                         reflect.ValueOf(&postgres.LAG).Elem(),
		"LAST_VALUE":                  reflect.ValueOf(&postgres.LAST_VALUE).Elem(),
		"LATERAL":                     reflect.ValueOf(postgres.LATERAL),
		"LEAD":                        reflect.ValueOf(&postgres.LEAD).Elem(),
		"LEAST":                       reflect.ValueOf(&postgres.LEAST).Elem(),
		"LEFT":                        reflect.ValueOf(&postgres.LEFT).Elem(),
		"LENGTH":                      reflect.ValueOf(&postgres.LENGTH).Elem(),
		"LN":                          reflect.ValueOf(&postgres.LN).Elem(),
		"LOCALTIME":                   reflect.ValueOf(&postgres.LOCALTIME).Elem(),
		"LOCALTIMESTAMP":              reflect.ValueOf(&postgres.LOCALTIMESTAMP).Elem(),
		"LOCK":                        reflect.ValueOf(postgres.LOCK),
		"LOCK_ACCESS_EXCLUSIVE":       reflect.ValueOf(postgres.LOCK_ACCESS_EXCLUSIVE),
		"LOCK_ACCESS_SHARE":           reflect.ValueOf(postgres.LOCK_ACCESS_SHARE),
		"LOCK_EXCLUSIVE":              reflect.ValueOf(postgres.LOCK_EXCLUSIVE),
		"LOCK_ROW_EXCLUSIVE":          reflect.ValueOf(postgres.LOCK_ROW_EXCLUSIVE),
		"LOCK_ROW_SHARE":              reflect.ValueOf(postgres.LOCK_ROW_SHARE),
		"LOCK_SHARE":                  reflect.ValueOf(postgres.LOCK_SHARE),
		"LOCK_SHARE_ROW_EXCLUSIVE":    reflect.ValueOf(postgres.LOCK_SHARE_ROW_EXCLUSIVE),
		"LOCK_SHARE_UPDATE_EXCLUSIVE": reflect.ValueOf(postgres.LOCK_SHARE_UPDATE_EXCLUSIVE),
		"LOG":                         reflect.ValueOf(&postgres.LOG).Elem(),
		"LOWER":                       reflect.ValueOf(&postgres.LOWER).Elem(),
		"LPAD":                        reflect.ValueOf(&postgres.LPAD).Elem(),
		"LTRIM":                       reflect.ValueOf(&postgres.LTRIM).Elem(),
		"MAX":                         reflect.ValueOf(&postgres.MAX).Elem(),
		"MAXf":                        reflect.ValueOf(&postgres.MAXf).Elem(),
		"MAXi":                        reflect.ValueOf(&postgres.MAXi).Elem(),
		"MD5":                         reflect.ValueOf(&postgres.MD5).Elem(),
		"MICROSECOND":                 reflect.ValueOf(postgres.MICROSECOND),
		"MILLENNIUM":                  reflect.ValueOf(postgres.MILLENNIUM),
		"MILLISECOND":                 reflect.ValueOf(postgres.MILLISECOND),
		"MIN":                         reflect.ValueOf(&postgres.MIN).Elem(),
		"MINUS_INFINITY":              reflect.ValueOf(&postgres.MINUS_INFINITY).Elem(),
		"MINUTE":                      reflect.ValueOf(postgres.MINUTE),
		"MINf":                        reflect.ValueOf(&postgres.MINf).Elem(),
		"MINi":                        reflect.ValueOf(&postgres.MINi).Elem(),
		"MODE":                        reflect.ValueOf(&postgres.MODE).Elem(),
		"MONTH":                       reflect.ValueOf(postgres.MONTH),
		"NOT":                         reflect.ValueOf(&postgres.NOT).Elem(),
		"NOW":                         reflect.ValueOf(&postgres.NOW).Elem(),
		"NO_KEY_UPDATE":               reflect.ValueOf(&postgres.NO_KEY_UPDATE).Elem(),
		"NTH_VALUE":                   reflect.ValueOf(&postgres.NTH_VALUE).Elem(),
		"NTILE":                       reflect.ValueOf(&postgres.NTILE).Elem(),
		"NULL":                        reflect.ValueOf(&postgres.NULL).Elem(),
		"NULLIF":                      reflect.ValueOf(&postgres.NULLIF).Elem(),
		"NUM_RANGE":                   reflect.ValueOf(&postgres.NUM_RANGE).Elem(),
		"NewEnumValue":                reflect.ValueOf(&postgres.NewEnumValue).Elem(),
		"NewTable":                    reflect.ValueOf(postgres.NewTable),
		"NumRangeExp":                 reflect.ValueOf(&postgres.NumRangeExp).Elem(),
		"NumericRangeColumn":          reflect.ValueOf(&postgres.NumericRangeColumn).Elem(),
		"OCTET_LENGTH":                reflect.ValueOf(&postgres.OCTET_LENGTH).Elem(),
		"OR":                          reflect.ValueOf(&postgres.OR).Elem(),
		"ORDER_BY":                    reflect.ValueOf(&postgres.ORDER_BY).Elem(),
		"PARTITION_BY":                reflect.ValueOf(&postgres.PARTITION_BY).Elem(),
		"PERCENTILE_CONT":             reflect.ValueOf(postgres.PERCENTILE_CONT),
		"PERCENTILE_DISC":             reflect.ValueOf(postgres.PERCENTILE_DISC),
		"PERCENT_RANK":                reflect.ValueOf(&postgres.PERCENT_RANK).Elem(),
		"PLUS_INFINITY":               reflect.ValueOf(&postgres.PLUS_INFINITY).Elem(),
		"POW":                         reflect.ValueOf(&postgres.POW).Elem(),
		"POWER":                       reflect.ValueOf(&postgres.POWER).Elem(),
		"PRECEDING":                   reflect.ValueOf(postgres.PRECEDING),
		"QUARTER":                     reflect.ValueOf(postgres.QUARTER),
		"RANK":                        reflect.ValueOf(&postgres.RANK).Elem(),
		"REPEAT":                      reflect.ValueOf(&postgres.REPEAT).Elem(),
		"REPLACE":                     reflect.ValueOf(&postgres.REPLACE).Elem(),
		"REVERSE":                     reflect.ValueOf(&postgres.REVERSE).Elem(),
		"RIGHT":                       reflect.ValueOf(&postgres.RIGHT).Elem(),
		"ROLLUP":                      reflect.ValueOf(&postgres.ROLLUP).Elem(),
		"ROUND":                       reflect.ValueOf(&postgres.ROUND).Elem(),
		"ROW":                         reflect.ValueOf(postgres.ROW),
		"ROW_NUMBER":                  reflect.ValueOf(&postgres.ROW_NUMBER).Elem(),
		"RPAD":                        reflect.ValueOf(&postgres.RPAD).Elem(),
		"RTRIM":                       reflect.ValueOf(&postgres.RTRIM).Elem(),
		"Raw":                         reflect.ValueOf(&postgres.Raw).Elem(),
		"RawBool":                     reflect.ValueOf(&postgres.RawBool).Elem(),
		"RawDate":                     reflect.ValueOf(&postgres.RawDate).Elem(),
		"RawDateRange":                reflect.ValueOf(&postgres.RawDateRange).Elem(),
		"RawFloat":                    reflect.ValueOf(&postgres.RawFloat).Elem(),
		"RawInt":                      reflect.ValueOf(&postgres.RawInt).Elem(),
		"RawInt4Range":                reflect.ValueOf(&postgres.RawInt4Range).Elem(),
		"RawInt8Range":                reflect.ValueOf(&postgres.RawInt8Range).Elem(),
		"RawNumRange":                 reflect.ValueOf(&postgres.RawNumRange).Elem(),
		"RawStatement":                reflect.ValueOf(postgres.RawStatement),
		"RawString":                   reflect.ValueOf(&postgres.RawString).Elem(),
		"RawTime":                     reflect.ValueOf(&postgres.RawTime).Elem(),
		"RawTimestamp":                reflect.ValueOf(&postgres.RawTimestamp).Elem(),
		"RawTimestampRange":           reflect.ValueOf(&postgres.RawTimestampRange).Elem(),
		"RawTimestampz":               reflect.ValueOf(&postgres.RawTimestampz).Elem(),
		"RawTimestampzRange":          reflect.ValueOf(&postgres.RawTimestampzRange).Elem(),
		"RawTimez":                    reflect.ValueOf(&postgres.RawTimez).Elem(),
		"Real":                        reflect.ValueOf(postgres.Real),
		"RowExp":                      reflect.ValueOf(&postgres.RowExp).Elem(),
		"SECOND":                      reflect.ValueOf(postgres.SECOND),
		"SELECT":                      reflect.ValueOf(postgres.SELECT),
		"SET":                         reflect.ValueOf(postgres.SET),
		"SHARE":                       reflect.ValueOf(&postgres.SHARE).Elem(),
		"SIGN":                        reflect.ValueOf(&postgres.SIGN).Elem(),
		"SQRT":                        reflect.ValueOf(&postgres.SQRT).Elem(),
		"STAR":                        reflect.ValueOf(&postgres.STAR).Elem(),
		"STRPOS":                      reflect.ValueOf(&postgres.STRPOS).Elem(),
		"SUBSTR":                      reflect.ValueOf(&postgres.SUBSTR).Elem(),
		"SUM":                         reflect.ValueOf(&postgres.SUM).Elem(),
		"SUMf":                        reflect.ValueOf(&postgres.SUMf).Elem(),
		"SUMi":                        reflect.ValueOf(&postgres.SUMi).Elem(),
		"SetLogger":                   reflect.ValueOf(&postgres.SetLogger).Elem(),
		"SetQueryLogger":              reflect.ValueOf(&postgres.SetQueryLogger).Elem(),
		"String":                      reflect.ValueOf(postgres.String),
		"StringColumn":                reflect.ValueOf(&postgres.StringColumn).Elem(),
		"StringExp":                   reflect.ValueOf(&postgres.StringExp).Elem(),
		"TIMEZONE":                    reflect.ValueOf(postgres.TIMEZONE),
		"TIMEZONE_HOUR":               reflect.ValueOf(postgres.TIMEZONE_HOUR),
		"TIMEZONE_MINUTE":             reflect.ValueOf(postgres.TIMEZONE_MINUTE),
		"TO_ASCII":                    reflect.ValueOf(&postgres.TO_ASCII).Elem(),
		"TO_CHAR":                     reflect.ValueOf(&postgres.TO_CHAR).Elem(),
		"TO_DATE":                     reflect.ValueOf(&postgres.TO_DATE).Elem(),
		"TO_HEX":                      reflect.ValueOf(&postgres.TO_HEX).Elem(),
		"TO_NUMBER":                   reflect.ValueOf(&postgres.TO_NUMBER).Elem(),
		"TO_TIMESTAMP":                reflect.ValueOf(&postgres.TO_TIMESTAMP).Elem(),
		"TRUNC":                       reflect.ValueOf(&postgres.TRUNC).Elem(),
		"TSTZ_RANGE":                  reflect.ValueOf(&postgres.TSTZ_RANGE).Elem(),
		"TS_RANGE":                    reflect.ValueOf(&postgres.TS_RANGE).Elem(),
		"Text":                        reflect.ValueOf(postgres.Text),
		"Time":                        reflect.ValueOf(postgres.Time),
		"TimeColumn":                  reflect.ValueOf(&postgres.TimeColumn).Elem(),
		"TimeExp":                     reflect.ValueOf(&postgres.TimeExp).Elem(),
		"TimeT":                       reflect.ValueOf(postgres.TimeT),
		"Timestamp":                   reflect.ValueOf(postgres.Timestamp),
		"TimestampColumn":             reflect.ValueOf(&postgres.TimestampColumn).Elem(),
		"TimestampExp":                reflect.ValueOf(&postgres.TimestampExp).Elem(),
		"TimestampRangeColumn":        reflect.ValueOf(&postgres.TimestampRangeColumn).Elem(),
		"TimestampT":                  reflect.ValueOf(postgres.TimestampT),
		"Timestampz":                  reflect.ValueOf(postgres.Timestampz),
		"TimestampzColumn":            reflect.ValueOf(&postgres.TimestampzColumn).Elem(),
		"TimestampzExp":               reflect.ValueOf(&postgres.TimestampzExp).Elem(),
		"TimestampzRangeColumn":       reflect.ValueOf(&postgres.TimestampzRangeColumn).Elem(),
		"TimestampzT":                 reflect.ValueOf(postgres.TimestampzT),
		"Timez":                       reflect.ValueOf(postgres.Timez),
		"TimezColumn":                 reflect.ValueOf(&postgres.TimezColumn).Elem(),
		"TimezExp":                    reflect.ValueOf(&postgres.TimezExp).Elem(),
		"TimezT":                      reflect.ValueOf(postgres.TimezT),
		"TsRangeExp":                  reflect.ValueOf(&postgres.TsRangeExp).Elem(),
		"TstzRangeExp":                reflect.ValueOf(&postgres.TstzRangeExp).Elem(),
		"UNBOUNDED":                   reflect.ValueOf(&postgres.UNBOUNDED).Elem(),
		"UNION":                       reflect.ValueOf(postgres.UNION),
		"UNION_ALL":                   reflect.ValueOf(postgres.UNION_ALL),
		"UPDATE":                      reflect.ValueOf(&postgres.UPDATE).Elem(),
		"UPPER":                       reflect.ValueOf(&postgres.UPPER).Elem(),
		"UUID":                        reflect.ValueOf(&postgres.UUID).Elem(),
		"Uint16":                      reflect.ValueOf(postgres.Uint16),
		"Uint32":                      reflect.ValueOf(postgres.Uint32),
		"Uint64":                      reflect.ValueOf(postgres.Uint64),
		"Uint8":                       reflect.ValueOf(postgres.Uint8),
		"VALUES":                      reflect.ValueOf(postgres.VALUES),
		"VarChar":                     reflect.ValueOf(postgres.VarChar),
		"WEEK":                        reflect.ValueOf(postgres.WEEK),
		"WITH":                        reflect.ValueOf(postgres.WITH),
		"WITH_RECURSIVE":              reflect.ValueOf(postgres.WITH_RECURSIVE),
		"WRAP":                        reflect.ValueOf(postgres.WRAP),
		"Window":                      reflect.ValueOf(&postgres.Window).Elem(),
		"YEAR":                        reflect.ValueOf(postgres.YEAR),

		// type definitions
		"BoolExpression":        reflect.ValueOf((*postgres.BoolExpression)(nil)),
		"Column":                reflect.ValueOf((*postgres.Column)(nil)),
		"ColumnAssigment":       reflect.ValueOf((*postgres.ColumnAssigment)(nil)),
		"ColumnBool":            reflect.ValueOf((*postgres.ColumnBool)(nil)),
		"ColumnDate":            reflect.ValueOf((*postgres.ColumnDate)(nil)),
		"ColumnDateRange":       reflect.ValueOf((*postgres.ColumnDateRange)(nil)),
		"ColumnFloat":           reflect.ValueOf((*postgres.ColumnFloat)(nil)),
		"ColumnInt4Range":       reflect.ValueOf((*postgres.ColumnInt4Range)(nil)),
		"ColumnInt8Range":       reflect.ValueOf((*postgres.ColumnInt8Range)(nil)),
		"ColumnInteger":         reflect.ValueOf((*postgres.ColumnInteger)(nil)),
		"ColumnInterval":        reflect.ValueOf((*postgres.ColumnInterval)(nil)),
		"ColumnList":            reflect.ValueOf((*postgres.ColumnList)(nil)),
		"ColumnNumericRange":    reflect.ValueOf((*postgres.ColumnNumericRange)(nil)),
		"ColumnString":          reflect.ValueOf((*postgres.ColumnString)(nil)),
		"ColumnTime":            reflect.ValueOf((*postgres.ColumnTime)(nil)),
		"ColumnTimestamp":       reflect.ValueOf((*postgres.ColumnTimestamp)(nil)),
		"ColumnTimestampRange":  reflect.ValueOf((*postgres.ColumnTimestampRange)(nil)),
		"ColumnTimestampz":      reflect.ValueOf((*postgres.ColumnTimestampz)(nil)),
		"ColumnTimestampzRange": reflect.ValueOf((*postgres.ColumnTimestampzRange)(nil)),
		"ColumnTimez":           reflect.ValueOf((*postgres.ColumnTimez)(nil)),
		"CommonTableExpression": reflect.ValueOf((*postgres.CommonTableExpression)(nil)),
		"ConflictAction":        reflect.ValueOf((*postgres.ConflictAction)(nil)),
		"ConflictTarget":        reflect.ValueOf((*postgres.ConflictTarget)(nil)),
		"DateExpression":        reflect.ValueOf((*postgres.DateExpression)(nil)),
		"DateRange":             reflect.ValueOf((*postgres.DateRange)(nil)),
		"DeleteStatement":       reflect.ValueOf((*postgres.DeleteStatement)(nil)),
		"Expression":            reflect.ValueOf((*postgres.Expression)(nil)),
		"FetchExpand":           reflect.ValueOf((*postgres.FetchExpand)(nil)),
		"FloatExpression":       reflect.ValueOf((*postgres.FloatExpression)(nil)),
		"GroupByClause":         reflect.ValueOf((*postgres.GroupByClause)(nil)),
		"InsertStatement":       reflect.ValueOf((*postgres.InsertStatement)(nil)),
		"Int4Range":             reflect.ValueOf((*postgres.Int4Range)(nil)),
		"Int8Range":             reflect.ValueOf((*postgres.Int8Range)(nil)),
		"IntegerExpression":     reflect.ValueOf((*postgres.IntegerExpression)(nil)),
		"IntervalExpression":    reflect.ValueOf((*postgres.IntervalExpression)(nil)),
		"LockStatement":         reflect.ValueOf((*postgres.LockStatement)(nil)),
		"NumericExpression":     reflect.ValueOf((*postgres.NumericExpression)(nil)),
		"NumericRange":          reflect.ValueOf((*postgres.NumericRange)(nil)),
		"OnConflict":            reflect.ValueOf((*postgres.OnConflict)(nil)),
		"OnConflictClause":      reflect.ValueOf((*postgres.OnConflictClause)(nil)),
		"OrderByClause":         reflect.ValueOf((*postgres.OrderByClause)(nil)),
		"PrintableStatement":    reflect.ValueOf((*postgres.PrintableStatement)(nil)),
		"Projection":            reflect.ValueOf((*postgres.Projection)(nil)),
		"ProjectionList":        reflect.ValueOf((*postgres.ProjectionList)(nil)),
		"QueryInfo":             reflect.ValueOf((*postgres.QueryInfo)(nil)),
		"RawArgs":               reflect.ValueOf((*postgres.RawArgs)(nil)),
		"ReadableTable":         reflect.ValueOf((*postgres.ReadableTable)(nil)),
		"RowExpression":         reflect.ValueOf((*postgres.RowExpression)(nil)),
		"RowLock":               reflect.ValueOf((*postgres.RowLock)(nil)),
		"Rows":                  reflect.ValueOf((*postgres.Rows)(nil)),
		"SelectStatement":       reflect.ValueOf((*postgres.SelectStatement)(nil)),
		"SelectTable":           reflect.ValueOf((*postgres.SelectTable)(nil)),
		"SetStatement":          reflect.ValueOf((*postgres.SetStatement)(nil)),
		"SetStatementImpl":      reflect.ValueOf((*postgres.SetStatementImpl)(nil)),
		"Statement":             reflect.ValueOf((*postgres.Statement)(nil)),
		"StringExpression":      reflect.ValueOf((*postgres.StringExpression)(nil)),
		"Table":                 reflect.ValueOf((*postgres.Table)(nil)),
		"TableLockMode":         reflect.ValueOf((*postgres.TableLockMode)(nil)),
		"TimeExpression":        reflect.ValueOf((*postgres.TimeExpression)(nil)),
		"TimestampExpression":   reflect.ValueOf((*postgres.TimestampExpression)(nil)),
		"TimestampRange":        reflect.ValueOf((*postgres.TimestampRange)(nil)),
		"TimestampzExpression":  reflect.ValueOf((*postgres.TimestampzExpression)(nil)),
		"TimestampzRange":       reflect.ValueOf((*postgres.TimestampzRange)(nil)),
		"TimezExpression":       reflect.ValueOf((*postgres.TimezExpression)(nil)),
		"Token":                 reflect.ValueOf((*postgres.Token)(nil)),
		"UpdateStatement":       reflect.ValueOf((*postgres.UpdateStatement)(nil)),
		"WindowExand":           reflect.ValueOf((*postgres.WindowExand)(nil)),
		"WritableTable":         reflect.ValueOf((*postgres.WritableTable)(nil)),

		// interface wrapper definitions
		"_BoolExpression":        reflect.ValueOf((*_github_com_switchupcb_jet_v2_postgres_BoolExpression)(nil)),
		"_Column":                reflect.ValueOf((*_github_com_switchupcb_jet_v2_postgres_Column)(nil)),
		"_ColumnAssigment":       reflect.ValueOf((*_github_com_switchupcb_jet_v2_postgres_ColumnAssigment)(nil)),
		"_ColumnBool":            reflect.ValueOf((*_github_com_switchupcb_jet_v2_postgres_ColumnBool)(nil)),
		"_ColumnDate":            reflect.ValueOf((*_github_com_switchupcb_jet_v2_postgres_ColumnDate)(nil)),
		"_ColumnDateRange":       reflect.ValueOf((*_github_com_switchupcb_jet_v2_postgres_ColumnDateRange)(nil)),
		"_ColumnFloat":           reflect.ValueOf((*_github_com_switchupcb_jet_v2_postgres_ColumnFloat)(nil)),
		"_ColumnInt4Range":       reflect.ValueOf((*_github_com_switchupcb_jet_v2_postgres_ColumnInt4Range)(nil)),
		"_ColumnInt8Range":       reflect.ValueOf((*_github_com_switchupcb_jet_v2_postgres_ColumnInt8Range)(nil)),
		"_ColumnInteger":         reflect.ValueOf((*_github_com_switchupcb_jet_v2_postgres_ColumnInteger)(nil)),
		"_ColumnInterval":        reflect.ValueOf((*_github_com_switchupcb_jet_v2_postgres_ColumnInterval)(nil)),
		"_ColumnNumericRange":    reflect.ValueOf((*_github_com_switchupcb_jet_v2_postgres_ColumnNumericRange)(nil)),
		"_ColumnString":          reflect.ValueOf((*_github_com_switchupcb_jet_v2_postgres_ColumnString)(nil)),
		"_ColumnTime":            reflect.ValueOf((*_github_com_switchupcb_jet_v2_postgres_ColumnTime)(nil)),
		"_ColumnTimestamp":       reflect.ValueOf((*_github_com_switchupcb_jet_v2_postgres_ColumnTimestamp)(nil)),
		"_ColumnTimestampRange":  reflect.ValueOf((*_github_com_switchupcb_jet_v2_postgres_ColumnTimestampRange)(nil)),
		"_ColumnTimestampz":      reflect.ValueOf((*_github_com_switchupcb_jet_v2_postgres_ColumnTimestampz)(nil)),
		"_ColumnTimestampzRange": reflect.ValueOf((*_github_com_switchupcb_jet_v2_postgres_ColumnTimestampzRange)(nil)),
		"_ColumnTimez":           reflect.ValueOf((*_github_com_switchupcb_jet_v2_postgres_ColumnTimez)(nil)),
		"_CommonTableExpression": reflect.ValueOf((*_github_com_switchupcb_jet_v2_postgres_CommonTableExpression)(nil)),
		"_ConflictAction":        reflect.ValueOf((*_github_com_switchupcb_jet_v2_postgres_ConflictAction)(nil)),
		"_ConflictTarget":        reflect.ValueOf((*_github_com_switchupcb_jet_v2_postgres_ConflictTarget)(nil)),
		"_DateExpression":        reflect.ValueOf((*_github_com_switchupcb_jet_v2_postgres_DateExpression)(nil)),
		"_DateRange":             reflect.ValueOf((*_github_com_switchupcb_jet_v2_postgres_DateRange)(nil)),
		"_DeleteStatement":       reflect.ValueOf((*_github_com_switchupcb_jet_v2_postgres_DeleteStatement)(nil)),
		"_Expression":            reflect.ValueOf((*_github_com_switchupcb_jet_v2_postgres_Expression)(nil)),
		"_FloatExpression":       reflect.ValueOf((*_github_com_switchupcb_jet_v2_postgres_FloatExpression)(nil)),
		"_GroupByClause":         reflect.ValueOf((*_github_com_switchupcb_jet_v2_postgres_GroupByClause)(nil)),
		"_InsertStatement":       reflect.ValueOf((*_github_com_switchupcb_jet_v2_postgres_InsertStatement)(nil)),
		"_Int4Range":             reflect.ValueOf((*_github_com_switchupcb_jet_v2_postgres_Int4Range)(nil)),
		"_Int8Range":             reflect.ValueOf((*_github_com_switchupcb_jet_v2_postgres_Int8Range)(nil)),
		"_IntegerExpression":     reflect.ValueOf((*_github_com_switchupcb_jet_v2_postgres_IntegerExpression)(nil)),
		"_IntervalExpression":    reflect.ValueOf((*_github_com_switchupcb_jet_v2_postgres_IntervalExpression)(nil)),
		"_LockStatement":         reflect.ValueOf((*_github_com_switchupcb_jet_v2_postgres_LockStatement)(nil)),
		"_NumericExpression":     reflect.ValueOf((*_github_com_switchupcb_jet_v2_postgres_NumericExpression)(nil)),
		"_NumericRange":          reflect.ValueOf((*_github_com_switchupcb_jet_v2_postgres_NumericRange)(nil)),
		"_OnConflict":            reflect.ValueOf((*_github_com_switchupcb_jet_v2_postgres_OnConflict)(nil)),
		"_OrderByClause":         reflect.ValueOf((*_github_com_switchupcb_jet_v2_postgres_OrderByClause)(nil)),
		"_PrintableStatement":    reflect.ValueOf((*_github_com_switchupcb_jet_v2_postgres_PrintableStatement)(nil)),
		"_Projection":            reflect.ValueOf((*_github_com_switchupcb_jet_v2_postgres_Projection)(nil)),
		"_ReadableTable":         reflect.ValueOf((*_github_com_switchupcb_jet_v2_postgres_ReadableTable)(nil)),
		"_RowExpression":         reflect.ValueOf((*_github_com_switchupcb_jet_v2_postgres_RowExpression)(nil)),
		"_RowLock":               reflect.ValueOf((*_github_com_switchupcb_jet_v2_postgres_RowLock)(nil)),
		"_SelectStatement":       reflect.ValueOf((*_github_com_switchupcb_jet_v2_postgres_SelectStatement)(nil)),
		"_SelectTable":           reflect.ValueOf((*_github_com_switchupcb_jet_v2_postgres_SelectTable)(nil)),
		"_SetStatement":          reflect.ValueOf((*_github_com_switchupcb_jet_v2_postgres_SetStatement)(nil)),
		"_Statement":             reflect.ValueOf((*_github_com_switchupcb_jet_v2_postgres_Statement)(nil)),
		"_StringExpression":      reflect.ValueOf((*_github_com_switchupcb_jet_v2_postgres_StringExpression)(nil)),
		"_Table":                 reflect.ValueOf((*_github_com_switchupcb_jet_v2_postgres_Table)(nil)),
		"_TimeExpression":        reflect.ValueOf((*_github_com_switchupcb_jet_v2_postgres_TimeExpression)(nil)),
		"_TimestampExpression":   reflect.ValueOf((*_github_com_switchupcb_jet_v2_postgres_TimestampExpression)(nil)),
		"_TimestampRange":        reflect.ValueOf((*_github_com_switchupcb_jet_v2_postgres_TimestampRange)(nil)),
		"_TimestampzExpression":  reflect.ValueOf((*_github_com_switchupcb_jet_v2_postgres_TimestampzExpression)(nil)),
		"_TimestampzRange":       reflect.ValueOf((*_github_com_switchupcb_jet_v2_postgres_TimestampzRange)(nil)),
		"_TimezExpression":       reflect.ValueOf((*_github_com_switchupcb_jet_v2_postgres_TimezExpression)(nil)),
		"_UpdateStatement":       reflect.ValueOf((*_github_com_switchupcb_jet_v2_postgres_UpdateStatement)(nil)),
		"_WritableTable":         reflect.ValueOf((*_github_com_switchupcb_jet_v2_postgres_WritableTable)(nil)),
	}
}

// _github_com_switchupcb_jet_v2_postgres_BoolExpression is an interface wrapper for BoolExpression type
type _github_com_switchupcb_jet_v2_postgres_BoolExpression struct {
	IValue                interface{}
	WAND                  func(rhs jet.BoolExpression) jet.BoolExpression
	WAS                   func(alias string) jet.Projection
	WASC                  func() jet.OrderByClause
	WDESC                 func() jet.OrderByClause
	WEQ                   func(rhs jet.BoolExpression) jet.BoolExpression
	WIN                   func(expressions ...jet.Expression) jet.BoolExpression
	WIS_DISTINCT_FROM     func(rhs jet.BoolExpression) jet.BoolExpression
	WIS_FALSE             func() jet.BoolExpression
	WIS_NOT_DISTINCT_FROM func(rhs jet.BoolExpression) jet.BoolExpression
	WIS_NOT_FALSE         func() jet.BoolExpression
	WIS_NOT_NULL          func() jet.BoolExpression
	WIS_NOT_TRUE          func() jet.BoolExpression
	WIS_NOT_UNKNOWN       func() jet.BoolExpression
	WIS_NULL              func() jet.BoolExpression
	WIS_TRUE              func() jet.BoolExpression
	WIS_UNKNOWN           func() jet.BoolExpression
	WNOT_EQ               func(rhs jet.BoolExpression) jet.BoolExpression
	WNOT_IN               func(expressions ...jet.Expression) jet.BoolExpression
	WNULLS_FIRST          func() jet.OrderByClause
	WNULLS_LAST           func() jet.OrderByClause
	WOR                   func(rhs jet.BoolExpression) jet.BoolExpression
}

func (W _github_com_switchupcb_jet_v2_postgres_BoolExpression) AND(rhs jet.BoolExpression) jet.BoolExpression {
	return W.WAND(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_BoolExpression) AS(alias string) jet.Projection {
	return W.WAS(alias)
}
func (W _github_com_switchupcb_jet_v2_postgres_BoolExpression) ASC() jet.OrderByClause {
	return W.WASC()
}
func (W _github_com_switchupcb_jet_v2_postgres_BoolExpression) DESC() jet.OrderByClause {
	return W.WDESC()
}
func (W _github_com_switchupcb_jet_v2_postgres_BoolExpression) EQ(rhs jet.BoolExpression) jet.BoolExpression {
	return W.WEQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_BoolExpression) IN(expressions ...jet.Expression) jet.BoolExpression {
	return W.WIN(expressions...)
}
func (W _github_com_switchupcb_jet_v2_postgres_BoolExpression) IS_DISTINCT_FROM(rhs jet.BoolExpression) jet.BoolExpression {
	return W.WIS_DISTINCT_FROM(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_BoolExpression) IS_FALSE() jet.BoolExpression {
	return W.WIS_FALSE()
}
func (W _github_com_switchupcb_jet_v2_postgres_BoolExpression) IS_NOT_DISTINCT_FROM(rhs jet.BoolExpression) jet.BoolExpression {
	return W.WIS_NOT_DISTINCT_FROM(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_BoolExpression) IS_NOT_FALSE() jet.BoolExpression {
	return W.WIS_NOT_FALSE()
}
func (W _github_com_switchupcb_jet_v2_postgres_BoolExpression) IS_NOT_NULL() jet.BoolExpression {
	return W.WIS_NOT_NULL()
}
func (W _github_com_switchupcb_jet_v2_postgres_BoolExpression) IS_NOT_TRUE() jet.BoolExpression {
	return W.WIS_NOT_TRUE()
}
func (W _github_com_switchupcb_jet_v2_postgres_BoolExpression) IS_NOT_UNKNOWN() jet.BoolExpression {
	return W.WIS_NOT_UNKNOWN()
}
func (W _github_com_switchupcb_jet_v2_postgres_BoolExpression) IS_NULL() jet.BoolExpression {
	return W.WIS_NULL()
}
func (W _github_com_switchupcb_jet_v2_postgres_BoolExpression) IS_TRUE() jet.BoolExpression {
	return W.WIS_TRUE()
}
func (W _github_com_switchupcb_jet_v2_postgres_BoolExpression) IS_UNKNOWN() jet.BoolExpression {
	return W.WIS_UNKNOWN()
}
func (W _github_com_switchupcb_jet_v2_postgres_BoolExpression) NOT_EQ(rhs jet.BoolExpression) jet.BoolExpression {
	return W.WNOT_EQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_BoolExpression) NOT_IN(expressions ...jet.Expression) jet.BoolExpression {
	return W.WNOT_IN(expressions...)
}
func (W _github_com_switchupcb_jet_v2_postgres_BoolExpression) NULLS_FIRST() jet.OrderByClause {
	return W.WNULLS_FIRST()
}
func (W _github_com_switchupcb_jet_v2_postgres_BoolExpression) NULLS_LAST() jet.OrderByClause {
	return W.WNULLS_LAST()
}
func (W _github_com_switchupcb_jet_v2_postgres_BoolExpression) OR(rhs jet.BoolExpression) jet.BoolExpression {
	return W.WOR(rhs)
}

// _github_com_switchupcb_jet_v2_postgres_Column is an interface wrapper for Column type
type _github_com_switchupcb_jet_v2_postgres_Column struct {
	IValue       interface{}
	WAS          func(alias string) jet.Projection
	WASC         func() jet.OrderByClause
	WDESC        func() jet.OrderByClause
	WIN          func(expressions ...jet.Expression) jet.BoolExpression
	WIS_NOT_NULL func() jet.BoolExpression
	WIS_NULL     func() jet.BoolExpression
	WNOT_IN      func(expressions ...jet.Expression) jet.BoolExpression
	WNULLS_FIRST func() jet.OrderByClause
	WNULLS_LAST  func() jet.OrderByClause
	WName        func() string
	WTableName   func() string
}

func (W _github_com_switchupcb_jet_v2_postgres_Column) AS(alias string) jet.Projection {
	return W.WAS(alias)
}
func (W _github_com_switchupcb_jet_v2_postgres_Column) ASC() jet.OrderByClause {
	return W.WASC()
}
func (W _github_com_switchupcb_jet_v2_postgres_Column) DESC() jet.OrderByClause {
	return W.WDESC()
}
func (W _github_com_switchupcb_jet_v2_postgres_Column) IN(expressions ...jet.Expression) jet.BoolExpression {
	return W.WIN(expressions...)
}
func (W _github_com_switchupcb_jet_v2_postgres_Column) IS_NOT_NULL() jet.BoolExpression {
	return W.WIS_NOT_NULL()
}
func (W _github_com_switchupcb_jet_v2_postgres_Column) IS_NULL() jet.BoolExpression {
	return W.WIS_NULL()
}
func (W _github_com_switchupcb_jet_v2_postgres_Column) NOT_IN(expressions ...jet.Expression) jet.BoolExpression {
	return W.WNOT_IN(expressions...)
}
func (W _github_com_switchupcb_jet_v2_postgres_Column) NULLS_FIRST() jet.OrderByClause {
	return W.WNULLS_FIRST()
}
func (W _github_com_switchupcb_jet_v2_postgres_Column) NULLS_LAST() jet.OrderByClause {
	return W.WNULLS_LAST()
}
func (W _github_com_switchupcb_jet_v2_postgres_Column) Name() string {
	return W.WName()
}
func (W _github_com_switchupcb_jet_v2_postgres_Column) TableName() string {
	return W.WTableName()
}

// _github_com_switchupcb_jet_v2_postgres_ColumnAssigment is an interface wrapper for ColumnAssigment type
type _github_com_switchupcb_jet_v2_postgres_ColumnAssigment struct {
	IValue interface{}
}

// _github_com_switchupcb_jet_v2_postgres_ColumnBool is an interface wrapper for ColumnBool type
type _github_com_switchupcb_jet_v2_postgres_ColumnBool struct {
	IValue                interface{}
	WAND                  func(rhs jet.BoolExpression) jet.BoolExpression
	WAS                   func(alias string) jet.Projection
	WASC                  func() jet.OrderByClause
	WDESC                 func() jet.OrderByClause
	WEQ                   func(rhs jet.BoolExpression) jet.BoolExpression
	WFrom                 func(subQuery jet.SelectTable) jet.ColumnBool
	WIN                   func(expressions ...jet.Expression) jet.BoolExpression
	WIS_DISTINCT_FROM     func(rhs jet.BoolExpression) jet.BoolExpression
	WIS_FALSE             func() jet.BoolExpression
	WIS_NOT_DISTINCT_FROM func(rhs jet.BoolExpression) jet.BoolExpression
	WIS_NOT_FALSE         func() jet.BoolExpression
	WIS_NOT_NULL          func() jet.BoolExpression
	WIS_NOT_TRUE          func() jet.BoolExpression
	WIS_NOT_UNKNOWN       func() jet.BoolExpression
	WIS_NULL              func() jet.BoolExpression
	WIS_TRUE              func() jet.BoolExpression
	WIS_UNKNOWN           func() jet.BoolExpression
	WNOT_EQ               func(rhs jet.BoolExpression) jet.BoolExpression
	WNOT_IN               func(expressions ...jet.Expression) jet.BoolExpression
	WNULLS_FIRST          func() jet.OrderByClause
	WNULLS_LAST           func() jet.OrderByClause
	WName                 func() string
	WOR                   func(rhs jet.BoolExpression) jet.BoolExpression
	WSET                  func(boolExp jet.BoolExpression) jet.ColumnAssigment
	WTableName            func() string
}

func (W _github_com_switchupcb_jet_v2_postgres_ColumnBool) AND(rhs jet.BoolExpression) jet.BoolExpression {
	return W.WAND(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnBool) AS(alias string) jet.Projection {
	return W.WAS(alias)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnBool) ASC() jet.OrderByClause {
	return W.WASC()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnBool) DESC() jet.OrderByClause {
	return W.WDESC()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnBool) EQ(rhs jet.BoolExpression) jet.BoolExpression {
	return W.WEQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnBool) From(subQuery jet.SelectTable) jet.ColumnBool {
	return W.WFrom(subQuery)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnBool) IN(expressions ...jet.Expression) jet.BoolExpression {
	return W.WIN(expressions...)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnBool) IS_DISTINCT_FROM(rhs jet.BoolExpression) jet.BoolExpression {
	return W.WIS_DISTINCT_FROM(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnBool) IS_FALSE() jet.BoolExpression {
	return W.WIS_FALSE()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnBool) IS_NOT_DISTINCT_FROM(rhs jet.BoolExpression) jet.BoolExpression {
	return W.WIS_NOT_DISTINCT_FROM(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnBool) IS_NOT_FALSE() jet.BoolExpression {
	return W.WIS_NOT_FALSE()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnBool) IS_NOT_NULL() jet.BoolExpression {
	return W.WIS_NOT_NULL()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnBool) IS_NOT_TRUE() jet.BoolExpression {
	return W.WIS_NOT_TRUE()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnBool) IS_NOT_UNKNOWN() jet.BoolExpression {
	return W.WIS_NOT_UNKNOWN()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnBool) IS_NULL() jet.BoolExpression {
	return W.WIS_NULL()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnBool) IS_TRUE() jet.BoolExpression {
	return W.WIS_TRUE()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnBool) IS_UNKNOWN() jet.BoolExpression {
	return W.WIS_UNKNOWN()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnBool) NOT_EQ(rhs jet.BoolExpression) jet.BoolExpression {
	return W.WNOT_EQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnBool) NOT_IN(expressions ...jet.Expression) jet.BoolExpression {
	return W.WNOT_IN(expressions...)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnBool) NULLS_FIRST() jet.OrderByClause {
	return W.WNULLS_FIRST()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnBool) NULLS_LAST() jet.OrderByClause {
	return W.WNULLS_LAST()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnBool) Name() string {
	return W.WName()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnBool) OR(rhs jet.BoolExpression) jet.BoolExpression {
	return W.WOR(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnBool) SET(boolExp jet.BoolExpression) jet.ColumnAssigment {
	return W.WSET(boolExp)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnBool) TableName() string {
	return W.WTableName()
}

// _github_com_switchupcb_jet_v2_postgres_ColumnDate is an interface wrapper for ColumnDate type
type _github_com_switchupcb_jet_v2_postgres_ColumnDate struct {
	IValue                interface{}
	WADD                  func(rhs jet.Interval) jet.TimestampExpression
	WAS                   func(alias string) jet.Projection
	WASC                  func() jet.OrderByClause
	WBETWEEN              func(min jet.DateExpression, max jet.DateExpression) jet.BoolExpression
	WDESC                 func() jet.OrderByClause
	WEQ                   func(rhs jet.DateExpression) jet.BoolExpression
	WFrom                 func(subQuery jet.SelectTable) jet.ColumnDate
	WGT                   func(rhs jet.DateExpression) jet.BoolExpression
	WGT_EQ                func(rhs jet.DateExpression) jet.BoolExpression
	WIN                   func(expressions ...jet.Expression) jet.BoolExpression
	WIS_DISTINCT_FROM     func(rhs jet.DateExpression) jet.BoolExpression
	WIS_NOT_DISTINCT_FROM func(rhs jet.DateExpression) jet.BoolExpression
	WIS_NOT_NULL          func() jet.BoolExpression
	WIS_NULL              func() jet.BoolExpression
	WLT                   func(rhs jet.DateExpression) jet.BoolExpression
	WLT_EQ                func(rhs jet.DateExpression) jet.BoolExpression
	WNOT_BETWEEN          func(min jet.DateExpression, max jet.DateExpression) jet.BoolExpression
	WNOT_EQ               func(rhs jet.DateExpression) jet.BoolExpression
	WNOT_IN               func(expressions ...jet.Expression) jet.BoolExpression
	WNULLS_FIRST          func() jet.OrderByClause
	WNULLS_LAST           func() jet.OrderByClause
	WName                 func() string
	WSET                  func(dateExp jet.DateExpression) jet.ColumnAssigment
	WSUB                  func(rhs jet.Interval) jet.TimestampExpression
	WTableName            func() string
}

func (W _github_com_switchupcb_jet_v2_postgres_ColumnDate) ADD(rhs jet.Interval) jet.TimestampExpression {
	return W.WADD(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnDate) AS(alias string) jet.Projection {
	return W.WAS(alias)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnDate) ASC() jet.OrderByClause {
	return W.WASC()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnDate) BETWEEN(min jet.DateExpression, max jet.DateExpression) jet.BoolExpression {
	return W.WBETWEEN(min, max)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnDate) DESC() jet.OrderByClause {
	return W.WDESC()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnDate) EQ(rhs jet.DateExpression) jet.BoolExpression {
	return W.WEQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnDate) From(subQuery jet.SelectTable) jet.ColumnDate {
	return W.WFrom(subQuery)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnDate) GT(rhs jet.DateExpression) jet.BoolExpression {
	return W.WGT(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnDate) GT_EQ(rhs jet.DateExpression) jet.BoolExpression {
	return W.WGT_EQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnDate) IN(expressions ...jet.Expression) jet.BoolExpression {
	return W.WIN(expressions...)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnDate) IS_DISTINCT_FROM(rhs jet.DateExpression) jet.BoolExpression {
	return W.WIS_DISTINCT_FROM(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnDate) IS_NOT_DISTINCT_FROM(rhs jet.DateExpression) jet.BoolExpression {
	return W.WIS_NOT_DISTINCT_FROM(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnDate) IS_NOT_NULL() jet.BoolExpression {
	return W.WIS_NOT_NULL()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnDate) IS_NULL() jet.BoolExpression {
	return W.WIS_NULL()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnDate) LT(rhs jet.DateExpression) jet.BoolExpression {
	return W.WLT(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnDate) LT_EQ(rhs jet.DateExpression) jet.BoolExpression {
	return W.WLT_EQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnDate) NOT_BETWEEN(min jet.DateExpression, max jet.DateExpression) jet.BoolExpression {
	return W.WNOT_BETWEEN(min, max)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnDate) NOT_EQ(rhs jet.DateExpression) jet.BoolExpression {
	return W.WNOT_EQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnDate) NOT_IN(expressions ...jet.Expression) jet.BoolExpression {
	return W.WNOT_IN(expressions...)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnDate) NULLS_FIRST() jet.OrderByClause {
	return W.WNULLS_FIRST()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnDate) NULLS_LAST() jet.OrderByClause {
	return W.WNULLS_LAST()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnDate) Name() string {
	return W.WName()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnDate) SET(dateExp jet.DateExpression) jet.ColumnAssigment {
	return W.WSET(dateExp)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnDate) SUB(rhs jet.Interval) jet.TimestampExpression {
	return W.WSUB(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnDate) TableName() string {
	return W.WTableName()
}

// _github_com_switchupcb_jet_v2_postgres_ColumnDateRange is an interface wrapper for ColumnDateRange type
type _github_com_switchupcb_jet_v2_postgres_ColumnDateRange struct {
	IValue          interface{}
	WAS             func(alias string) jet.Projection
	WASC            func() jet.OrderByClause
	WCONTAINS       func(rhs postgres.DateExpression) jet.BoolExpression
	WCONTAINS_RANGE func(rhs jet.Range[postgres.DateExpression]) jet.BoolExpression
	WDESC           func() jet.OrderByClause
	WDIFFERENCE     func(rhs jet.Range[postgres.DateExpression]) jet.Range[postgres.DateExpression]
	WEQ             func(rhs jet.Range[postgres.DateExpression]) jet.BoolExpression
	WFrom           func(subQuery jet.SelectTable) jet.ColumnRange[postgres.DateExpression]
	WGT             func(rhs jet.Range[postgres.DateExpression]) jet.BoolExpression
	WGT_EQ          func(rhs jet.Range[postgres.DateExpression]) jet.BoolExpression
	WIN             func(expressions ...jet.Expression) jet.BoolExpression
	WINTERSECTION   func(rhs jet.Range[postgres.DateExpression]) jet.Range[postgres.DateExpression]
	WIS_EMPTY       func() jet.BoolExpression
	WIS_NOT_NULL    func() jet.BoolExpression
	WIS_NULL        func() jet.BoolExpression
	WLOWER_BOUND    func() postgres.DateExpression
	WLOWER_INC      func() jet.BoolExpression
	WLOWER_INF      func() jet.BoolExpression
	WLT             func(rhs jet.Range[postgres.DateExpression]) jet.BoolExpression
	WLT_EQ          func(rhs jet.Range[postgres.DateExpression]) jet.BoolExpression
	WNOT_EQ         func(rhs jet.Range[postgres.DateExpression]) jet.BoolExpression
	WNOT_IN         func(expressions ...jet.Expression) jet.BoolExpression
	WNULLS_FIRST    func() jet.OrderByClause
	WNULLS_LAST     func() jet.OrderByClause
	WName           func() string
	WOVERLAP        func(rhs jet.Range[postgres.DateExpression]) jet.BoolExpression
	WSET            func(rangeExp jet.Range[postgres.DateExpression]) jet.ColumnAssigment
	WTableName      func() string
	WUNION          func(rhs jet.Range[postgres.DateExpression]) jet.Range[postgres.DateExpression]
	WUPPER_BOUND    func() postgres.DateExpression
	WUPPER_INC      func() jet.BoolExpression
	WUPPER_INF      func() jet.BoolExpression
}

func (W _github_com_switchupcb_jet_v2_postgres_ColumnDateRange) AS(alias string) jet.Projection {
	return W.WAS(alias)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnDateRange) ASC() jet.OrderByClause {
	return W.WASC()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnDateRange) CONTAINS(rhs postgres.DateExpression) jet.BoolExpression {
	return W.WCONTAINS(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnDateRange) CONTAINS_RANGE(rhs jet.Range[postgres.DateExpression]) jet.BoolExpression {
	return W.WCONTAINS_RANGE(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnDateRange) DESC() jet.OrderByClause {
	return W.WDESC()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnDateRange) DIFFERENCE(rhs jet.Range[postgres.DateExpression]) jet.Range[postgres.DateExpression] {
	return W.WDIFFERENCE(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnDateRange) EQ(rhs jet.Range[postgres.DateExpression]) jet.BoolExpression {
	return W.WEQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnDateRange) From(subQuery jet.SelectTable) jet.ColumnRange[postgres.DateExpression] {
	return W.WFrom(subQuery)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnDateRange) GT(rhs jet.Range[postgres.DateExpression]) jet.BoolExpression {
	return W.WGT(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnDateRange) GT_EQ(rhs jet.Range[postgres.DateExpression]) jet.BoolExpression {
	return W.WGT_EQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnDateRange) IN(expressions ...jet.Expression) jet.BoolExpression {
	return W.WIN(expressions...)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnDateRange) INTERSECTION(rhs jet.Range[postgres.DateExpression]) jet.Range[postgres.DateExpression] {
	return W.WINTERSECTION(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnDateRange) IS_EMPTY() jet.BoolExpression {
	return W.WIS_EMPTY()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnDateRange) IS_NOT_NULL() jet.BoolExpression {
	return W.WIS_NOT_NULL()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnDateRange) IS_NULL() jet.BoolExpression {
	return W.WIS_NULL()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnDateRange) LOWER_BOUND() postgres.DateExpression {
	return W.WLOWER_BOUND()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnDateRange) LOWER_INC() jet.BoolExpression {
	return W.WLOWER_INC()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnDateRange) LOWER_INF() jet.BoolExpression {
	return W.WLOWER_INF()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnDateRange) LT(rhs jet.Range[postgres.DateExpression]) jet.BoolExpression {
	return W.WLT(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnDateRange) LT_EQ(rhs jet.Range[postgres.DateExpression]) jet.BoolExpression {
	return W.WLT_EQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnDateRange) NOT_EQ(rhs jet.Range[postgres.DateExpression]) jet.BoolExpression {
	return W.WNOT_EQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnDateRange) NOT_IN(expressions ...jet.Expression) jet.BoolExpression {
	return W.WNOT_IN(expressions...)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnDateRange) NULLS_FIRST() jet.OrderByClause {
	return W.WNULLS_FIRST()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnDateRange) NULLS_LAST() jet.OrderByClause {
	return W.WNULLS_LAST()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnDateRange) Name() string {
	return W.WName()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnDateRange) OVERLAP(rhs jet.Range[postgres.DateExpression]) jet.BoolExpression {
	return W.WOVERLAP(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnDateRange) SET(rangeExp jet.Range[postgres.DateExpression]) jet.ColumnAssigment {
	return W.WSET(rangeExp)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnDateRange) TableName() string {
	return W.WTableName()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnDateRange) UNION(rhs jet.Range[postgres.DateExpression]) jet.Range[postgres.DateExpression] {
	return W.WUNION(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnDateRange) UPPER_BOUND() postgres.DateExpression {
	return W.WUPPER_BOUND()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnDateRange) UPPER_INC() jet.BoolExpression {
	return W.WUPPER_INC()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnDateRange) UPPER_INF() jet.BoolExpression {
	return W.WUPPER_INF()
}

// _github_com_switchupcb_jet_v2_postgres_ColumnFloat is an interface wrapper for ColumnFloat type
type _github_com_switchupcb_jet_v2_postgres_ColumnFloat struct {
	IValue                interface{}
	WADD                  func(rhs jet.NumericExpression) jet.FloatExpression
	WAS                   func(alias string) jet.Projection
	WASC                  func() jet.OrderByClause
	WBETWEEN              func(min jet.FloatExpression, max jet.FloatExpression) jet.BoolExpression
	WDESC                 func() jet.OrderByClause
	WDIV                  func(rhs jet.NumericExpression) jet.FloatExpression
	WEQ                   func(rhs jet.FloatExpression) jet.BoolExpression
	WFrom                 func(subQuery jet.SelectTable) jet.ColumnFloat
	WGT                   func(rhs jet.FloatExpression) jet.BoolExpression
	WGT_EQ                func(rhs jet.FloatExpression) jet.BoolExpression
	WIN                   func(expressions ...jet.Expression) jet.BoolExpression
	WIS_DISTINCT_FROM     func(rhs jet.FloatExpression) jet.BoolExpression
	WIS_NOT_DISTINCT_FROM func(rhs jet.FloatExpression) jet.BoolExpression
	WIS_NOT_NULL          func() jet.BoolExpression
	WIS_NULL              func() jet.BoolExpression
	WLT                   func(rhs jet.FloatExpression) jet.BoolExpression
	WLT_EQ                func(rhs jet.FloatExpression) jet.BoolExpression
	WMOD                  func(rhs jet.NumericExpression) jet.FloatExpression
	WMUL                  func(rhs jet.NumericExpression) jet.FloatExpression
	WNOT_BETWEEN          func(min jet.FloatExpression, max jet.FloatExpression) jet.BoolExpression
	WNOT_EQ               func(rhs jet.FloatExpression) jet.BoolExpression
	WNOT_IN               func(expressions ...jet.Expression) jet.BoolExpression
	WNULLS_FIRST          func() jet.OrderByClause
	WNULLS_LAST           func() jet.OrderByClause
	WName                 func() string
	WPOW                  func(rhs jet.NumericExpression) jet.FloatExpression
	WSET                  func(floatExp jet.FloatExpression) jet.ColumnAssigment
	WSUB                  func(rhs jet.NumericExpression) jet.FloatExpression
	WTableName            func() string
}

func (W _github_com_switchupcb_jet_v2_postgres_ColumnFloat) ADD(rhs jet.NumericExpression) jet.FloatExpression {
	return W.WADD(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnFloat) AS(alias string) jet.Projection {
	return W.WAS(alias)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnFloat) ASC() jet.OrderByClause {
	return W.WASC()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnFloat) BETWEEN(min jet.FloatExpression, max jet.FloatExpression) jet.BoolExpression {
	return W.WBETWEEN(min, max)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnFloat) DESC() jet.OrderByClause {
	return W.WDESC()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnFloat) DIV(rhs jet.NumericExpression) jet.FloatExpression {
	return W.WDIV(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnFloat) EQ(rhs jet.FloatExpression) jet.BoolExpression {
	return W.WEQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnFloat) From(subQuery jet.SelectTable) jet.ColumnFloat {
	return W.WFrom(subQuery)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnFloat) GT(rhs jet.FloatExpression) jet.BoolExpression {
	return W.WGT(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnFloat) GT_EQ(rhs jet.FloatExpression) jet.BoolExpression {
	return W.WGT_EQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnFloat) IN(expressions ...jet.Expression) jet.BoolExpression {
	return W.WIN(expressions...)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnFloat) IS_DISTINCT_FROM(rhs jet.FloatExpression) jet.BoolExpression {
	return W.WIS_DISTINCT_FROM(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnFloat) IS_NOT_DISTINCT_FROM(rhs jet.FloatExpression) jet.BoolExpression {
	return W.WIS_NOT_DISTINCT_FROM(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnFloat) IS_NOT_NULL() jet.BoolExpression {
	return W.WIS_NOT_NULL()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnFloat) IS_NULL() jet.BoolExpression {
	return W.WIS_NULL()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnFloat) LT(rhs jet.FloatExpression) jet.BoolExpression {
	return W.WLT(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnFloat) LT_EQ(rhs jet.FloatExpression) jet.BoolExpression {
	return W.WLT_EQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnFloat) MOD(rhs jet.NumericExpression) jet.FloatExpression {
	return W.WMOD(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnFloat) MUL(rhs jet.NumericExpression) jet.FloatExpression {
	return W.WMUL(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnFloat) NOT_BETWEEN(min jet.FloatExpression, max jet.FloatExpression) jet.BoolExpression {
	return W.WNOT_BETWEEN(min, max)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnFloat) NOT_EQ(rhs jet.FloatExpression) jet.BoolExpression {
	return W.WNOT_EQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnFloat) NOT_IN(expressions ...jet.Expression) jet.BoolExpression {
	return W.WNOT_IN(expressions...)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnFloat) NULLS_FIRST() jet.OrderByClause {
	return W.WNULLS_FIRST()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnFloat) NULLS_LAST() jet.OrderByClause {
	return W.WNULLS_LAST()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnFloat) Name() string {
	return W.WName()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnFloat) POW(rhs jet.NumericExpression) jet.FloatExpression {
	return W.WPOW(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnFloat) SET(floatExp jet.FloatExpression) jet.ColumnAssigment {
	return W.WSET(floatExp)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnFloat) SUB(rhs jet.NumericExpression) jet.FloatExpression {
	return W.WSUB(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnFloat) TableName() string {
	return W.WTableName()
}

// _github_com_switchupcb_jet_v2_postgres_ColumnInt4Range is an interface wrapper for ColumnInt4Range type
type _github_com_switchupcb_jet_v2_postgres_ColumnInt4Range struct {
	IValue          interface{}
	WAS             func(alias string) jet.Projection
	WASC            func() jet.OrderByClause
	WCONTAINS       func(rhs jet.Int4Expression) jet.BoolExpression
	WCONTAINS_RANGE func(rhs jet.Range[jet.Int4Expression]) jet.BoolExpression
	WDESC           func() jet.OrderByClause
	WDIFFERENCE     func(rhs jet.Range[jet.Int4Expression]) jet.Range[jet.Int4Expression]
	WEQ             func(rhs jet.Range[jet.Int4Expression]) jet.BoolExpression
	WFrom           func(subQuery jet.SelectTable) jet.ColumnRange[jet.Int4Expression]
	WGT             func(rhs jet.Range[jet.Int4Expression]) jet.BoolExpression
	WGT_EQ          func(rhs jet.Range[jet.Int4Expression]) jet.BoolExpression
	WIN             func(expressions ...jet.Expression) jet.BoolExpression
	WINTERSECTION   func(rhs jet.Range[jet.Int4Expression]) jet.Range[jet.Int4Expression]
	WIS_EMPTY       func() jet.BoolExpression
	WIS_NOT_NULL    func() jet.BoolExpression
	WIS_NULL        func() jet.BoolExpression
	WLOWER_BOUND    func() jet.Int4Expression
	WLOWER_INC      func() jet.BoolExpression
	WLOWER_INF      func() jet.BoolExpression
	WLT             func(rhs jet.Range[jet.Int4Expression]) jet.BoolExpression
	WLT_EQ          func(rhs jet.Range[jet.Int4Expression]) jet.BoolExpression
	WNOT_EQ         func(rhs jet.Range[jet.Int4Expression]) jet.BoolExpression
	WNOT_IN         func(expressions ...jet.Expression) jet.BoolExpression
	WNULLS_FIRST    func() jet.OrderByClause
	WNULLS_LAST     func() jet.OrderByClause
	WName           func() string
	WOVERLAP        func(rhs jet.Range[jet.Int4Expression]) jet.BoolExpression
	WSET            func(rangeExp jet.Range[jet.Int4Expression]) jet.ColumnAssigment
	WTableName      func() string
	WUNION          func(rhs jet.Range[jet.Int4Expression]) jet.Range[jet.Int4Expression]
	WUPPER_BOUND    func() jet.Int4Expression
	WUPPER_INC      func() jet.BoolExpression
	WUPPER_INF      func() jet.BoolExpression
}

func (W _github_com_switchupcb_jet_v2_postgres_ColumnInt4Range) AS(alias string) jet.Projection {
	return W.WAS(alias)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInt4Range) ASC() jet.OrderByClause {
	return W.WASC()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInt4Range) CONTAINS(rhs jet.Int4Expression) jet.BoolExpression {
	return W.WCONTAINS(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInt4Range) CONTAINS_RANGE(rhs jet.Range[jet.Int4Expression]) jet.BoolExpression {
	return W.WCONTAINS_RANGE(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInt4Range) DESC() jet.OrderByClause {
	return W.WDESC()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInt4Range) DIFFERENCE(rhs jet.Range[jet.Int4Expression]) jet.Range[jet.Int4Expression] {
	return W.WDIFFERENCE(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInt4Range) EQ(rhs jet.Range[jet.Int4Expression]) jet.BoolExpression {
	return W.WEQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInt4Range) From(subQuery jet.SelectTable) jet.ColumnRange[jet.Int4Expression] {
	return W.WFrom(subQuery)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInt4Range) GT(rhs jet.Range[jet.Int4Expression]) jet.BoolExpression {
	return W.WGT(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInt4Range) GT_EQ(rhs jet.Range[jet.Int4Expression]) jet.BoolExpression {
	return W.WGT_EQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInt4Range) IN(expressions ...jet.Expression) jet.BoolExpression {
	return W.WIN(expressions...)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInt4Range) INTERSECTION(rhs jet.Range[jet.Int4Expression]) jet.Range[jet.Int4Expression] {
	return W.WINTERSECTION(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInt4Range) IS_EMPTY() jet.BoolExpression {
	return W.WIS_EMPTY()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInt4Range) IS_NOT_NULL() jet.BoolExpression {
	return W.WIS_NOT_NULL()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInt4Range) IS_NULL() jet.BoolExpression {
	return W.WIS_NULL()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInt4Range) LOWER_BOUND() jet.Int4Expression {
	return W.WLOWER_BOUND()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInt4Range) LOWER_INC() jet.BoolExpression {
	return W.WLOWER_INC()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInt4Range) LOWER_INF() jet.BoolExpression {
	return W.WLOWER_INF()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInt4Range) LT(rhs jet.Range[jet.Int4Expression]) jet.BoolExpression {
	return W.WLT(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInt4Range) LT_EQ(rhs jet.Range[jet.Int4Expression]) jet.BoolExpression {
	return W.WLT_EQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInt4Range) NOT_EQ(rhs jet.Range[jet.Int4Expression]) jet.BoolExpression {
	return W.WNOT_EQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInt4Range) NOT_IN(expressions ...jet.Expression) jet.BoolExpression {
	return W.WNOT_IN(expressions...)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInt4Range) NULLS_FIRST() jet.OrderByClause {
	return W.WNULLS_FIRST()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInt4Range) NULLS_LAST() jet.OrderByClause {
	return W.WNULLS_LAST()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInt4Range) Name() string {
	return W.WName()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInt4Range) OVERLAP(rhs jet.Range[jet.Int4Expression]) jet.BoolExpression {
	return W.WOVERLAP(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInt4Range) SET(rangeExp jet.Range[jet.Int4Expression]) jet.ColumnAssigment {
	return W.WSET(rangeExp)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInt4Range) TableName() string {
	return W.WTableName()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInt4Range) UNION(rhs jet.Range[jet.Int4Expression]) jet.Range[jet.Int4Expression] {
	return W.WUNION(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInt4Range) UPPER_BOUND() jet.Int4Expression {
	return W.WUPPER_BOUND()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInt4Range) UPPER_INC() jet.BoolExpression {
	return W.WUPPER_INC()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInt4Range) UPPER_INF() jet.BoolExpression {
	return W.WUPPER_INF()
}

// _github_com_switchupcb_jet_v2_postgres_ColumnInt8Range is an interface wrapper for ColumnInt8Range type
type _github_com_switchupcb_jet_v2_postgres_ColumnInt8Range struct {
	IValue          interface{}
	WAS             func(alias string) jet.Projection
	WASC            func() jet.OrderByClause
	WCONTAINS       func(rhs jet.Int8Expression) jet.BoolExpression
	WCONTAINS_RANGE func(rhs jet.Range[jet.Int8Expression]) jet.BoolExpression
	WDESC           func() jet.OrderByClause
	WDIFFERENCE     func(rhs jet.Range[jet.Int8Expression]) jet.Range[jet.Int8Expression]
	WEQ             func(rhs jet.Range[jet.Int8Expression]) jet.BoolExpression
	WFrom           func(subQuery jet.SelectTable) jet.ColumnRange[jet.Int8Expression]
	WGT             func(rhs jet.Range[jet.Int8Expression]) jet.BoolExpression
	WGT_EQ          func(rhs jet.Range[jet.Int8Expression]) jet.BoolExpression
	WIN             func(expressions ...jet.Expression) jet.BoolExpression
	WINTERSECTION   func(rhs jet.Range[jet.Int8Expression]) jet.Range[jet.Int8Expression]
	WIS_EMPTY       func() jet.BoolExpression
	WIS_NOT_NULL    func() jet.BoolExpression
	WIS_NULL        func() jet.BoolExpression
	WLOWER_BOUND    func() jet.Int8Expression
	WLOWER_INC      func() jet.BoolExpression
	WLOWER_INF      func() jet.BoolExpression
	WLT             func(rhs jet.Range[jet.Int8Expression]) jet.BoolExpression
	WLT_EQ          func(rhs jet.Range[jet.Int8Expression]) jet.BoolExpression
	WNOT_EQ         func(rhs jet.Range[jet.Int8Expression]) jet.BoolExpression
	WNOT_IN         func(expressions ...jet.Expression) jet.BoolExpression
	WNULLS_FIRST    func() jet.OrderByClause
	WNULLS_LAST     func() jet.OrderByClause
	WName           func() string
	WOVERLAP        func(rhs jet.Range[jet.Int8Expression]) jet.BoolExpression
	WSET            func(rangeExp jet.Range[jet.Int8Expression]) jet.ColumnAssigment
	WTableName      func() string
	WUNION          func(rhs jet.Range[jet.Int8Expression]) jet.Range[jet.Int8Expression]
	WUPPER_BOUND    func() jet.Int8Expression
	WUPPER_INC      func() jet.BoolExpression
	WUPPER_INF      func() jet.BoolExpression
}

func (W _github_com_switchupcb_jet_v2_postgres_ColumnInt8Range) AS(alias string) jet.Projection {
	return W.WAS(alias)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInt8Range) ASC() jet.OrderByClause {
	return W.WASC()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInt8Range) CONTAINS(rhs jet.Int8Expression) jet.BoolExpression {
	return W.WCONTAINS(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInt8Range) CONTAINS_RANGE(rhs jet.Range[jet.Int8Expression]) jet.BoolExpression {
	return W.WCONTAINS_RANGE(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInt8Range) DESC() jet.OrderByClause {
	return W.WDESC()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInt8Range) DIFFERENCE(rhs jet.Range[jet.Int8Expression]) jet.Range[jet.Int8Expression] {
	return W.WDIFFERENCE(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInt8Range) EQ(rhs jet.Range[jet.Int8Expression]) jet.BoolExpression {
	return W.WEQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInt8Range) From(subQuery jet.SelectTable) jet.ColumnRange[jet.Int8Expression] {
	return W.WFrom(subQuery)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInt8Range) GT(rhs jet.Range[jet.Int8Expression]) jet.BoolExpression {
	return W.WGT(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInt8Range) GT_EQ(rhs jet.Range[jet.Int8Expression]) jet.BoolExpression {
	return W.WGT_EQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInt8Range) IN(expressions ...jet.Expression) jet.BoolExpression {
	return W.WIN(expressions...)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInt8Range) INTERSECTION(rhs jet.Range[jet.Int8Expression]) jet.Range[jet.Int8Expression] {
	return W.WINTERSECTION(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInt8Range) IS_EMPTY() jet.BoolExpression {
	return W.WIS_EMPTY()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInt8Range) IS_NOT_NULL() jet.BoolExpression {
	return W.WIS_NOT_NULL()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInt8Range) IS_NULL() jet.BoolExpression {
	return W.WIS_NULL()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInt8Range) LOWER_BOUND() jet.Int8Expression {
	return W.WLOWER_BOUND()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInt8Range) LOWER_INC() jet.BoolExpression {
	return W.WLOWER_INC()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInt8Range) LOWER_INF() jet.BoolExpression {
	return W.WLOWER_INF()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInt8Range) LT(rhs jet.Range[jet.Int8Expression]) jet.BoolExpression {
	return W.WLT(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInt8Range) LT_EQ(rhs jet.Range[jet.Int8Expression]) jet.BoolExpression {
	return W.WLT_EQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInt8Range) NOT_EQ(rhs jet.Range[jet.Int8Expression]) jet.BoolExpression {
	return W.WNOT_EQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInt8Range) NOT_IN(expressions ...jet.Expression) jet.BoolExpression {
	return W.WNOT_IN(expressions...)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInt8Range) NULLS_FIRST() jet.OrderByClause {
	return W.WNULLS_FIRST()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInt8Range) NULLS_LAST() jet.OrderByClause {
	return W.WNULLS_LAST()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInt8Range) Name() string {
	return W.WName()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInt8Range) OVERLAP(rhs jet.Range[jet.Int8Expression]) jet.BoolExpression {
	return W.WOVERLAP(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInt8Range) SET(rangeExp jet.Range[jet.Int8Expression]) jet.ColumnAssigment {
	return W.WSET(rangeExp)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInt8Range) TableName() string {
	return W.WTableName()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInt8Range) UNION(rhs jet.Range[jet.Int8Expression]) jet.Range[jet.Int8Expression] {
	return W.WUNION(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInt8Range) UPPER_BOUND() jet.Int8Expression {
	return W.WUPPER_BOUND()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInt8Range) UPPER_INC() jet.BoolExpression {
	return W.WUPPER_INC()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInt8Range) UPPER_INF() jet.BoolExpression {
	return W.WUPPER_INF()
}

// _github_com_switchupcb_jet_v2_postgres_ColumnInteger is an interface wrapper for ColumnInteger type
type _github_com_switchupcb_jet_v2_postgres_ColumnInteger struct {
	IValue                interface{}
	WADD                  func(rhs jet.IntegerExpression) jet.IntegerExpression
	WAS                   func(alias string) jet.Projection
	WASC                  func() jet.OrderByClause
	WBETWEEN              func(min jet.IntegerExpression, max jet.IntegerExpression) jet.BoolExpression
	WBIT_AND              func(rhs jet.IntegerExpression) jet.IntegerExpression
	WBIT_OR               func(rhs jet.IntegerExpression) jet.IntegerExpression
	WBIT_SHIFT_LEFT       func(shift jet.IntegerExpression) jet.IntegerExpression
	WBIT_SHIFT_RIGHT      func(shift jet.IntegerExpression) jet.IntegerExpression
	WBIT_XOR              func(rhs jet.IntegerExpression) jet.IntegerExpression
	WDESC                 func() jet.OrderByClause
	WDIV                  func(rhs jet.IntegerExpression) jet.IntegerExpression
	WEQ                   func(rhs jet.IntegerExpression) jet.BoolExpression
	WFrom                 func(subQuery jet.SelectTable) jet.ColumnInteger
	WGT                   func(rhs jet.IntegerExpression) jet.BoolExpression
	WGT_EQ                func(rhs jet.IntegerExpression) jet.BoolExpression
	WIN                   func(expressions ...jet.Expression) jet.BoolExpression
	WIS_DISTINCT_FROM     func(rhs jet.IntegerExpression) jet.BoolExpression
	WIS_NOT_DISTINCT_FROM func(rhs jet.IntegerExpression) jet.BoolExpression
	WIS_NOT_NULL          func() jet.BoolExpression
	WIS_NULL              func() jet.BoolExpression
	WLT                   func(rhs jet.IntegerExpression) jet.BoolExpression
	WLT_EQ                func(rhs jet.IntegerExpression) jet.BoolExpression
	WMOD                  func(rhs jet.IntegerExpression) jet.IntegerExpression
	WMUL                  func(rhs jet.IntegerExpression) jet.IntegerExpression
	WNOT_BETWEEN          func(min jet.IntegerExpression, max jet.IntegerExpression) jet.BoolExpression
	WNOT_EQ               func(rhs jet.IntegerExpression) jet.BoolExpression
	WNOT_IN               func(expressions ...jet.Expression) jet.BoolExpression
	WNULLS_FIRST          func() jet.OrderByClause
	WNULLS_LAST           func() jet.OrderByClause
	WName                 func() string
	WPOW                  func(rhs jet.IntegerExpression) jet.IntegerExpression
	WSET                  func(intExp jet.IntegerExpression) jet.ColumnAssigment
	WSUB                  func(rhs jet.IntegerExpression) jet.IntegerExpression
	WTableName            func() string
}

func (W _github_com_switchupcb_jet_v2_postgres_ColumnInteger) ADD(rhs jet.IntegerExpression) jet.IntegerExpression {
	return W.WADD(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInteger) AS(alias string) jet.Projection {
	return W.WAS(alias)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInteger) ASC() jet.OrderByClause {
	return W.WASC()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInteger) BETWEEN(min jet.IntegerExpression, max jet.IntegerExpression) jet.BoolExpression {
	return W.WBETWEEN(min, max)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInteger) BIT_AND(rhs jet.IntegerExpression) jet.IntegerExpression {
	return W.WBIT_AND(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInteger) BIT_OR(rhs jet.IntegerExpression) jet.IntegerExpression {
	return W.WBIT_OR(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInteger) BIT_SHIFT_LEFT(shift jet.IntegerExpression) jet.IntegerExpression {
	return W.WBIT_SHIFT_LEFT(shift)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInteger) BIT_SHIFT_RIGHT(shift jet.IntegerExpression) jet.IntegerExpression {
	return W.WBIT_SHIFT_RIGHT(shift)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInteger) BIT_XOR(rhs jet.IntegerExpression) jet.IntegerExpression {
	return W.WBIT_XOR(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInteger) DESC() jet.OrderByClause {
	return W.WDESC()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInteger) DIV(rhs jet.IntegerExpression) jet.IntegerExpression {
	return W.WDIV(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInteger) EQ(rhs jet.IntegerExpression) jet.BoolExpression {
	return W.WEQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInteger) From(subQuery jet.SelectTable) jet.ColumnInteger {
	return W.WFrom(subQuery)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInteger) GT(rhs jet.IntegerExpression) jet.BoolExpression {
	return W.WGT(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInteger) GT_EQ(rhs jet.IntegerExpression) jet.BoolExpression {
	return W.WGT_EQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInteger) IN(expressions ...jet.Expression) jet.BoolExpression {
	return W.WIN(expressions...)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInteger) IS_DISTINCT_FROM(rhs jet.IntegerExpression) jet.BoolExpression {
	return W.WIS_DISTINCT_FROM(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInteger) IS_NOT_DISTINCT_FROM(rhs jet.IntegerExpression) jet.BoolExpression {
	return W.WIS_NOT_DISTINCT_FROM(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInteger) IS_NOT_NULL() jet.BoolExpression {
	return W.WIS_NOT_NULL()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInteger) IS_NULL() jet.BoolExpression {
	return W.WIS_NULL()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInteger) LT(rhs jet.IntegerExpression) jet.BoolExpression {
	return W.WLT(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInteger) LT_EQ(rhs jet.IntegerExpression) jet.BoolExpression {
	return W.WLT_EQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInteger) MOD(rhs jet.IntegerExpression) jet.IntegerExpression {
	return W.WMOD(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInteger) MUL(rhs jet.IntegerExpression) jet.IntegerExpression {
	return W.WMUL(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInteger) NOT_BETWEEN(min jet.IntegerExpression, max jet.IntegerExpression) jet.BoolExpression {
	return W.WNOT_BETWEEN(min, max)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInteger) NOT_EQ(rhs jet.IntegerExpression) jet.BoolExpression {
	return W.WNOT_EQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInteger) NOT_IN(expressions ...jet.Expression) jet.BoolExpression {
	return W.WNOT_IN(expressions...)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInteger) NULLS_FIRST() jet.OrderByClause {
	return W.WNULLS_FIRST()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInteger) NULLS_LAST() jet.OrderByClause {
	return W.WNULLS_LAST()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInteger) Name() string {
	return W.WName()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInteger) POW(rhs jet.IntegerExpression) jet.IntegerExpression {
	return W.WPOW(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInteger) SET(intExp jet.IntegerExpression) jet.ColumnAssigment {
	return W.WSET(intExp)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInteger) SUB(rhs jet.IntegerExpression) jet.IntegerExpression {
	return W.WSUB(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInteger) TableName() string {
	return W.WTableName()
}

// _github_com_switchupcb_jet_v2_postgres_ColumnInterval is an interface wrapper for ColumnInterval type
type _github_com_switchupcb_jet_v2_postgres_ColumnInterval struct {
	IValue                interface{}
	WADD                  func(rhs postgres.IntervalExpression) postgres.IntervalExpression
	WAS                   func(alias string) jet.Projection
	WASC                  func() jet.OrderByClause
	WBETWEEN              func(min postgres.IntervalExpression, max postgres.IntervalExpression) postgres.BoolExpression
	WDESC                 func() jet.OrderByClause
	WDIV                  func(rhs postgres.NumericExpression) postgres.IntervalExpression
	WEQ                   func(rhs postgres.IntervalExpression) postgres.BoolExpression
	WFrom                 func(subQuery postgres.SelectTable) postgres.ColumnInterval
	WGT                   func(rhs postgres.IntervalExpression) postgres.BoolExpression
	WGT_EQ                func(rhs postgres.IntervalExpression) postgres.BoolExpression
	WIN                   func(expressions ...jet.Expression) jet.BoolExpression
	WIS_DISTINCT_FROM     func(rhs postgres.IntervalExpression) postgres.BoolExpression
	WIS_NOT_DISTINCT_FROM func(rhs postgres.IntervalExpression) postgres.BoolExpression
	WIS_NOT_NULL          func() jet.BoolExpression
	WIS_NULL              func() jet.BoolExpression
	WLT                   func(rhs postgres.IntervalExpression) postgres.BoolExpression
	WLT_EQ                func(rhs postgres.IntervalExpression) postgres.BoolExpression
	WMUL                  func(rhs postgres.NumericExpression) postgres.IntervalExpression
	WNOT_BETWEEN          func(min postgres.IntervalExpression, max postgres.IntervalExpression) postgres.BoolExpression
	WNOT_EQ               func(rhs postgres.IntervalExpression) postgres.BoolExpression
	WNOT_IN               func(expressions ...jet.Expression) jet.BoolExpression
	WNULLS_FIRST          func() jet.OrderByClause
	WNULLS_LAST           func() jet.OrderByClause
	WName                 func() string
	WSET                  func(intervalExp postgres.IntervalExpression) postgres.ColumnAssigment
	WSUB                  func(rhs postgres.IntervalExpression) postgres.IntervalExpression
	WTableName            func() string
}

func (W _github_com_switchupcb_jet_v2_postgres_ColumnInterval) ADD(rhs postgres.IntervalExpression) postgres.IntervalExpression {
	return W.WADD(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInterval) AS(alias string) jet.Projection {
	return W.WAS(alias)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInterval) ASC() jet.OrderByClause {
	return W.WASC()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInterval) BETWEEN(min postgres.IntervalExpression, max postgres.IntervalExpression) postgres.BoolExpression {
	return W.WBETWEEN(min, max)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInterval) DESC() jet.OrderByClause {
	return W.WDESC()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInterval) DIV(rhs postgres.NumericExpression) postgres.IntervalExpression {
	return W.WDIV(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInterval) EQ(rhs postgres.IntervalExpression) postgres.BoolExpression {
	return W.WEQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInterval) From(subQuery postgres.SelectTable) postgres.ColumnInterval {
	return W.WFrom(subQuery)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInterval) GT(rhs postgres.IntervalExpression) postgres.BoolExpression {
	return W.WGT(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInterval) GT_EQ(rhs postgres.IntervalExpression) postgres.BoolExpression {
	return W.WGT_EQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInterval) IN(expressions ...jet.Expression) jet.BoolExpression {
	return W.WIN(expressions...)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInterval) IS_DISTINCT_FROM(rhs postgres.IntervalExpression) postgres.BoolExpression {
	return W.WIS_DISTINCT_FROM(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInterval) IS_NOT_DISTINCT_FROM(rhs postgres.IntervalExpression) postgres.BoolExpression {
	return W.WIS_NOT_DISTINCT_FROM(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInterval) IS_NOT_NULL() jet.BoolExpression {
	return W.WIS_NOT_NULL()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInterval) IS_NULL() jet.BoolExpression {
	return W.WIS_NULL()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInterval) LT(rhs postgres.IntervalExpression) postgres.BoolExpression {
	return W.WLT(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInterval) LT_EQ(rhs postgres.IntervalExpression) postgres.BoolExpression {
	return W.WLT_EQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInterval) MUL(rhs postgres.NumericExpression) postgres.IntervalExpression {
	return W.WMUL(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInterval) NOT_BETWEEN(min postgres.IntervalExpression, max postgres.IntervalExpression) postgres.BoolExpression {
	return W.WNOT_BETWEEN(min, max)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInterval) NOT_EQ(rhs postgres.IntervalExpression) postgres.BoolExpression {
	return W.WNOT_EQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInterval) NOT_IN(expressions ...jet.Expression) jet.BoolExpression {
	return W.WNOT_IN(expressions...)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInterval) NULLS_FIRST() jet.OrderByClause {
	return W.WNULLS_FIRST()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInterval) NULLS_LAST() jet.OrderByClause {
	return W.WNULLS_LAST()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInterval) Name() string {
	return W.WName()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInterval) SET(intervalExp postgres.IntervalExpression) postgres.ColumnAssigment {
	return W.WSET(intervalExp)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInterval) SUB(rhs postgres.IntervalExpression) postgres.IntervalExpression {
	return W.WSUB(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnInterval) TableName() string {
	return W.WTableName()
}

// _github_com_switchupcb_jet_v2_postgres_ColumnNumericRange is an interface wrapper for ColumnNumericRange type
type _github_com_switchupcb_jet_v2_postgres_ColumnNumericRange struct {
	IValue          interface{}
	WAS             func(alias string) jet.Projection
	WASC            func() jet.OrderByClause
	WCONTAINS       func(rhs postgres.NumericExpression) jet.BoolExpression
	WCONTAINS_RANGE func(rhs jet.Range[postgres.NumericExpression]) jet.BoolExpression
	WDESC           func() jet.OrderByClause
	WDIFFERENCE     func(rhs jet.Range[postgres.NumericExpression]) jet.Range[postgres.NumericExpression]
	WEQ             func(rhs jet.Range[postgres.NumericExpression]) jet.BoolExpression
	WFrom           func(subQuery jet.SelectTable) jet.ColumnRange[postgres.NumericExpression]
	WGT             func(rhs jet.Range[postgres.NumericExpression]) jet.BoolExpression
	WGT_EQ          func(rhs jet.Range[postgres.NumericExpression]) jet.BoolExpression
	WIN             func(expressions ...jet.Expression) jet.BoolExpression
	WINTERSECTION   func(rhs jet.Range[postgres.NumericExpression]) jet.Range[postgres.NumericExpression]
	WIS_EMPTY       func() jet.BoolExpression
	WIS_NOT_NULL    func() jet.BoolExpression
	WIS_NULL        func() jet.BoolExpression
	WLOWER_BOUND    func() postgres.NumericExpression
	WLOWER_INC      func() jet.BoolExpression
	WLOWER_INF      func() jet.BoolExpression
	WLT             func(rhs jet.Range[postgres.NumericExpression]) jet.BoolExpression
	WLT_EQ          func(rhs jet.Range[postgres.NumericExpression]) jet.BoolExpression
	WNOT_EQ         func(rhs jet.Range[postgres.NumericExpression]) jet.BoolExpression
	WNOT_IN         func(expressions ...jet.Expression) jet.BoolExpression
	WNULLS_FIRST    func() jet.OrderByClause
	WNULLS_LAST     func() jet.OrderByClause
	WName           func() string
	WOVERLAP        func(rhs jet.Range[postgres.NumericExpression]) jet.BoolExpression
	WSET            func(rangeExp jet.Range[postgres.NumericExpression]) jet.ColumnAssigment
	WTableName      func() string
	WUNION          func(rhs jet.Range[postgres.NumericExpression]) jet.Range[postgres.NumericExpression]
	WUPPER_BOUND    func() postgres.NumericExpression
	WUPPER_INC      func() jet.BoolExpression
	WUPPER_INF      func() jet.BoolExpression
}

func (W _github_com_switchupcb_jet_v2_postgres_ColumnNumericRange) AS(alias string) jet.Projection {
	return W.WAS(alias)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnNumericRange) ASC() jet.OrderByClause {
	return W.WASC()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnNumericRange) CONTAINS(rhs postgres.NumericExpression) jet.BoolExpression {
	return W.WCONTAINS(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnNumericRange) CONTAINS_RANGE(rhs jet.Range[postgres.NumericExpression]) jet.BoolExpression {
	return W.WCONTAINS_RANGE(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnNumericRange) DESC() jet.OrderByClause {
	return W.WDESC()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnNumericRange) DIFFERENCE(rhs jet.Range[postgres.NumericExpression]) jet.Range[postgres.NumericExpression] {
	return W.WDIFFERENCE(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnNumericRange) EQ(rhs jet.Range[postgres.NumericExpression]) jet.BoolExpression {
	return W.WEQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnNumericRange) From(subQuery jet.SelectTable) jet.ColumnRange[postgres.NumericExpression] {
	return W.WFrom(subQuery)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnNumericRange) GT(rhs jet.Range[postgres.NumericExpression]) jet.BoolExpression {
	return W.WGT(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnNumericRange) GT_EQ(rhs jet.Range[postgres.NumericExpression]) jet.BoolExpression {
	return W.WGT_EQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnNumericRange) IN(expressions ...jet.Expression) jet.BoolExpression {
	return W.WIN(expressions...)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnNumericRange) INTERSECTION(rhs jet.Range[postgres.NumericExpression]) jet.Range[postgres.NumericExpression] {
	return W.WINTERSECTION(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnNumericRange) IS_EMPTY() jet.BoolExpression {
	return W.WIS_EMPTY()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnNumericRange) IS_NOT_NULL() jet.BoolExpression {
	return W.WIS_NOT_NULL()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnNumericRange) IS_NULL() jet.BoolExpression {
	return W.WIS_NULL()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnNumericRange) LOWER_BOUND() postgres.NumericExpression {
	return W.WLOWER_BOUND()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnNumericRange) LOWER_INC() jet.BoolExpression {
	return W.WLOWER_INC()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnNumericRange) LOWER_INF() jet.BoolExpression {
	return W.WLOWER_INF()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnNumericRange) LT(rhs jet.Range[postgres.NumericExpression]) jet.BoolExpression {
	return W.WLT(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnNumericRange) LT_EQ(rhs jet.Range[postgres.NumericExpression]) jet.BoolExpression {
	return W.WLT_EQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnNumericRange) NOT_EQ(rhs jet.Range[postgres.NumericExpression]) jet.BoolExpression {
	return W.WNOT_EQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnNumericRange) NOT_IN(expressions ...jet.Expression) jet.BoolExpression {
	return W.WNOT_IN(expressions...)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnNumericRange) NULLS_FIRST() jet.OrderByClause {
	return W.WNULLS_FIRST()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnNumericRange) NULLS_LAST() jet.OrderByClause {
	return W.WNULLS_LAST()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnNumericRange) Name() string {
	return W.WName()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnNumericRange) OVERLAP(rhs jet.Range[postgres.NumericExpression]) jet.BoolExpression {
	return W.WOVERLAP(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnNumericRange) SET(rangeExp jet.Range[postgres.NumericExpression]) jet.ColumnAssigment {
	return W.WSET(rangeExp)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnNumericRange) TableName() string {
	return W.WTableName()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnNumericRange) UNION(rhs jet.Range[postgres.NumericExpression]) jet.Range[postgres.NumericExpression] {
	return W.WUNION(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnNumericRange) UPPER_BOUND() postgres.NumericExpression {
	return W.WUPPER_BOUND()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnNumericRange) UPPER_INC() jet.BoolExpression {
	return W.WUPPER_INC()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnNumericRange) UPPER_INF() jet.BoolExpression {
	return W.WUPPER_INF()
}

// _github_com_switchupcb_jet_v2_postgres_ColumnString is an interface wrapper for ColumnString type
type _github_com_switchupcb_jet_v2_postgres_ColumnString struct {
	IValue                interface{}
	WAS                   func(alias string) jet.Projection
	WASC                  func() jet.OrderByClause
	WBETWEEN              func(min jet.StringExpression, max jet.StringExpression) jet.BoolExpression
	WCONCAT               func(rhs jet.Expression) jet.StringExpression
	WDESC                 func() jet.OrderByClause
	WEQ                   func(rhs jet.StringExpression) jet.BoolExpression
	WFrom                 func(subQuery jet.SelectTable) jet.ColumnString
	WGT                   func(rhs jet.StringExpression) jet.BoolExpression
	WGT_EQ                func(rhs jet.StringExpression) jet.BoolExpression
	WIN                   func(expressions ...jet.Expression) jet.BoolExpression
	WIS_DISTINCT_FROM     func(rhs jet.StringExpression) jet.BoolExpression
	WIS_NOT_DISTINCT_FROM func(rhs jet.StringExpression) jet.BoolExpression
	WIS_NOT_NULL          func() jet.BoolExpression
	WIS_NULL              func() jet.BoolExpression
	WLIKE                 func(pattern jet.StringExpression) jet.BoolExpression
	WLT                   func(rhs jet.StringExpression) jet.BoolExpression
	WLT_EQ                func(rhs jet.StringExpression) jet.BoolExpression
	WNOT_BETWEEN          func(min jet.StringExpression, max jet.StringExpression) jet.BoolExpression
	WNOT_EQ               func(rhs jet.StringExpression) jet.BoolExpression
	WNOT_IN               func(expressions ...jet.Expression) jet.BoolExpression
	WNOT_LIKE             func(pattern jet.StringExpression) jet.BoolExpression
	WNOT_REGEXP_LIKE      func(pattern jet.StringExpression, caseSensitive ...bool) jet.BoolExpression
	WNULLS_FIRST          func() jet.OrderByClause
	WNULLS_LAST           func() jet.OrderByClause
	WName                 func() string
	WREGEXP_LIKE          func(pattern jet.StringExpression, caseSensitive ...bool) jet.BoolExpression
	WSET                  func(stringExp jet.StringExpression) jet.ColumnAssigment
	WTableName            func() string
}

func (W _github_com_switchupcb_jet_v2_postgres_ColumnString) AS(alias string) jet.Projection {
	return W.WAS(alias)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnString) ASC() jet.OrderByClause {
	return W.WASC()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnString) BETWEEN(min jet.StringExpression, max jet.StringExpression) jet.BoolExpression {
	return W.WBETWEEN(min, max)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnString) CONCAT(rhs jet.Expression) jet.StringExpression {
	return W.WCONCAT(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnString) DESC() jet.OrderByClause {
	return W.WDESC()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnString) EQ(rhs jet.StringExpression) jet.BoolExpression {
	return W.WEQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnString) From(subQuery jet.SelectTable) jet.ColumnString {
	return W.WFrom(subQuery)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnString) GT(rhs jet.StringExpression) jet.BoolExpression {
	return W.WGT(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnString) GT_EQ(rhs jet.StringExpression) jet.BoolExpression {
	return W.WGT_EQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnString) IN(expressions ...jet.Expression) jet.BoolExpression {
	return W.WIN(expressions...)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnString) IS_DISTINCT_FROM(rhs jet.StringExpression) jet.BoolExpression {
	return W.WIS_DISTINCT_FROM(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnString) IS_NOT_DISTINCT_FROM(rhs jet.StringExpression) jet.BoolExpression {
	return W.WIS_NOT_DISTINCT_FROM(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnString) IS_NOT_NULL() jet.BoolExpression {
	return W.WIS_NOT_NULL()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnString) IS_NULL() jet.BoolExpression {
	return W.WIS_NULL()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnString) LIKE(pattern jet.StringExpression) jet.BoolExpression {
	return W.WLIKE(pattern)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnString) LT(rhs jet.StringExpression) jet.BoolExpression {
	return W.WLT(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnString) LT_EQ(rhs jet.StringExpression) jet.BoolExpression {
	return W.WLT_EQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnString) NOT_BETWEEN(min jet.StringExpression, max jet.StringExpression) jet.BoolExpression {
	return W.WNOT_BETWEEN(min, max)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnString) NOT_EQ(rhs jet.StringExpression) jet.BoolExpression {
	return W.WNOT_EQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnString) NOT_IN(expressions ...jet.Expression) jet.BoolExpression {
	return W.WNOT_IN(expressions...)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnString) NOT_LIKE(pattern jet.StringExpression) jet.BoolExpression {
	return W.WNOT_LIKE(pattern)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnString) NOT_REGEXP_LIKE(pattern jet.StringExpression, caseSensitive ...bool) jet.BoolExpression {
	return W.WNOT_REGEXP_LIKE(pattern, caseSensitive...)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnString) NULLS_FIRST() jet.OrderByClause {
	return W.WNULLS_FIRST()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnString) NULLS_LAST() jet.OrderByClause {
	return W.WNULLS_LAST()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnString) Name() string {
	return W.WName()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnString) REGEXP_LIKE(pattern jet.StringExpression, caseSensitive ...bool) jet.BoolExpression {
	return W.WREGEXP_LIKE(pattern, caseSensitive...)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnString) SET(stringExp jet.StringExpression) jet.ColumnAssigment {
	return W.WSET(stringExp)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnString) TableName() string {
	return W.WTableName()
}

// _github_com_switchupcb_jet_v2_postgres_ColumnTime is an interface wrapper for ColumnTime type
type _github_com_switchupcb_jet_v2_postgres_ColumnTime struct {
	IValue                interface{}
	WADD                  func(rhs jet.Interval) jet.TimeExpression
	WAS                   func(alias string) jet.Projection
	WASC                  func() jet.OrderByClause
	WBETWEEN              func(min jet.TimeExpression, max jet.TimeExpression) jet.BoolExpression
	WDESC                 func() jet.OrderByClause
	WEQ                   func(rhs jet.TimeExpression) jet.BoolExpression
	WFrom                 func(subQuery jet.SelectTable) jet.ColumnTime
	WGT                   func(rhs jet.TimeExpression) jet.BoolExpression
	WGT_EQ                func(rhs jet.TimeExpression) jet.BoolExpression
	WIN                   func(expressions ...jet.Expression) jet.BoolExpression
	WIS_DISTINCT_FROM     func(rhs jet.TimeExpression) jet.BoolExpression
	WIS_NOT_DISTINCT_FROM func(rhs jet.TimeExpression) jet.BoolExpression
	WIS_NOT_NULL          func() jet.BoolExpression
	WIS_NULL              func() jet.BoolExpression
	WLT                   func(rhs jet.TimeExpression) jet.BoolExpression
	WLT_EQ                func(rhs jet.TimeExpression) jet.BoolExpression
	WNOT_BETWEEN          func(min jet.TimeExpression, max jet.TimeExpression) jet.BoolExpression
	WNOT_EQ               func(rhs jet.TimeExpression) jet.BoolExpression
	WNOT_IN               func(expressions ...jet.Expression) jet.BoolExpression
	WNULLS_FIRST          func() jet.OrderByClause
	WNULLS_LAST           func() jet.OrderByClause
	WName                 func() string
	WSET                  func(timeExp jet.TimeExpression) jet.ColumnAssigment
	WSUB                  func(rhs jet.Interval) jet.TimeExpression
	WTableName            func() string
}

func (W _github_com_switchupcb_jet_v2_postgres_ColumnTime) ADD(rhs jet.Interval) jet.TimeExpression {
	return W.WADD(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTime) AS(alias string) jet.Projection {
	return W.WAS(alias)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTime) ASC() jet.OrderByClause {
	return W.WASC()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTime) BETWEEN(min jet.TimeExpression, max jet.TimeExpression) jet.BoolExpression {
	return W.WBETWEEN(min, max)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTime) DESC() jet.OrderByClause {
	return W.WDESC()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTime) EQ(rhs jet.TimeExpression) jet.BoolExpression {
	return W.WEQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTime) From(subQuery jet.SelectTable) jet.ColumnTime {
	return W.WFrom(subQuery)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTime) GT(rhs jet.TimeExpression) jet.BoolExpression {
	return W.WGT(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTime) GT_EQ(rhs jet.TimeExpression) jet.BoolExpression {
	return W.WGT_EQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTime) IN(expressions ...jet.Expression) jet.BoolExpression {
	return W.WIN(expressions...)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTime) IS_DISTINCT_FROM(rhs jet.TimeExpression) jet.BoolExpression {
	return W.WIS_DISTINCT_FROM(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTime) IS_NOT_DISTINCT_FROM(rhs jet.TimeExpression) jet.BoolExpression {
	return W.WIS_NOT_DISTINCT_FROM(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTime) IS_NOT_NULL() jet.BoolExpression {
	return W.WIS_NOT_NULL()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTime) IS_NULL() jet.BoolExpression {
	return W.WIS_NULL()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTime) LT(rhs jet.TimeExpression) jet.BoolExpression {
	return W.WLT(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTime) LT_EQ(rhs jet.TimeExpression) jet.BoolExpression {
	return W.WLT_EQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTime) NOT_BETWEEN(min jet.TimeExpression, max jet.TimeExpression) jet.BoolExpression {
	return W.WNOT_BETWEEN(min, max)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTime) NOT_EQ(rhs jet.TimeExpression) jet.BoolExpression {
	return W.WNOT_EQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTime) NOT_IN(expressions ...jet.Expression) jet.BoolExpression {
	return W.WNOT_IN(expressions...)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTime) NULLS_FIRST() jet.OrderByClause {
	return W.WNULLS_FIRST()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTime) NULLS_LAST() jet.OrderByClause {
	return W.WNULLS_LAST()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTime) Name() string {
	return W.WName()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTime) SET(timeExp jet.TimeExpression) jet.ColumnAssigment {
	return W.WSET(timeExp)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTime) SUB(rhs jet.Interval) jet.TimeExpression {
	return W.WSUB(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTime) TableName() string {
	return W.WTableName()
}

// _github_com_switchupcb_jet_v2_postgres_ColumnTimestamp is an interface wrapper for ColumnTimestamp type
type _github_com_switchupcb_jet_v2_postgres_ColumnTimestamp struct {
	IValue                interface{}
	WADD                  func(rhs jet.Interval) jet.TimestampExpression
	WAS                   func(alias string) jet.Projection
	WASC                  func() jet.OrderByClause
	WBETWEEN              func(min jet.TimestampExpression, max jet.TimestampExpression) jet.BoolExpression
	WDESC                 func() jet.OrderByClause
	WEQ                   func(rhs jet.TimestampExpression) jet.BoolExpression
	WFrom                 func(subQuery jet.SelectTable) jet.ColumnTimestamp
	WGT                   func(rhs jet.TimestampExpression) jet.BoolExpression
	WGT_EQ                func(rhs jet.TimestampExpression) jet.BoolExpression
	WIN                   func(expressions ...jet.Expression) jet.BoolExpression
	WIS_DISTINCT_FROM     func(rhs jet.TimestampExpression) jet.BoolExpression
	WIS_NOT_DISTINCT_FROM func(rhs jet.TimestampExpression) jet.BoolExpression
	WIS_NOT_NULL          func() jet.BoolExpression
	WIS_NULL              func() jet.BoolExpression
	WLT                   func(rhs jet.TimestampExpression) jet.BoolExpression
	WLT_EQ                func(rhs jet.TimestampExpression) jet.BoolExpression
	WNOT_BETWEEN          func(min jet.TimestampExpression, max jet.TimestampExpression) jet.BoolExpression
	WNOT_EQ               func(rhs jet.TimestampExpression) jet.BoolExpression
	WNOT_IN               func(expressions ...jet.Expression) jet.BoolExpression
	WNULLS_FIRST          func() jet.OrderByClause
	WNULLS_LAST           func() jet.OrderByClause
	WName                 func() string
	WSET                  func(timestampExp jet.TimestampExpression) jet.ColumnAssigment
	WSUB                  func(rhs jet.Interval) jet.TimestampExpression
	WTableName            func() string
}

func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestamp) ADD(rhs jet.Interval) jet.TimestampExpression {
	return W.WADD(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestamp) AS(alias string) jet.Projection {
	return W.WAS(alias)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestamp) ASC() jet.OrderByClause {
	return W.WASC()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestamp) BETWEEN(min jet.TimestampExpression, max jet.TimestampExpression) jet.BoolExpression {
	return W.WBETWEEN(min, max)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestamp) DESC() jet.OrderByClause {
	return W.WDESC()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestamp) EQ(rhs jet.TimestampExpression) jet.BoolExpression {
	return W.WEQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestamp) From(subQuery jet.SelectTable) jet.ColumnTimestamp {
	return W.WFrom(subQuery)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestamp) GT(rhs jet.TimestampExpression) jet.BoolExpression {
	return W.WGT(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestamp) GT_EQ(rhs jet.TimestampExpression) jet.BoolExpression {
	return W.WGT_EQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestamp) IN(expressions ...jet.Expression) jet.BoolExpression {
	return W.WIN(expressions...)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestamp) IS_DISTINCT_FROM(rhs jet.TimestampExpression) jet.BoolExpression {
	return W.WIS_DISTINCT_FROM(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestamp) IS_NOT_DISTINCT_FROM(rhs jet.TimestampExpression) jet.BoolExpression {
	return W.WIS_NOT_DISTINCT_FROM(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestamp) IS_NOT_NULL() jet.BoolExpression {
	return W.WIS_NOT_NULL()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestamp) IS_NULL() jet.BoolExpression {
	return W.WIS_NULL()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestamp) LT(rhs jet.TimestampExpression) jet.BoolExpression {
	return W.WLT(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestamp) LT_EQ(rhs jet.TimestampExpression) jet.BoolExpression {
	return W.WLT_EQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestamp) NOT_BETWEEN(min jet.TimestampExpression, max jet.TimestampExpression) jet.BoolExpression {
	return W.WNOT_BETWEEN(min, max)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestamp) NOT_EQ(rhs jet.TimestampExpression) jet.BoolExpression {
	return W.WNOT_EQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestamp) NOT_IN(expressions ...jet.Expression) jet.BoolExpression {
	return W.WNOT_IN(expressions...)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestamp) NULLS_FIRST() jet.OrderByClause {
	return W.WNULLS_FIRST()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestamp) NULLS_LAST() jet.OrderByClause {
	return W.WNULLS_LAST()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestamp) Name() string {
	return W.WName()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestamp) SET(timestampExp jet.TimestampExpression) jet.ColumnAssigment {
	return W.WSET(timestampExp)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestamp) SUB(rhs jet.Interval) jet.TimestampExpression {
	return W.WSUB(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestamp) TableName() string {
	return W.WTableName()
}

// _github_com_switchupcb_jet_v2_postgres_ColumnTimestampRange is an interface wrapper for ColumnTimestampRange type
type _github_com_switchupcb_jet_v2_postgres_ColumnTimestampRange struct {
	IValue          interface{}
	WAS             func(alias string) jet.Projection
	WASC            func() jet.OrderByClause
	WCONTAINS       func(rhs postgres.TimestampExpression) jet.BoolExpression
	WCONTAINS_RANGE func(rhs jet.Range[postgres.TimestampExpression]) jet.BoolExpression
	WDESC           func() jet.OrderByClause
	WDIFFERENCE     func(rhs jet.Range[postgres.TimestampExpression]) jet.Range[postgres.TimestampExpression]
	WEQ             func(rhs jet.Range[postgres.TimestampExpression]) jet.BoolExpression
	WFrom           func(subQuery jet.SelectTable) jet.ColumnRange[postgres.TimestampExpression]
	WGT             func(rhs jet.Range[postgres.TimestampExpression]) jet.BoolExpression
	WGT_EQ          func(rhs jet.Range[postgres.TimestampExpression]) jet.BoolExpression
	WIN             func(expressions ...jet.Expression) jet.BoolExpression
	WINTERSECTION   func(rhs jet.Range[postgres.TimestampExpression]) jet.Range[postgres.TimestampExpression]
	WIS_EMPTY       func() jet.BoolExpression
	WIS_NOT_NULL    func() jet.BoolExpression
	WIS_NULL        func() jet.BoolExpression
	WLOWER_BOUND    func() postgres.TimestampExpression
	WLOWER_INC      func() jet.BoolExpression
	WLOWER_INF      func() jet.BoolExpression
	WLT             func(rhs jet.Range[postgres.TimestampExpression]) jet.BoolExpression
	WLT_EQ          func(rhs jet.Range[postgres.TimestampExpression]) jet.BoolExpression
	WNOT_EQ         func(rhs jet.Range[postgres.TimestampExpression]) jet.BoolExpression
	WNOT_IN         func(expressions ...jet.Expression) jet.BoolExpression
	WNULLS_FIRST    func() jet.OrderByClause
	WNULLS_LAST     func() jet.OrderByClause
	WName           func() string
	WOVERLAP        func(rhs jet.Range[postgres.TimestampExpression]) jet.BoolExpression
	WSET            func(rangeExp jet.Range[postgres.TimestampExpression]) jet.ColumnAssigment
	WTableName      func() string
	WUNION          func(rhs jet.Range[postgres.TimestampExpression]) jet.Range[postgres.TimestampExpression]
	WUPPER_BOUND    func() postgres.TimestampExpression
	WUPPER_INC      func() jet.BoolExpression
	WUPPER_INF      func() jet.BoolExpression
}

func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestampRange) AS(alias string) jet.Projection {
	return W.WAS(alias)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestampRange) ASC() jet.OrderByClause {
	return W.WASC()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestampRange) CONTAINS(rhs postgres.TimestampExpression) jet.BoolExpression {
	return W.WCONTAINS(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestampRange) CONTAINS_RANGE(rhs jet.Range[postgres.TimestampExpression]) jet.BoolExpression {
	return W.WCONTAINS_RANGE(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestampRange) DESC() jet.OrderByClause {
	return W.WDESC()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestampRange) DIFFERENCE(rhs jet.Range[postgres.TimestampExpression]) jet.Range[postgres.TimestampExpression] {
	return W.WDIFFERENCE(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestampRange) EQ(rhs jet.Range[postgres.TimestampExpression]) jet.BoolExpression {
	return W.WEQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestampRange) From(subQuery jet.SelectTable) jet.ColumnRange[postgres.TimestampExpression] {
	return W.WFrom(subQuery)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestampRange) GT(rhs jet.Range[postgres.TimestampExpression]) jet.BoolExpression {
	return W.WGT(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestampRange) GT_EQ(rhs jet.Range[postgres.TimestampExpression]) jet.BoolExpression {
	return W.WGT_EQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestampRange) IN(expressions ...jet.Expression) jet.BoolExpression {
	return W.WIN(expressions...)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestampRange) INTERSECTION(rhs jet.Range[postgres.TimestampExpression]) jet.Range[postgres.TimestampExpression] {
	return W.WINTERSECTION(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestampRange) IS_EMPTY() jet.BoolExpression {
	return W.WIS_EMPTY()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestampRange) IS_NOT_NULL() jet.BoolExpression {
	return W.WIS_NOT_NULL()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestampRange) IS_NULL() jet.BoolExpression {
	return W.WIS_NULL()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestampRange) LOWER_BOUND() postgres.TimestampExpression {
	return W.WLOWER_BOUND()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestampRange) LOWER_INC() jet.BoolExpression {
	return W.WLOWER_INC()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestampRange) LOWER_INF() jet.BoolExpression {
	return W.WLOWER_INF()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestampRange) LT(rhs jet.Range[postgres.TimestampExpression]) jet.BoolExpression {
	return W.WLT(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestampRange) LT_EQ(rhs jet.Range[postgres.TimestampExpression]) jet.BoolExpression {
	return W.WLT_EQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestampRange) NOT_EQ(rhs jet.Range[postgres.TimestampExpression]) jet.BoolExpression {
	return W.WNOT_EQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestampRange) NOT_IN(expressions ...jet.Expression) jet.BoolExpression {
	return W.WNOT_IN(expressions...)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestampRange) NULLS_FIRST() jet.OrderByClause {
	return W.WNULLS_FIRST()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestampRange) NULLS_LAST() jet.OrderByClause {
	return W.WNULLS_LAST()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestampRange) Name() string {
	return W.WName()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestampRange) OVERLAP(rhs jet.Range[postgres.TimestampExpression]) jet.BoolExpression {
	return W.WOVERLAP(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestampRange) SET(rangeExp jet.Range[postgres.TimestampExpression]) jet.ColumnAssigment {
	return W.WSET(rangeExp)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestampRange) TableName() string {
	return W.WTableName()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestampRange) UNION(rhs jet.Range[postgres.TimestampExpression]) jet.Range[postgres.TimestampExpression] {
	return W.WUNION(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestampRange) UPPER_BOUND() postgres.TimestampExpression {
	return W.WUPPER_BOUND()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestampRange) UPPER_INC() jet.BoolExpression {
	return W.WUPPER_INC()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestampRange) UPPER_INF() jet.BoolExpression {
	return W.WUPPER_INF()
}

// _github_com_switchupcb_jet_v2_postgres_ColumnTimestampz is an interface wrapper for ColumnTimestampz type
type _github_com_switchupcb_jet_v2_postgres_ColumnTimestampz struct {
	IValue                interface{}
	WADD                  func(rhs jet.Interval) jet.TimestampzExpression
	WAS                   func(alias string) jet.Projection
	WASC                  func() jet.OrderByClause
	WBETWEEN              func(min jet.TimestampzExpression, max jet.TimestampzExpression) jet.BoolExpression
	WDESC                 func() jet.OrderByClause
	WEQ                   func(rhs jet.TimestampzExpression) jet.BoolExpression
	WFrom                 func(subQuery jet.SelectTable) jet.ColumnTimestampz
	WGT                   func(rhs jet.TimestampzExpression) jet.BoolExpression
	WGT_EQ                func(rhs jet.TimestampzExpression) jet.BoolExpression
	WIN                   func(expressions ...jet.Expression) jet.BoolExpression
	WIS_DISTINCT_FROM     func(rhs jet.TimestampzExpression) jet.BoolExpression
	WIS_NOT_DISTINCT_FROM func(rhs jet.TimestampzExpression) jet.BoolExpression
	WIS_NOT_NULL          func() jet.BoolExpression
	WIS_NULL              func() jet.BoolExpression
	WLT                   func(rhs jet.TimestampzExpression) jet.BoolExpression
	WLT_EQ                func(rhs jet.TimestampzExpression) jet.BoolExpression
	WNOT_BETWEEN          func(min jet.TimestampzExpression, max jet.TimestampzExpression) jet.BoolExpression
	WNOT_EQ               func(rhs jet.TimestampzExpression) jet.BoolExpression
	WNOT_IN               func(expressions ...jet.Expression) jet.BoolExpression
	WNULLS_FIRST          func() jet.OrderByClause
	WNULLS_LAST           func() jet.OrderByClause
	WName                 func() string
	WSET                  func(timestampzExp jet.TimestampzExpression) jet.ColumnAssigment
	WSUB                  func(rhs jet.Interval) jet.TimestampzExpression
	WTableName            func() string
}

func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestampz) ADD(rhs jet.Interval) jet.TimestampzExpression {
	return W.WADD(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestampz) AS(alias string) jet.Projection {
	return W.WAS(alias)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestampz) ASC() jet.OrderByClause {
	return W.WASC()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestampz) BETWEEN(min jet.TimestampzExpression, max jet.TimestampzExpression) jet.BoolExpression {
	return W.WBETWEEN(min, max)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestampz) DESC() jet.OrderByClause {
	return W.WDESC()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestampz) EQ(rhs jet.TimestampzExpression) jet.BoolExpression {
	return W.WEQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestampz) From(subQuery jet.SelectTable) jet.ColumnTimestampz {
	return W.WFrom(subQuery)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestampz) GT(rhs jet.TimestampzExpression) jet.BoolExpression {
	return W.WGT(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestampz) GT_EQ(rhs jet.TimestampzExpression) jet.BoolExpression {
	return W.WGT_EQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestampz) IN(expressions ...jet.Expression) jet.BoolExpression {
	return W.WIN(expressions...)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestampz) IS_DISTINCT_FROM(rhs jet.TimestampzExpression) jet.BoolExpression {
	return W.WIS_DISTINCT_FROM(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestampz) IS_NOT_DISTINCT_FROM(rhs jet.TimestampzExpression) jet.BoolExpression {
	return W.WIS_NOT_DISTINCT_FROM(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestampz) IS_NOT_NULL() jet.BoolExpression {
	return W.WIS_NOT_NULL()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestampz) IS_NULL() jet.BoolExpression {
	return W.WIS_NULL()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestampz) LT(rhs jet.TimestampzExpression) jet.BoolExpression {
	return W.WLT(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestampz) LT_EQ(rhs jet.TimestampzExpression) jet.BoolExpression {
	return W.WLT_EQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestampz) NOT_BETWEEN(min jet.TimestampzExpression, max jet.TimestampzExpression) jet.BoolExpression {
	return W.WNOT_BETWEEN(min, max)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestampz) NOT_EQ(rhs jet.TimestampzExpression) jet.BoolExpression {
	return W.WNOT_EQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestampz) NOT_IN(expressions ...jet.Expression) jet.BoolExpression {
	return W.WNOT_IN(expressions...)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestampz) NULLS_FIRST() jet.OrderByClause {
	return W.WNULLS_FIRST()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestampz) NULLS_LAST() jet.OrderByClause {
	return W.WNULLS_LAST()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestampz) Name() string {
	return W.WName()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestampz) SET(timestampzExp jet.TimestampzExpression) jet.ColumnAssigment {
	return W.WSET(timestampzExp)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestampz) SUB(rhs jet.Interval) jet.TimestampzExpression {
	return W.WSUB(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestampz) TableName() string {
	return W.WTableName()
}

// _github_com_switchupcb_jet_v2_postgres_ColumnTimestampzRange is an interface wrapper for ColumnTimestampzRange type
type _github_com_switchupcb_jet_v2_postgres_ColumnTimestampzRange struct {
	IValue          interface{}
	WAS             func(alias string) jet.Projection
	WASC            func() jet.OrderByClause
	WCONTAINS       func(rhs postgres.TimestampzExpression) jet.BoolExpression
	WCONTAINS_RANGE func(rhs jet.Range[postgres.TimestampzExpression]) jet.BoolExpression
	WDESC           func() jet.OrderByClause
	WDIFFERENCE     func(rhs jet.Range[postgres.TimestampzExpression]) jet.Range[postgres.TimestampzExpression]
	WEQ             func(rhs jet.Range[postgres.TimestampzExpression]) jet.BoolExpression
	WFrom           func(subQuery jet.SelectTable) jet.ColumnRange[postgres.TimestampzExpression]
	WGT             func(rhs jet.Range[postgres.TimestampzExpression]) jet.BoolExpression
	WGT_EQ          func(rhs jet.Range[postgres.TimestampzExpression]) jet.BoolExpression
	WIN             func(expressions ...jet.Expression) jet.BoolExpression
	WINTERSECTION   func(rhs jet.Range[postgres.TimestampzExpression]) jet.Range[postgres.TimestampzExpression]
	WIS_EMPTY       func() jet.BoolExpression
	WIS_NOT_NULL    func() jet.BoolExpression
	WIS_NULL        func() jet.BoolExpression
	WLOWER_BOUND    func() postgres.TimestampzExpression
	WLOWER_INC      func() jet.BoolExpression
	WLOWER_INF      func() jet.BoolExpression
	WLT             func(rhs jet.Range[postgres.TimestampzExpression]) jet.BoolExpression
	WLT_EQ          func(rhs jet.Range[postgres.TimestampzExpression]) jet.BoolExpression
	WNOT_EQ         func(rhs jet.Range[postgres.TimestampzExpression]) jet.BoolExpression
	WNOT_IN         func(expressions ...jet.Expression) jet.BoolExpression
	WNULLS_FIRST    func() jet.OrderByClause
	WNULLS_LAST     func() jet.OrderByClause
	WName           func() string
	WOVERLAP        func(rhs jet.Range[postgres.TimestampzExpression]) jet.BoolExpression
	WSET            func(rangeExp jet.Range[postgres.TimestampzExpression]) jet.ColumnAssigment
	WTableName      func() string
	WUNION          func(rhs jet.Range[postgres.TimestampzExpression]) jet.Range[postgres.TimestampzExpression]
	WUPPER_BOUND    func() postgres.TimestampzExpression
	WUPPER_INC      func() jet.BoolExpression
	WUPPER_INF      func() jet.BoolExpression
}

func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestampzRange) AS(alias string) jet.Projection {
	return W.WAS(alias)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestampzRange) ASC() jet.OrderByClause {
	return W.WASC()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestampzRange) CONTAINS(rhs postgres.TimestampzExpression) jet.BoolExpression {
	return W.WCONTAINS(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestampzRange) CONTAINS_RANGE(rhs jet.Range[postgres.TimestampzExpression]) jet.BoolExpression {
	return W.WCONTAINS_RANGE(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestampzRange) DESC() jet.OrderByClause {
	return W.WDESC()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestampzRange) DIFFERENCE(rhs jet.Range[postgres.TimestampzExpression]) jet.Range[postgres.TimestampzExpression] {
	return W.WDIFFERENCE(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestampzRange) EQ(rhs jet.Range[postgres.TimestampzExpression]) jet.BoolExpression {
	return W.WEQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestampzRange) From(subQuery jet.SelectTable) jet.ColumnRange[postgres.TimestampzExpression] {
	return W.WFrom(subQuery)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestampzRange) GT(rhs jet.Range[postgres.TimestampzExpression]) jet.BoolExpression {
	return W.WGT(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestampzRange) GT_EQ(rhs jet.Range[postgres.TimestampzExpression]) jet.BoolExpression {
	return W.WGT_EQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestampzRange) IN(expressions ...jet.Expression) jet.BoolExpression {
	return W.WIN(expressions...)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestampzRange) INTERSECTION(rhs jet.Range[postgres.TimestampzExpression]) jet.Range[postgres.TimestampzExpression] {
	return W.WINTERSECTION(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestampzRange) IS_EMPTY() jet.BoolExpression {
	return W.WIS_EMPTY()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestampzRange) IS_NOT_NULL() jet.BoolExpression {
	return W.WIS_NOT_NULL()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestampzRange) IS_NULL() jet.BoolExpression {
	return W.WIS_NULL()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestampzRange) LOWER_BOUND() postgres.TimestampzExpression {
	return W.WLOWER_BOUND()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestampzRange) LOWER_INC() jet.BoolExpression {
	return W.WLOWER_INC()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestampzRange) LOWER_INF() jet.BoolExpression {
	return W.WLOWER_INF()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestampzRange) LT(rhs jet.Range[postgres.TimestampzExpression]) jet.BoolExpression {
	return W.WLT(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestampzRange) LT_EQ(rhs jet.Range[postgres.TimestampzExpression]) jet.BoolExpression {
	return W.WLT_EQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestampzRange) NOT_EQ(rhs jet.Range[postgres.TimestampzExpression]) jet.BoolExpression {
	return W.WNOT_EQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestampzRange) NOT_IN(expressions ...jet.Expression) jet.BoolExpression {
	return W.WNOT_IN(expressions...)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestampzRange) NULLS_FIRST() jet.OrderByClause {
	return W.WNULLS_FIRST()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestampzRange) NULLS_LAST() jet.OrderByClause {
	return W.WNULLS_LAST()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestampzRange) Name() string {
	return W.WName()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestampzRange) OVERLAP(rhs jet.Range[postgres.TimestampzExpression]) jet.BoolExpression {
	return W.WOVERLAP(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestampzRange) SET(rangeExp jet.Range[postgres.TimestampzExpression]) jet.ColumnAssigment {
	return W.WSET(rangeExp)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestampzRange) TableName() string {
	return W.WTableName()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestampzRange) UNION(rhs jet.Range[postgres.TimestampzExpression]) jet.Range[postgres.TimestampzExpression] {
	return W.WUNION(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestampzRange) UPPER_BOUND() postgres.TimestampzExpression {
	return W.WUPPER_BOUND()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestampzRange) UPPER_INC() jet.BoolExpression {
	return W.WUPPER_INC()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimestampzRange) UPPER_INF() jet.BoolExpression {
	return W.WUPPER_INF()
}

// _github_com_switchupcb_jet_v2_postgres_ColumnTimez is an interface wrapper for ColumnTimez type
type _github_com_switchupcb_jet_v2_postgres_ColumnTimez struct {
	IValue                interface{}
	WADD                  func(rhs jet.Interval) jet.TimezExpression
	WAS                   func(alias string) jet.Projection
	WASC                  func() jet.OrderByClause
	WBETWEEN              func(min jet.TimezExpression, max jet.TimezExpression) jet.BoolExpression
	WDESC                 func() jet.OrderByClause
	WEQ                   func(rhs jet.TimezExpression) jet.BoolExpression
	WFrom                 func(subQuery jet.SelectTable) jet.ColumnTimez
	WGT                   func(rhs jet.TimezExpression) jet.BoolExpression
	WGT_EQ                func(rhs jet.TimezExpression) jet.BoolExpression
	WIN                   func(expressions ...jet.Expression) jet.BoolExpression
	WIS_DISTINCT_FROM     func(rhs jet.TimezExpression) jet.BoolExpression
	WIS_NOT_DISTINCT_FROM func(rhs jet.TimezExpression) jet.BoolExpression
	WIS_NOT_NULL          func() jet.BoolExpression
	WIS_NULL              func() jet.BoolExpression
	WLT                   func(rhs jet.TimezExpression) jet.BoolExpression
	WLT_EQ                func(rhs jet.TimezExpression) jet.BoolExpression
	WNOT_BETWEEN          func(min jet.TimezExpression, max jet.TimezExpression) jet.BoolExpression
	WNOT_EQ               func(rhs jet.TimezExpression) jet.BoolExpression
	WNOT_IN               func(expressions ...jet.Expression) jet.BoolExpression
	WNULLS_FIRST          func() jet.OrderByClause
	WNULLS_LAST           func() jet.OrderByClause
	WName                 func() string
	WSET                  func(timeExp jet.TimezExpression) jet.ColumnAssigment
	WSUB                  func(rhs jet.Interval) jet.TimezExpression
	WTableName            func() string
}

func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimez) ADD(rhs jet.Interval) jet.TimezExpression {
	return W.WADD(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimez) AS(alias string) jet.Projection {
	return W.WAS(alias)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimez) ASC() jet.OrderByClause {
	return W.WASC()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimez) BETWEEN(min jet.TimezExpression, max jet.TimezExpression) jet.BoolExpression {
	return W.WBETWEEN(min, max)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimez) DESC() jet.OrderByClause {
	return W.WDESC()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimez) EQ(rhs jet.TimezExpression) jet.BoolExpression {
	return W.WEQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimez) From(subQuery jet.SelectTable) jet.ColumnTimez {
	return W.WFrom(subQuery)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimez) GT(rhs jet.TimezExpression) jet.BoolExpression {
	return W.WGT(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimez) GT_EQ(rhs jet.TimezExpression) jet.BoolExpression {
	return W.WGT_EQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimez) IN(expressions ...jet.Expression) jet.BoolExpression {
	return W.WIN(expressions...)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimez) IS_DISTINCT_FROM(rhs jet.TimezExpression) jet.BoolExpression {
	return W.WIS_DISTINCT_FROM(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimez) IS_NOT_DISTINCT_FROM(rhs jet.TimezExpression) jet.BoolExpression {
	return W.WIS_NOT_DISTINCT_FROM(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimez) IS_NOT_NULL() jet.BoolExpression {
	return W.WIS_NOT_NULL()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimez) IS_NULL() jet.BoolExpression {
	return W.WIS_NULL()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimez) LT(rhs jet.TimezExpression) jet.BoolExpression {
	return W.WLT(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimez) LT_EQ(rhs jet.TimezExpression) jet.BoolExpression {
	return W.WLT_EQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimez) NOT_BETWEEN(min jet.TimezExpression, max jet.TimezExpression) jet.BoolExpression {
	return W.WNOT_BETWEEN(min, max)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimez) NOT_EQ(rhs jet.TimezExpression) jet.BoolExpression {
	return W.WNOT_EQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimez) NOT_IN(expressions ...jet.Expression) jet.BoolExpression {
	return W.WNOT_IN(expressions...)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimez) NULLS_FIRST() jet.OrderByClause {
	return W.WNULLS_FIRST()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimez) NULLS_LAST() jet.OrderByClause {
	return W.WNULLS_LAST()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimez) Name() string {
	return W.WName()
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimez) SET(timeExp jet.TimezExpression) jet.ColumnAssigment {
	return W.WSET(timeExp)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimez) SUB(rhs jet.Interval) jet.TimezExpression {
	return W.WSUB(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_ColumnTimez) TableName() string {
	return W.WTableName()
}

// _github_com_switchupcb_jet_v2_postgres_CommonTableExpression is an interface wrapper for CommonTableExpression type
type _github_com_switchupcb_jet_v2_postgres_CommonTableExpression struct {
	IValue               interface{}
	WALIAS               func(alias string) postgres.SelectTable
	WAS                  func(statement jet.SerializerHasProjections) postgres.CommonTableExpression
	WAS_NOT_MATERIALIZED func(statement jet.SerializerStatement) postgres.CommonTableExpression
	WAlias               func() string
	WAllColumns          func() jet.ProjectionList
	WCROSS_JOIN          func(table postgres.ReadableTable) postgres.ReadableTable
	WFULL_JOIN           func(table postgres.ReadableTable, onCondition postgres.BoolExpression) postgres.ReadableTable
	WINNER_JOIN          func(table postgres.ReadableTable, onCondition postgres.BoolExpression) postgres.ReadableTable
	WLEFT_JOIN           func(table postgres.ReadableTable, onCondition postgres.BoolExpression) postgres.ReadableTable
	WRIGHT_JOIN          func(table postgres.ReadableTable, onCondition postgres.BoolExpression) postgres.ReadableTable
	WSELECT              func(projection postgres.Projection, projections ...postgres.Projection) postgres.SelectStatement
}

func (W _github_com_switchupcb_jet_v2_postgres_CommonTableExpression) ALIAS(alias string) postgres.SelectTable {
	return W.WALIAS(alias)
}
func (W _github_com_switchupcb_jet_v2_postgres_CommonTableExpression) AS(statement jet.SerializerHasProjections) postgres.CommonTableExpression {
	return W.WAS(statement)
}
func (W _github_com_switchupcb_jet_v2_postgres_CommonTableExpression) AS_NOT_MATERIALIZED(statement jet.SerializerStatement) postgres.CommonTableExpression {
	return W.WAS_NOT_MATERIALIZED(statement)
}
func (W _github_com_switchupcb_jet_v2_postgres_CommonTableExpression) Alias() string {
	return W.WAlias()
}
func (W _github_com_switchupcb_jet_v2_postgres_CommonTableExpression) AllColumns() jet.ProjectionList {
	return W.WAllColumns()
}
func (W _github_com_switchupcb_jet_v2_postgres_CommonTableExpression) CROSS_JOIN(table postgres.ReadableTable) postgres.ReadableTable {
	return W.WCROSS_JOIN(table)
}
func (W _github_com_switchupcb_jet_v2_postgres_CommonTableExpression) FULL_JOIN(table postgres.ReadableTable, onCondition postgres.BoolExpression) postgres.ReadableTable {
	return W.WFULL_JOIN(table, onCondition)
}
func (W _github_com_switchupcb_jet_v2_postgres_CommonTableExpression) INNER_JOIN(table postgres.ReadableTable, onCondition postgres.BoolExpression) postgres.ReadableTable {
	return W.WINNER_JOIN(table, onCondition)
}
func (W _github_com_switchupcb_jet_v2_postgres_CommonTableExpression) LEFT_JOIN(table postgres.ReadableTable, onCondition postgres.BoolExpression) postgres.ReadableTable {
	return W.WLEFT_JOIN(table, onCondition)
}
func (W _github_com_switchupcb_jet_v2_postgres_CommonTableExpression) RIGHT_JOIN(table postgres.ReadableTable, onCondition postgres.BoolExpression) postgres.ReadableTable {
	return W.WRIGHT_JOIN(table, onCondition)
}
func (W _github_com_switchupcb_jet_v2_postgres_CommonTableExpression) SELECT(projection postgres.Projection, projections ...postgres.Projection) postgres.SelectStatement {
	return W.WSELECT(projection, projections...)
}

// _github_com_switchupcb_jet_v2_postgres_ConflictAction is an interface wrapper for ConflictAction type
type _github_com_switchupcb_jet_v2_postgres_ConflictAction struct {
	IValue interface{}
	WWHERE func(condition postgres.BoolExpression) postgres.ConflictAction
}

func (W _github_com_switchupcb_jet_v2_postgres_ConflictAction) WHERE(condition postgres.BoolExpression) postgres.ConflictAction {
	return W.WWHERE(condition)
}

// _github_com_switchupcb_jet_v2_postgres_ConflictTarget is an interface wrapper for ConflictTarget type
type _github_com_switchupcb_jet_v2_postgres_ConflictTarget struct {
	IValue      interface{}
	WDO_NOTHING func() postgres.InsertStatement
	WDO_UPDATE  func(action postgres.ConflictAction) postgres.InsertStatement
}

func (W _github_com_switchupcb_jet_v2_postgres_ConflictTarget) DO_NOTHING() postgres.InsertStatement {
	return W.WDO_NOTHING()
}
func (W _github_com_switchupcb_jet_v2_postgres_ConflictTarget) DO_UPDATE(action postgres.ConflictAction) postgres.InsertStatement {
	return W.WDO_UPDATE(action)
}

// _github_com_switchupcb_jet_v2_postgres_DateExpression is an interface wrapper for DateExpression type
type _github_com_switchupcb_jet_v2_postgres_DateExpression struct {
	IValue                interface{}
	WADD                  func(rhs jet.Interval) jet.TimestampExpression
	WAS                   func(alias string) jet.Projection
	WASC                  func() jet.OrderByClause
	WBETWEEN              func(min jet.DateExpression, max jet.DateExpression) jet.BoolExpression
	WDESC                 func() jet.OrderByClause
	WEQ                   func(rhs jet.DateExpression) jet.BoolExpression
	WGT                   func(rhs jet.DateExpression) jet.BoolExpression
	WGT_EQ                func(rhs jet.DateExpression) jet.BoolExpression
	WIN                   func(expressions ...jet.Expression) jet.BoolExpression
	WIS_DISTINCT_FROM     func(rhs jet.DateExpression) jet.BoolExpression
	WIS_NOT_DISTINCT_FROM func(rhs jet.DateExpression) jet.BoolExpression
	WIS_NOT_NULL          func() jet.BoolExpression
	WIS_NULL              func() jet.BoolExpression
	WLT                   func(rhs jet.DateExpression) jet.BoolExpression
	WLT_EQ                func(rhs jet.DateExpression) jet.BoolExpression
	WNOT_BETWEEN          func(min jet.DateExpression, max jet.DateExpression) jet.BoolExpression
	WNOT_EQ               func(rhs jet.DateExpression) jet.BoolExpression
	WNOT_IN               func(expressions ...jet.Expression) jet.BoolExpression
	WNULLS_FIRST          func() jet.OrderByClause
	WNULLS_LAST           func() jet.OrderByClause
	WSUB                  func(rhs jet.Interval) jet.TimestampExpression
}

func (W _github_com_switchupcb_jet_v2_postgres_DateExpression) ADD(rhs jet.Interval) jet.TimestampExpression {
	return W.WADD(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_DateExpression) AS(alias string) jet.Projection {
	return W.WAS(alias)
}
func (W _github_com_switchupcb_jet_v2_postgres_DateExpression) ASC() jet.OrderByClause {
	return W.WASC()
}
func (W _github_com_switchupcb_jet_v2_postgres_DateExpression) BETWEEN(min jet.DateExpression, max jet.DateExpression) jet.BoolExpression {
	return W.WBETWEEN(min, max)
}
func (W _github_com_switchupcb_jet_v2_postgres_DateExpression) DESC() jet.OrderByClause {
	return W.WDESC()
}
func (W _github_com_switchupcb_jet_v2_postgres_DateExpression) EQ(rhs jet.DateExpression) jet.BoolExpression {
	return W.WEQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_DateExpression) GT(rhs jet.DateExpression) jet.BoolExpression {
	return W.WGT(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_DateExpression) GT_EQ(rhs jet.DateExpression) jet.BoolExpression {
	return W.WGT_EQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_DateExpression) IN(expressions ...jet.Expression) jet.BoolExpression {
	return W.WIN(expressions...)
}
func (W _github_com_switchupcb_jet_v2_postgres_DateExpression) IS_DISTINCT_FROM(rhs jet.DateExpression) jet.BoolExpression {
	return W.WIS_DISTINCT_FROM(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_DateExpression) IS_NOT_DISTINCT_FROM(rhs jet.DateExpression) jet.BoolExpression {
	return W.WIS_NOT_DISTINCT_FROM(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_DateExpression) IS_NOT_NULL() jet.BoolExpression {
	return W.WIS_NOT_NULL()
}
func (W _github_com_switchupcb_jet_v2_postgres_DateExpression) IS_NULL() jet.BoolExpression {
	return W.WIS_NULL()
}
func (W _github_com_switchupcb_jet_v2_postgres_DateExpression) LT(rhs jet.DateExpression) jet.BoolExpression {
	return W.WLT(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_DateExpression) LT_EQ(rhs jet.DateExpression) jet.BoolExpression {
	return W.WLT_EQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_DateExpression) NOT_BETWEEN(min jet.DateExpression, max jet.DateExpression) jet.BoolExpression {
	return W.WNOT_BETWEEN(min, max)
}
func (W _github_com_switchupcb_jet_v2_postgres_DateExpression) NOT_EQ(rhs jet.DateExpression) jet.BoolExpression {
	return W.WNOT_EQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_DateExpression) NOT_IN(expressions ...jet.Expression) jet.BoolExpression {
	return W.WNOT_IN(expressions...)
}
func (W _github_com_switchupcb_jet_v2_postgres_DateExpression) NULLS_FIRST() jet.OrderByClause {
	return W.WNULLS_FIRST()
}
func (W _github_com_switchupcb_jet_v2_postgres_DateExpression) NULLS_LAST() jet.OrderByClause {
	return W.WNULLS_LAST()
}
func (W _github_com_switchupcb_jet_v2_postgres_DateExpression) SUB(rhs jet.Interval) jet.TimestampExpression {
	return W.WSUB(rhs)
}

// _github_com_switchupcb_jet_v2_postgres_DateRange is an interface wrapper for DateRange type
type _github_com_switchupcb_jet_v2_postgres_DateRange struct {
	IValue          interface{}
	WAS             func(alias string) jet.Projection
	WASC            func() jet.OrderByClause
	WCONTAINS       func(rhs postgres.DateExpression) jet.BoolExpression
	WCONTAINS_RANGE func(rhs jet.Range[postgres.DateExpression]) jet.BoolExpression
	WDESC           func() jet.OrderByClause
	WDIFFERENCE     func(rhs jet.Range[postgres.DateExpression]) jet.Range[postgres.DateExpression]
	WEQ             func(rhs jet.Range[postgres.DateExpression]) jet.BoolExpression
	WGT             func(rhs jet.Range[postgres.DateExpression]) jet.BoolExpression
	WGT_EQ          func(rhs jet.Range[postgres.DateExpression]) jet.BoolExpression
	WIN             func(expressions ...jet.Expression) jet.BoolExpression
	WINTERSECTION   func(rhs jet.Range[postgres.DateExpression]) jet.Range[postgres.DateExpression]
	WIS_EMPTY       func() jet.BoolExpression
	WIS_NOT_NULL    func() jet.BoolExpression
	WIS_NULL        func() jet.BoolExpression
	WLOWER_BOUND    func() postgres.DateExpression
	WLOWER_INC      func() jet.BoolExpression
	WLOWER_INF      func() jet.BoolExpression
	WLT             func(rhs jet.Range[postgres.DateExpression]) jet.BoolExpression
	WLT_EQ          func(rhs jet.Range[postgres.DateExpression]) jet.BoolExpression
	WNOT_EQ         func(rhs jet.Range[postgres.DateExpression]) jet.BoolExpression
	WNOT_IN         func(expressions ...jet.Expression) jet.BoolExpression
	WNULLS_FIRST    func() jet.OrderByClause
	WNULLS_LAST     func() jet.OrderByClause
	WOVERLAP        func(rhs jet.Range[postgres.DateExpression]) jet.BoolExpression
	WUNION          func(rhs jet.Range[postgres.DateExpression]) jet.Range[postgres.DateExpression]
	WUPPER_BOUND    func() postgres.DateExpression
	WUPPER_INC      func() jet.BoolExpression
	WUPPER_INF      func() jet.BoolExpression
}

func (W _github_com_switchupcb_jet_v2_postgres_DateRange) AS(alias string) jet.Projection {
	return W.WAS(alias)
}
func (W _github_com_switchupcb_jet_v2_postgres_DateRange) ASC() jet.OrderByClause {
	return W.WASC()
}
func (W _github_com_switchupcb_jet_v2_postgres_DateRange) CONTAINS(rhs postgres.DateExpression) jet.BoolExpression {
	return W.WCONTAINS(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_DateRange) CONTAINS_RANGE(rhs jet.Range[postgres.DateExpression]) jet.BoolExpression {
	return W.WCONTAINS_RANGE(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_DateRange) DESC() jet.OrderByClause {
	return W.WDESC()
}
func (W _github_com_switchupcb_jet_v2_postgres_DateRange) DIFFERENCE(rhs jet.Range[postgres.DateExpression]) jet.Range[postgres.DateExpression] {
	return W.WDIFFERENCE(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_DateRange) EQ(rhs jet.Range[postgres.DateExpression]) jet.BoolExpression {
	return W.WEQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_DateRange) GT(rhs jet.Range[postgres.DateExpression]) jet.BoolExpression {
	return W.WGT(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_DateRange) GT_EQ(rhs jet.Range[postgres.DateExpression]) jet.BoolExpression {
	return W.WGT_EQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_DateRange) IN(expressions ...jet.Expression) jet.BoolExpression {
	return W.WIN(expressions...)
}
func (W _github_com_switchupcb_jet_v2_postgres_DateRange) INTERSECTION(rhs jet.Range[postgres.DateExpression]) jet.Range[postgres.DateExpression] {
	return W.WINTERSECTION(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_DateRange) IS_EMPTY() jet.BoolExpression {
	return W.WIS_EMPTY()
}
func (W _github_com_switchupcb_jet_v2_postgres_DateRange) IS_NOT_NULL() jet.BoolExpression {
	return W.WIS_NOT_NULL()
}
func (W _github_com_switchupcb_jet_v2_postgres_DateRange) IS_NULL() jet.BoolExpression {
	return W.WIS_NULL()
}
func (W _github_com_switchupcb_jet_v2_postgres_DateRange) LOWER_BOUND() postgres.DateExpression {
	return W.WLOWER_BOUND()
}
func (W _github_com_switchupcb_jet_v2_postgres_DateRange) LOWER_INC() jet.BoolExpression {
	return W.WLOWER_INC()
}
func (W _github_com_switchupcb_jet_v2_postgres_DateRange) LOWER_INF() jet.BoolExpression {
	return W.WLOWER_INF()
}
func (W _github_com_switchupcb_jet_v2_postgres_DateRange) LT(rhs jet.Range[postgres.DateExpression]) jet.BoolExpression {
	return W.WLT(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_DateRange) LT_EQ(rhs jet.Range[postgres.DateExpression]) jet.BoolExpression {
	return W.WLT_EQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_DateRange) NOT_EQ(rhs jet.Range[postgres.DateExpression]) jet.BoolExpression {
	return W.WNOT_EQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_DateRange) NOT_IN(expressions ...jet.Expression) jet.BoolExpression {
	return W.WNOT_IN(expressions...)
}
func (W _github_com_switchupcb_jet_v2_postgres_DateRange) NULLS_FIRST() jet.OrderByClause {
	return W.WNULLS_FIRST()
}
func (W _github_com_switchupcb_jet_v2_postgres_DateRange) NULLS_LAST() jet.OrderByClause {
	return W.WNULLS_LAST()
}
func (W _github_com_switchupcb_jet_v2_postgres_DateRange) OVERLAP(rhs jet.Range[postgres.DateExpression]) jet.BoolExpression {
	return W.WOVERLAP(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_DateRange) UNION(rhs jet.Range[postgres.DateExpression]) jet.Range[postgres.DateExpression] {
	return W.WUNION(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_DateRange) UPPER_BOUND() postgres.DateExpression {
	return W.WUPPER_BOUND()
}
func (W _github_com_switchupcb_jet_v2_postgres_DateRange) UPPER_INC() jet.BoolExpression {
	return W.WUPPER_INC()
}
func (W _github_com_switchupcb_jet_v2_postgres_DateRange) UPPER_INF() jet.BoolExpression {
	return W.WUPPER_INF()
}

// _github_com_switchupcb_jet_v2_postgres_DeleteStatement is an interface wrapper for DeleteStatement type
type _github_com_switchupcb_jet_v2_postgres_DeleteStatement struct {
	IValue        interface{}
	WDebugSql     func() (query string)
	WExec         func(db qrm.Executable) (sql.Result, error)
	WExecContext  func(ctx context.Context, db qrm.Executable) (sql.Result, error)
	WQuery        func(db qrm.Queryable, destination interface{}) error
	WQueryContext func(ctx context.Context, db qrm.Queryable, destination interface{}) error
	WRETURNING    func(projections ...jet.Projection) postgres.DeleteStatement
	WRows         func(ctx context.Context, db qrm.Queryable) (*jet.Rows, error)
	WSql          func() (query string, args []interface{})
	WUSING        func(tables ...postgres.ReadableTable) postgres.DeleteStatement
	WWHERE        func(expression postgres.BoolExpression) postgres.DeleteStatement
}

func (W _github_com_switchupcb_jet_v2_postgres_DeleteStatement) DebugSql() (query string) {
	return W.WDebugSql()
}
func (W _github_com_switchupcb_jet_v2_postgres_DeleteStatement) Exec(db qrm.Executable) (sql.Result, error) {
	return W.WExec(db)
}
func (W _github_com_switchupcb_jet_v2_postgres_DeleteStatement) ExecContext(ctx context.Context, db qrm.Executable) (sql.Result, error) {
	return W.WExecContext(ctx, db)
}
func (W _github_com_switchupcb_jet_v2_postgres_DeleteStatement) Query(db qrm.Queryable, destination interface{}) error {
	return W.WQuery(db, destination)
}
func (W _github_com_switchupcb_jet_v2_postgres_DeleteStatement) QueryContext(ctx context.Context, db qrm.Queryable, destination interface{}) error {
	return W.WQueryContext(ctx, db, destination)
}
func (W _github_com_switchupcb_jet_v2_postgres_DeleteStatement) RETURNING(projections ...jet.Projection) postgres.DeleteStatement {
	return W.WRETURNING(projections...)
}
func (W _github_com_switchupcb_jet_v2_postgres_DeleteStatement) Rows(ctx context.Context, db qrm.Queryable) (*jet.Rows, error) {
	return W.WRows(ctx, db)
}
func (W _github_com_switchupcb_jet_v2_postgres_DeleteStatement) Sql() (query string, args []interface{}) {
	return W.WSql()
}
func (W _github_com_switchupcb_jet_v2_postgres_DeleteStatement) USING(tables ...postgres.ReadableTable) postgres.DeleteStatement {
	return W.WUSING(tables...)
}
func (W _github_com_switchupcb_jet_v2_postgres_DeleteStatement) WHERE(expression postgres.BoolExpression) postgres.DeleteStatement {
	return W.WWHERE(expression)
}

// _github_com_switchupcb_jet_v2_postgres_Expression is an interface wrapper for Expression type
type _github_com_switchupcb_jet_v2_postgres_Expression struct {
	IValue       interface{}
	WAS          func(alias string) jet.Projection
	WASC         func() jet.OrderByClause
	WDESC        func() jet.OrderByClause
	WIN          func(expressions ...jet.Expression) jet.BoolExpression
	WIS_NOT_NULL func() jet.BoolExpression
	WIS_NULL     func() jet.BoolExpression
	WNOT_IN      func(expressions ...jet.Expression) jet.BoolExpression
	WNULLS_FIRST func() jet.OrderByClause
	WNULLS_LAST  func() jet.OrderByClause
}

func (W _github_com_switchupcb_jet_v2_postgres_Expression) AS(alias string) jet.Projection {
	return W.WAS(alias)
}
func (W _github_com_switchupcb_jet_v2_postgres_Expression) ASC() jet.OrderByClause {
	return W.WASC()
}
func (W _github_com_switchupcb_jet_v2_postgres_Expression) DESC() jet.OrderByClause {
	return W.WDESC()
}
func (W _github_com_switchupcb_jet_v2_postgres_Expression) IN(expressions ...jet.Expression) jet.BoolExpression {
	return W.WIN(expressions...)
}
func (W _github_com_switchupcb_jet_v2_postgres_Expression) IS_NOT_NULL() jet.BoolExpression {
	return W.WIS_NOT_NULL()
}
func (W _github_com_switchupcb_jet_v2_postgres_Expression) IS_NULL() jet.BoolExpression {
	return W.WIS_NULL()
}
func (W _github_com_switchupcb_jet_v2_postgres_Expression) NOT_IN(expressions ...jet.Expression) jet.BoolExpression {
	return W.WNOT_IN(expressions...)
}
func (W _github_com_switchupcb_jet_v2_postgres_Expression) NULLS_FIRST() jet.OrderByClause {
	return W.WNULLS_FIRST()
}
func (W _github_com_switchupcb_jet_v2_postgres_Expression) NULLS_LAST() jet.OrderByClause {
	return W.WNULLS_LAST()
}

// _github_com_switchupcb_jet_v2_postgres_FloatExpression is an interface wrapper for FloatExpression type
type _github_com_switchupcb_jet_v2_postgres_FloatExpression struct {
	IValue                interface{}
	WADD                  func(rhs jet.NumericExpression) jet.FloatExpression
	WAS                   func(alias string) jet.Projection
	WASC                  func() jet.OrderByClause
	WBETWEEN              func(min jet.FloatExpression, max jet.FloatExpression) jet.BoolExpression
	WDESC                 func() jet.OrderByClause
	WDIV                  func(rhs jet.NumericExpression) jet.FloatExpression
	WEQ                   func(rhs jet.FloatExpression) jet.BoolExpression
	WGT                   func(rhs jet.FloatExpression) jet.BoolExpression
	WGT_EQ                func(rhs jet.FloatExpression) jet.BoolExpression
	WIN                   func(expressions ...jet.Expression) jet.BoolExpression
	WIS_DISTINCT_FROM     func(rhs jet.FloatExpression) jet.BoolExpression
	WIS_NOT_DISTINCT_FROM func(rhs jet.FloatExpression) jet.BoolExpression
	WIS_NOT_NULL          func() jet.BoolExpression
	WIS_NULL              func() jet.BoolExpression
	WLT                   func(rhs jet.FloatExpression) jet.BoolExpression
	WLT_EQ                func(rhs jet.FloatExpression) jet.BoolExpression
	WMOD                  func(rhs jet.NumericExpression) jet.FloatExpression
	WMUL                  func(rhs jet.NumericExpression) jet.FloatExpression
	WNOT_BETWEEN          func(min jet.FloatExpression, max jet.FloatExpression) jet.BoolExpression
	WNOT_EQ               func(rhs jet.FloatExpression) jet.BoolExpression
	WNOT_IN               func(expressions ...jet.Expression) jet.BoolExpression
	WNULLS_FIRST          func() jet.OrderByClause
	WNULLS_LAST           func() jet.OrderByClause
	WPOW                  func(rhs jet.NumericExpression) jet.FloatExpression
	WSUB                  func(rhs jet.NumericExpression) jet.FloatExpression
}

func (W _github_com_switchupcb_jet_v2_postgres_FloatExpression) ADD(rhs jet.NumericExpression) jet.FloatExpression {
	return W.WADD(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_FloatExpression) AS(alias string) jet.Projection {
	return W.WAS(alias)
}
func (W _github_com_switchupcb_jet_v2_postgres_FloatExpression) ASC() jet.OrderByClause {
	return W.WASC()
}
func (W _github_com_switchupcb_jet_v2_postgres_FloatExpression) BETWEEN(min jet.FloatExpression, max jet.FloatExpression) jet.BoolExpression {
	return W.WBETWEEN(min, max)
}
func (W _github_com_switchupcb_jet_v2_postgres_FloatExpression) DESC() jet.OrderByClause {
	return W.WDESC()
}
func (W _github_com_switchupcb_jet_v2_postgres_FloatExpression) DIV(rhs jet.NumericExpression) jet.FloatExpression {
	return W.WDIV(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_FloatExpression) EQ(rhs jet.FloatExpression) jet.BoolExpression {
	return W.WEQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_FloatExpression) GT(rhs jet.FloatExpression) jet.BoolExpression {
	return W.WGT(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_FloatExpression) GT_EQ(rhs jet.FloatExpression) jet.BoolExpression {
	return W.WGT_EQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_FloatExpression) IN(expressions ...jet.Expression) jet.BoolExpression {
	return W.WIN(expressions...)
}
func (W _github_com_switchupcb_jet_v2_postgres_FloatExpression) IS_DISTINCT_FROM(rhs jet.FloatExpression) jet.BoolExpression {
	return W.WIS_DISTINCT_FROM(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_FloatExpression) IS_NOT_DISTINCT_FROM(rhs jet.FloatExpression) jet.BoolExpression {
	return W.WIS_NOT_DISTINCT_FROM(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_FloatExpression) IS_NOT_NULL() jet.BoolExpression {
	return W.WIS_NOT_NULL()
}
func (W _github_com_switchupcb_jet_v2_postgres_FloatExpression) IS_NULL() jet.BoolExpression {
	return W.WIS_NULL()
}
func (W _github_com_switchupcb_jet_v2_postgres_FloatExpression) LT(rhs jet.FloatExpression) jet.BoolExpression {
	return W.WLT(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_FloatExpression) LT_EQ(rhs jet.FloatExpression) jet.BoolExpression {
	return W.WLT_EQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_FloatExpression) MOD(rhs jet.NumericExpression) jet.FloatExpression {
	return W.WMOD(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_FloatExpression) MUL(rhs jet.NumericExpression) jet.FloatExpression {
	return W.WMUL(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_FloatExpression) NOT_BETWEEN(min jet.FloatExpression, max jet.FloatExpression) jet.BoolExpression {
	return W.WNOT_BETWEEN(min, max)
}
func (W _github_com_switchupcb_jet_v2_postgres_FloatExpression) NOT_EQ(rhs jet.FloatExpression) jet.BoolExpression {
	return W.WNOT_EQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_FloatExpression) NOT_IN(expressions ...jet.Expression) jet.BoolExpression {
	return W.WNOT_IN(expressions...)
}
func (W _github_com_switchupcb_jet_v2_postgres_FloatExpression) NULLS_FIRST() jet.OrderByClause {
	return W.WNULLS_FIRST()
}
func (W _github_com_switchupcb_jet_v2_postgres_FloatExpression) NULLS_LAST() jet.OrderByClause {
	return W.WNULLS_LAST()
}
func (W _github_com_switchupcb_jet_v2_postgres_FloatExpression) POW(rhs jet.NumericExpression) jet.FloatExpression {
	return W.WPOW(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_FloatExpression) SUB(rhs jet.NumericExpression) jet.FloatExpression {
	return W.WSUB(rhs)
}

// _github_com_switchupcb_jet_v2_postgres_GroupByClause is an interface wrapper for GroupByClause type
type _github_com_switchupcb_jet_v2_postgres_GroupByClause struct {
	IValue interface{}
}

// _github_com_switchupcb_jet_v2_postgres_InsertStatement is an interface wrapper for InsertStatement type
type _github_com_switchupcb_jet_v2_postgres_InsertStatement struct {
	IValue        interface{}
	WDebugSql     func() (query string)
	WExec         func(db qrm.Executable) (sql.Result, error)
	WExecContext  func(ctx context.Context, db qrm.Executable) (sql.Result, error)
	WMODEL        func(data interface{}) postgres.InsertStatement
	WMODELS       func(data interface{}) postgres.InsertStatement
	WON_CONFLICT  func(indexExpressions ...jet.ColumnExpression) postgres.OnConflict
	WQUERY        func(selectStatement postgres.SelectStatement) postgres.InsertStatement
	WQuery        func(db qrm.Queryable, destination interface{}) error
	WQueryContext func(ctx context.Context, db qrm.Queryable, destination interface{}) error
	WRETURNING    func(projections ...postgres.Projection) postgres.InsertStatement
	WRows         func(ctx context.Context, db qrm.Queryable) (*jet.Rows, error)
	WSql          func() (query string, args []interface{})
	WVALUES       func(value interface{}, values ...interface{}) postgres.InsertStatement
}

func (W _github_com_switchupcb_jet_v2_postgres_InsertStatement) DebugSql() (query string) {
	return W.WDebugSql()
}
func (W _github_com_switchupcb_jet_v2_postgres_InsertStatement) Exec(db qrm.Executable) (sql.Result, error) {
	return W.WExec(db)
}
func (W _github_com_switchupcb_jet_v2_postgres_InsertStatement) ExecContext(ctx context.Context, db qrm.Executable) (sql.Result, error) {
	return W.WExecContext(ctx, db)
}
func (W _github_com_switchupcb_jet_v2_postgres_InsertStatement) MODEL(data interface{}) postgres.InsertStatement {
	return W.WMODEL(data)
}
func (W _github_com_switchupcb_jet_v2_postgres_InsertStatement) MODELS(data interface{}) postgres.InsertStatement {
	return W.WMODELS(data)
}
func (W _github_com_switchupcb_jet_v2_postgres_InsertStatement) ON_CONFLICT(indexExpressions ...jet.ColumnExpression) postgres.OnConflict {
	return W.WON_CONFLICT(indexExpressions...)
}
func (W _github_com_switchupcb_jet_v2_postgres_InsertStatement) QUERY(selectStatement postgres.SelectStatement) postgres.InsertStatement {
	return W.WQUERY(selectStatement)
}
func (W _github_com_switchupcb_jet_v2_postgres_InsertStatement) Query(db qrm.Queryable, destination interface{}) error {
	return W.WQuery(db, destination)
}
func (W _github_com_switchupcb_jet_v2_postgres_InsertStatement) QueryContext(ctx context.Context, db qrm.Queryable, destination interface{}) error {
	return W.WQueryContext(ctx, db, destination)
}
func (W _github_com_switchupcb_jet_v2_postgres_InsertStatement) RETURNING(projections ...postgres.Projection) postgres.InsertStatement {
	return W.WRETURNING(projections...)
}
func (W _github_com_switchupcb_jet_v2_postgres_InsertStatement) Rows(ctx context.Context, db qrm.Queryable) (*jet.Rows, error) {
	return W.WRows(ctx, db)
}
func (W _github_com_switchupcb_jet_v2_postgres_InsertStatement) Sql() (query string, args []interface{}) {
	return W.WSql()
}
func (W _github_com_switchupcb_jet_v2_postgres_InsertStatement) VALUES(value interface{}, values ...interface{}) postgres.InsertStatement {
	return W.WVALUES(value, values...)
}

// _github_com_switchupcb_jet_v2_postgres_Int4Range is an interface wrapper for Int4Range type
type _github_com_switchupcb_jet_v2_postgres_Int4Range struct {
	IValue          interface{}
	WAS             func(alias string) jet.Projection
	WASC            func() jet.OrderByClause
	WCONTAINS       func(rhs postgres.IntegerExpression) jet.BoolExpression
	WCONTAINS_RANGE func(rhs jet.Range[postgres.IntegerExpression]) jet.BoolExpression
	WDESC           func() jet.OrderByClause
	WDIFFERENCE     func(rhs jet.Range[postgres.IntegerExpression]) jet.Range[postgres.IntegerExpression]
	WEQ             func(rhs jet.Range[postgres.IntegerExpression]) jet.BoolExpression
	WGT             func(rhs jet.Range[postgres.IntegerExpression]) jet.BoolExpression
	WGT_EQ          func(rhs jet.Range[postgres.IntegerExpression]) jet.BoolExpression
	WIN             func(expressions ...jet.Expression) jet.BoolExpression
	WINTERSECTION   func(rhs jet.Range[postgres.IntegerExpression]) jet.Range[postgres.IntegerExpression]
	WIS_EMPTY       func() jet.BoolExpression
	WIS_NOT_NULL    func() jet.BoolExpression
	WIS_NULL        func() jet.BoolExpression
	WLOWER_BOUND    func() postgres.IntegerExpression
	WLOWER_INC      func() jet.BoolExpression
	WLOWER_INF      func() jet.BoolExpression
	WLT             func(rhs jet.Range[postgres.IntegerExpression]) jet.BoolExpression
	WLT_EQ          func(rhs jet.Range[postgres.IntegerExpression]) jet.BoolExpression
	WNOT_EQ         func(rhs jet.Range[postgres.IntegerExpression]) jet.BoolExpression
	WNOT_IN         func(expressions ...jet.Expression) jet.BoolExpression
	WNULLS_FIRST    func() jet.OrderByClause
	WNULLS_LAST     func() jet.OrderByClause
	WOVERLAP        func(rhs jet.Range[postgres.IntegerExpression]) jet.BoolExpression
	WUNION          func(rhs jet.Range[postgres.IntegerExpression]) jet.Range[postgres.IntegerExpression]
	WUPPER_BOUND    func() postgres.IntegerExpression
	WUPPER_INC      func() jet.BoolExpression
	WUPPER_INF      func() jet.BoolExpression
}

func (W _github_com_switchupcb_jet_v2_postgres_Int4Range) AS(alias string) jet.Projection {
	return W.WAS(alias)
}
func (W _github_com_switchupcb_jet_v2_postgres_Int4Range) ASC() jet.OrderByClause {
	return W.WASC()
}
func (W _github_com_switchupcb_jet_v2_postgres_Int4Range) CONTAINS(rhs postgres.IntegerExpression) jet.BoolExpression {
	return W.WCONTAINS(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_Int4Range) CONTAINS_RANGE(rhs jet.Range[postgres.IntegerExpression]) jet.BoolExpression {
	return W.WCONTAINS_RANGE(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_Int4Range) DESC() jet.OrderByClause {
	return W.WDESC()
}
func (W _github_com_switchupcb_jet_v2_postgres_Int4Range) DIFFERENCE(rhs jet.Range[postgres.IntegerExpression]) jet.Range[postgres.IntegerExpression] {
	return W.WDIFFERENCE(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_Int4Range) EQ(rhs jet.Range[postgres.IntegerExpression]) jet.BoolExpression {
	return W.WEQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_Int4Range) GT(rhs jet.Range[postgres.IntegerExpression]) jet.BoolExpression {
	return W.WGT(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_Int4Range) GT_EQ(rhs jet.Range[postgres.IntegerExpression]) jet.BoolExpression {
	return W.WGT_EQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_Int4Range) IN(expressions ...jet.Expression) jet.BoolExpression {
	return W.WIN(expressions...)
}
func (W _github_com_switchupcb_jet_v2_postgres_Int4Range) INTERSECTION(rhs jet.Range[postgres.IntegerExpression]) jet.Range[postgres.IntegerExpression] {
	return W.WINTERSECTION(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_Int4Range) IS_EMPTY() jet.BoolExpression {
	return W.WIS_EMPTY()
}
func (W _github_com_switchupcb_jet_v2_postgres_Int4Range) IS_NOT_NULL() jet.BoolExpression {
	return W.WIS_NOT_NULL()
}
func (W _github_com_switchupcb_jet_v2_postgres_Int4Range) IS_NULL() jet.BoolExpression {
	return W.WIS_NULL()
}
func (W _github_com_switchupcb_jet_v2_postgres_Int4Range) LOWER_BOUND() postgres.IntegerExpression {
	return W.WLOWER_BOUND()
}
func (W _github_com_switchupcb_jet_v2_postgres_Int4Range) LOWER_INC() jet.BoolExpression {
	return W.WLOWER_INC()
}
func (W _github_com_switchupcb_jet_v2_postgres_Int4Range) LOWER_INF() jet.BoolExpression {
	return W.WLOWER_INF()
}
func (W _github_com_switchupcb_jet_v2_postgres_Int4Range) LT(rhs jet.Range[postgres.IntegerExpression]) jet.BoolExpression {
	return W.WLT(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_Int4Range) LT_EQ(rhs jet.Range[postgres.IntegerExpression]) jet.BoolExpression {
	return W.WLT_EQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_Int4Range) NOT_EQ(rhs jet.Range[postgres.IntegerExpression]) jet.BoolExpression {
	return W.WNOT_EQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_Int4Range) NOT_IN(expressions ...jet.Expression) jet.BoolExpression {
	return W.WNOT_IN(expressions...)
}
func (W _github_com_switchupcb_jet_v2_postgres_Int4Range) NULLS_FIRST() jet.OrderByClause {
	return W.WNULLS_FIRST()
}
func (W _github_com_switchupcb_jet_v2_postgres_Int4Range) NULLS_LAST() jet.OrderByClause {
	return W.WNULLS_LAST()
}
func (W _github_com_switchupcb_jet_v2_postgres_Int4Range) OVERLAP(rhs jet.Range[postgres.IntegerExpression]) jet.BoolExpression {
	return W.WOVERLAP(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_Int4Range) UNION(rhs jet.Range[postgres.IntegerExpression]) jet.Range[postgres.IntegerExpression] {
	return W.WUNION(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_Int4Range) UPPER_BOUND() postgres.IntegerExpression {
	return W.WUPPER_BOUND()
}
func (W _github_com_switchupcb_jet_v2_postgres_Int4Range) UPPER_INC() jet.BoolExpression {
	return W.WUPPER_INC()
}
func (W _github_com_switchupcb_jet_v2_postgres_Int4Range) UPPER_INF() jet.BoolExpression {
	return W.WUPPER_INF()
}

// _github_com_switchupcb_jet_v2_postgres_Int8Range is an interface wrapper for Int8Range type
type _github_com_switchupcb_jet_v2_postgres_Int8Range struct {
	IValue          interface{}
	WAS             func(alias string) jet.Projection
	WASC            func() jet.OrderByClause
	WCONTAINS       func(rhs postgres.IntegerExpression) jet.BoolExpression
	WCONTAINS_RANGE func(rhs jet.Range[postgres.IntegerExpression]) jet.BoolExpression
	WDESC           func() jet.OrderByClause
	WDIFFERENCE     func(rhs jet.Range[postgres.IntegerExpression]) jet.Range[postgres.IntegerExpression]
	WEQ             func(rhs jet.Range[postgres.IntegerExpression]) jet.BoolExpression
	WGT             func(rhs jet.Range[postgres.IntegerExpression]) jet.BoolExpression
	WGT_EQ          func(rhs jet.Range[postgres.IntegerExpression]) jet.BoolExpression
	WIN             func(expressions ...jet.Expression) jet.BoolExpression
	WINTERSECTION   func(rhs jet.Range[postgres.IntegerExpression]) jet.Range[postgres.IntegerExpression]
	WIS_EMPTY       func() jet.BoolExpression
	WIS_NOT_NULL    func() jet.BoolExpression
	WIS_NULL        func() jet.BoolExpression
	WLOWER_BOUND    func() postgres.IntegerExpression
	WLOWER_INC      func() jet.BoolExpression
	WLOWER_INF      func() jet.BoolExpression
	WLT             func(rhs jet.Range[postgres.IntegerExpression]) jet.BoolExpression
	WLT_EQ          func(rhs jet.Range[postgres.IntegerExpression]) jet.BoolExpression
	WNOT_EQ         func(rhs jet.Range[postgres.IntegerExpression]) jet.BoolExpression
	WNOT_IN         func(expressions ...jet.Expression) jet.BoolExpression
	WNULLS_FIRST    func() jet.OrderByClause
	WNULLS_LAST     func() jet.OrderByClause
	WOVERLAP        func(rhs jet.Range[postgres.IntegerExpression]) jet.BoolExpression
	WUNION          func(rhs jet.Range[postgres.IntegerExpression]) jet.Range[postgres.IntegerExpression]
	WUPPER_BOUND    func() postgres.IntegerExpression
	WUPPER_INC      func() jet.BoolExpression
	WUPPER_INF      func() jet.BoolExpression
}

func (W _github_com_switchupcb_jet_v2_postgres_Int8Range) AS(alias string) jet.Projection {
	return W.WAS(alias)
}
func (W _github_com_switchupcb_jet_v2_postgres_Int8Range) ASC() jet.OrderByClause {
	return W.WASC()
}
func (W _github_com_switchupcb_jet_v2_postgres_Int8Range) CONTAINS(rhs postgres.IntegerExpression) jet.BoolExpression {
	return W.WCONTAINS(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_Int8Range) CONTAINS_RANGE(rhs jet.Range[postgres.IntegerExpression]) jet.BoolExpression {
	return W.WCONTAINS_RANGE(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_Int8Range) DESC() jet.OrderByClause {
	return W.WDESC()
}
func (W _github_com_switchupcb_jet_v2_postgres_Int8Range) DIFFERENCE(rhs jet.Range[postgres.IntegerExpression]) jet.Range[postgres.IntegerExpression] {
	return W.WDIFFERENCE(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_Int8Range) EQ(rhs jet.Range[postgres.IntegerExpression]) jet.BoolExpression {
	return W.WEQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_Int8Range) GT(rhs jet.Range[postgres.IntegerExpression]) jet.BoolExpression {
	return W.WGT(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_Int8Range) GT_EQ(rhs jet.Range[postgres.IntegerExpression]) jet.BoolExpression {
	return W.WGT_EQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_Int8Range) IN(expressions ...jet.Expression) jet.BoolExpression {
	return W.WIN(expressions...)
}
func (W _github_com_switchupcb_jet_v2_postgres_Int8Range) INTERSECTION(rhs jet.Range[postgres.IntegerExpression]) jet.Range[postgres.IntegerExpression] {
	return W.WINTERSECTION(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_Int8Range) IS_EMPTY() jet.BoolExpression {
	return W.WIS_EMPTY()
}
func (W _github_com_switchupcb_jet_v2_postgres_Int8Range) IS_NOT_NULL() jet.BoolExpression {
	return W.WIS_NOT_NULL()
}
func (W _github_com_switchupcb_jet_v2_postgres_Int8Range) IS_NULL() jet.BoolExpression {
	return W.WIS_NULL()
}
func (W _github_com_switchupcb_jet_v2_postgres_Int8Range) LOWER_BOUND() postgres.IntegerExpression {
	return W.WLOWER_BOUND()
}
func (W _github_com_switchupcb_jet_v2_postgres_Int8Range) LOWER_INC() jet.BoolExpression {
	return W.WLOWER_INC()
}
func (W _github_com_switchupcb_jet_v2_postgres_Int8Range) LOWER_INF() jet.BoolExpression {
	return W.WLOWER_INF()
}
func (W _github_com_switchupcb_jet_v2_postgres_Int8Range) LT(rhs jet.Range[postgres.IntegerExpression]) jet.BoolExpression {
	return W.WLT(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_Int8Range) LT_EQ(rhs jet.Range[postgres.IntegerExpression]) jet.BoolExpression {
	return W.WLT_EQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_Int8Range) NOT_EQ(rhs jet.Range[postgres.IntegerExpression]) jet.BoolExpression {
	return W.WNOT_EQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_Int8Range) NOT_IN(expressions ...jet.Expression) jet.BoolExpression {
	return W.WNOT_IN(expressions...)
}
func (W _github_com_switchupcb_jet_v2_postgres_Int8Range) NULLS_FIRST() jet.OrderByClause {
	return W.WNULLS_FIRST()
}
func (W _github_com_switchupcb_jet_v2_postgres_Int8Range) NULLS_LAST() jet.OrderByClause {
	return W.WNULLS_LAST()
}
func (W _github_com_switchupcb_jet_v2_postgres_Int8Range) OVERLAP(rhs jet.Range[postgres.IntegerExpression]) jet.BoolExpression {
	return W.WOVERLAP(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_Int8Range) UNION(rhs jet.Range[postgres.IntegerExpression]) jet.Range[postgres.IntegerExpression] {
	return W.WUNION(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_Int8Range) UPPER_BOUND() postgres.IntegerExpression {
	return W.WUPPER_BOUND()
}
func (W _github_com_switchupcb_jet_v2_postgres_Int8Range) UPPER_INC() jet.BoolExpression {
	return W.WUPPER_INC()
}
func (W _github_com_switchupcb_jet_v2_postgres_Int8Range) UPPER_INF() jet.BoolExpression {
	return W.WUPPER_INF()
}

// _github_com_switchupcb_jet_v2_postgres_IntegerExpression is an interface wrapper for IntegerExpression type
type _github_com_switchupcb_jet_v2_postgres_IntegerExpression struct {
	IValue                interface{}
	WADD                  func(rhs jet.IntegerExpression) jet.IntegerExpression
	WAS                   func(alias string) jet.Projection
	WASC                  func() jet.OrderByClause
	WBETWEEN              func(min jet.IntegerExpression, max jet.IntegerExpression) jet.BoolExpression
	WBIT_AND              func(rhs jet.IntegerExpression) jet.IntegerExpression
	WBIT_OR               func(rhs jet.IntegerExpression) jet.IntegerExpression
	WBIT_SHIFT_LEFT       func(shift jet.IntegerExpression) jet.IntegerExpression
	WBIT_SHIFT_RIGHT      func(shift jet.IntegerExpression) jet.IntegerExpression
	WBIT_XOR              func(rhs jet.IntegerExpression) jet.IntegerExpression
	WDESC                 func() jet.OrderByClause
	WDIV                  func(rhs jet.IntegerExpression) jet.IntegerExpression
	WEQ                   func(rhs jet.IntegerExpression) jet.BoolExpression
	WGT                   func(rhs jet.IntegerExpression) jet.BoolExpression
	WGT_EQ                func(rhs jet.IntegerExpression) jet.BoolExpression
	WIN                   func(expressions ...jet.Expression) jet.BoolExpression
	WIS_DISTINCT_FROM     func(rhs jet.IntegerExpression) jet.BoolExpression
	WIS_NOT_DISTINCT_FROM func(rhs jet.IntegerExpression) jet.BoolExpression
	WIS_NOT_NULL          func() jet.BoolExpression
	WIS_NULL              func() jet.BoolExpression
	WLT                   func(rhs jet.IntegerExpression) jet.BoolExpression
	WLT_EQ                func(rhs jet.IntegerExpression) jet.BoolExpression
	WMOD                  func(rhs jet.IntegerExpression) jet.IntegerExpression
	WMUL                  func(rhs jet.IntegerExpression) jet.IntegerExpression
	WNOT_BETWEEN          func(min jet.IntegerExpression, max jet.IntegerExpression) jet.BoolExpression
	WNOT_EQ               func(rhs jet.IntegerExpression) jet.BoolExpression
	WNOT_IN               func(expressions ...jet.Expression) jet.BoolExpression
	WNULLS_FIRST          func() jet.OrderByClause
	WNULLS_LAST           func() jet.OrderByClause
	WPOW                  func(rhs jet.IntegerExpression) jet.IntegerExpression
	WSUB                  func(rhs jet.IntegerExpression) jet.IntegerExpression
}

func (W _github_com_switchupcb_jet_v2_postgres_IntegerExpression) ADD(rhs jet.IntegerExpression) jet.IntegerExpression {
	return W.WADD(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_IntegerExpression) AS(alias string) jet.Projection {
	return W.WAS(alias)
}
func (W _github_com_switchupcb_jet_v2_postgres_IntegerExpression) ASC() jet.OrderByClause {
	return W.WASC()
}
func (W _github_com_switchupcb_jet_v2_postgres_IntegerExpression) BETWEEN(min jet.IntegerExpression, max jet.IntegerExpression) jet.BoolExpression {
	return W.WBETWEEN(min, max)
}
func (W _github_com_switchupcb_jet_v2_postgres_IntegerExpression) BIT_AND(rhs jet.IntegerExpression) jet.IntegerExpression {
	return W.WBIT_AND(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_IntegerExpression) BIT_OR(rhs jet.IntegerExpression) jet.IntegerExpression {
	return W.WBIT_OR(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_IntegerExpression) BIT_SHIFT_LEFT(shift jet.IntegerExpression) jet.IntegerExpression {
	return W.WBIT_SHIFT_LEFT(shift)
}
func (W _github_com_switchupcb_jet_v2_postgres_IntegerExpression) BIT_SHIFT_RIGHT(shift jet.IntegerExpression) jet.IntegerExpression {
	return W.WBIT_SHIFT_RIGHT(shift)
}
func (W _github_com_switchupcb_jet_v2_postgres_IntegerExpression) BIT_XOR(rhs jet.IntegerExpression) jet.IntegerExpression {
	return W.WBIT_XOR(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_IntegerExpression) DESC() jet.OrderByClause {
	return W.WDESC()
}
func (W _github_com_switchupcb_jet_v2_postgres_IntegerExpression) DIV(rhs jet.IntegerExpression) jet.IntegerExpression {
	return W.WDIV(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_IntegerExpression) EQ(rhs jet.IntegerExpression) jet.BoolExpression {
	return W.WEQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_IntegerExpression) GT(rhs jet.IntegerExpression) jet.BoolExpression {
	return W.WGT(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_IntegerExpression) GT_EQ(rhs jet.IntegerExpression) jet.BoolExpression {
	return W.WGT_EQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_IntegerExpression) IN(expressions ...jet.Expression) jet.BoolExpression {
	return W.WIN(expressions...)
}
func (W _github_com_switchupcb_jet_v2_postgres_IntegerExpression) IS_DISTINCT_FROM(rhs jet.IntegerExpression) jet.BoolExpression {
	return W.WIS_DISTINCT_FROM(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_IntegerExpression) IS_NOT_DISTINCT_FROM(rhs jet.IntegerExpression) jet.BoolExpression {
	return W.WIS_NOT_DISTINCT_FROM(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_IntegerExpression) IS_NOT_NULL() jet.BoolExpression {
	return W.WIS_NOT_NULL()
}
func (W _github_com_switchupcb_jet_v2_postgres_IntegerExpression) IS_NULL() jet.BoolExpression {
	return W.WIS_NULL()
}
func (W _github_com_switchupcb_jet_v2_postgres_IntegerExpression) LT(rhs jet.IntegerExpression) jet.BoolExpression {
	return W.WLT(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_IntegerExpression) LT_EQ(rhs jet.IntegerExpression) jet.BoolExpression {
	return W.WLT_EQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_IntegerExpression) MOD(rhs jet.IntegerExpression) jet.IntegerExpression {
	return W.WMOD(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_IntegerExpression) MUL(rhs jet.IntegerExpression) jet.IntegerExpression {
	return W.WMUL(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_IntegerExpression) NOT_BETWEEN(min jet.IntegerExpression, max jet.IntegerExpression) jet.BoolExpression {
	return W.WNOT_BETWEEN(min, max)
}
func (W _github_com_switchupcb_jet_v2_postgres_IntegerExpression) NOT_EQ(rhs jet.IntegerExpression) jet.BoolExpression {
	return W.WNOT_EQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_IntegerExpression) NOT_IN(expressions ...jet.Expression) jet.BoolExpression {
	return W.WNOT_IN(expressions...)
}
func (W _github_com_switchupcb_jet_v2_postgres_IntegerExpression) NULLS_FIRST() jet.OrderByClause {
	return W.WNULLS_FIRST()
}
func (W _github_com_switchupcb_jet_v2_postgres_IntegerExpression) NULLS_LAST() jet.OrderByClause {
	return W.WNULLS_LAST()
}
func (W _github_com_switchupcb_jet_v2_postgres_IntegerExpression) POW(rhs jet.IntegerExpression) jet.IntegerExpression {
	return W.WPOW(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_IntegerExpression) SUB(rhs jet.IntegerExpression) jet.IntegerExpression {
	return W.WSUB(rhs)
}

// _github_com_switchupcb_jet_v2_postgres_IntervalExpression is an interface wrapper for IntervalExpression type
type _github_com_switchupcb_jet_v2_postgres_IntervalExpression struct {
	IValue                interface{}
	WADD                  func(rhs postgres.IntervalExpression) postgres.IntervalExpression
	WAS                   func(alias string) jet.Projection
	WASC                  func() jet.OrderByClause
	WBETWEEN              func(min postgres.IntervalExpression, max postgres.IntervalExpression) postgres.BoolExpression
	WDESC                 func() jet.OrderByClause
	WDIV                  func(rhs postgres.NumericExpression) postgres.IntervalExpression
	WEQ                   func(rhs postgres.IntervalExpression) postgres.BoolExpression
	WGT                   func(rhs postgres.IntervalExpression) postgres.BoolExpression
	WGT_EQ                func(rhs postgres.IntervalExpression) postgres.BoolExpression
	WIN                   func(expressions ...jet.Expression) jet.BoolExpression
	WIS_DISTINCT_FROM     func(rhs postgres.IntervalExpression) postgres.BoolExpression
	WIS_NOT_DISTINCT_FROM func(rhs postgres.IntervalExpression) postgres.BoolExpression
	WIS_NOT_NULL          func() jet.BoolExpression
	WIS_NULL              func() jet.BoolExpression
	WLT                   func(rhs postgres.IntervalExpression) postgres.BoolExpression
	WLT_EQ                func(rhs postgres.IntervalExpression) postgres.BoolExpression
	WMUL                  func(rhs postgres.NumericExpression) postgres.IntervalExpression
	WNOT_BETWEEN          func(min postgres.IntervalExpression, max postgres.IntervalExpression) postgres.BoolExpression
	WNOT_EQ               func(rhs postgres.IntervalExpression) postgres.BoolExpression
	WNOT_IN               func(expressions ...jet.Expression) jet.BoolExpression
	WNULLS_FIRST          func() jet.OrderByClause
	WNULLS_LAST           func() jet.OrderByClause
	WSUB                  func(rhs postgres.IntervalExpression) postgres.IntervalExpression
}

func (W _github_com_switchupcb_jet_v2_postgres_IntervalExpression) ADD(rhs postgres.IntervalExpression) postgres.IntervalExpression {
	return W.WADD(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_IntervalExpression) AS(alias string) jet.Projection {
	return W.WAS(alias)
}
func (W _github_com_switchupcb_jet_v2_postgres_IntervalExpression) ASC() jet.OrderByClause {
	return W.WASC()
}
func (W _github_com_switchupcb_jet_v2_postgres_IntervalExpression) BETWEEN(min postgres.IntervalExpression, max postgres.IntervalExpression) postgres.BoolExpression {
	return W.WBETWEEN(min, max)
}
func (W _github_com_switchupcb_jet_v2_postgres_IntervalExpression) DESC() jet.OrderByClause {
	return W.WDESC()
}
func (W _github_com_switchupcb_jet_v2_postgres_IntervalExpression) DIV(rhs postgres.NumericExpression) postgres.IntervalExpression {
	return W.WDIV(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_IntervalExpression) EQ(rhs postgres.IntervalExpression) postgres.BoolExpression {
	return W.WEQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_IntervalExpression) GT(rhs postgres.IntervalExpression) postgres.BoolExpression {
	return W.WGT(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_IntervalExpression) GT_EQ(rhs postgres.IntervalExpression) postgres.BoolExpression {
	return W.WGT_EQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_IntervalExpression) IN(expressions ...jet.Expression) jet.BoolExpression {
	return W.WIN(expressions...)
}
func (W _github_com_switchupcb_jet_v2_postgres_IntervalExpression) IS_DISTINCT_FROM(rhs postgres.IntervalExpression) postgres.BoolExpression {
	return W.WIS_DISTINCT_FROM(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_IntervalExpression) IS_NOT_DISTINCT_FROM(rhs postgres.IntervalExpression) postgres.BoolExpression {
	return W.WIS_NOT_DISTINCT_FROM(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_IntervalExpression) IS_NOT_NULL() jet.BoolExpression {
	return W.WIS_NOT_NULL()
}
func (W _github_com_switchupcb_jet_v2_postgres_IntervalExpression) IS_NULL() jet.BoolExpression {
	return W.WIS_NULL()
}
func (W _github_com_switchupcb_jet_v2_postgres_IntervalExpression) LT(rhs postgres.IntervalExpression) postgres.BoolExpression {
	return W.WLT(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_IntervalExpression) LT_EQ(rhs postgres.IntervalExpression) postgres.BoolExpression {
	return W.WLT_EQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_IntervalExpression) MUL(rhs postgres.NumericExpression) postgres.IntervalExpression {
	return W.WMUL(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_IntervalExpression) NOT_BETWEEN(min postgres.IntervalExpression, max postgres.IntervalExpression) postgres.BoolExpression {
	return W.WNOT_BETWEEN(min, max)
}
func (W _github_com_switchupcb_jet_v2_postgres_IntervalExpression) NOT_EQ(rhs postgres.IntervalExpression) postgres.BoolExpression {
	return W.WNOT_EQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_IntervalExpression) NOT_IN(expressions ...jet.Expression) jet.BoolExpression {
	return W.WNOT_IN(expressions...)
}
func (W _github_com_switchupcb_jet_v2_postgres_IntervalExpression) NULLS_FIRST() jet.OrderByClause {
	return W.WNULLS_FIRST()
}
func (W _github_com_switchupcb_jet_v2_postgres_IntervalExpression) NULLS_LAST() jet.OrderByClause {
	return W.WNULLS_LAST()
}
func (W _github_com_switchupcb_jet_v2_postgres_IntervalExpression) SUB(rhs postgres.IntervalExpression) postgres.IntervalExpression {
	return W.WSUB(rhs)
}

// _github_com_switchupcb_jet_v2_postgres_LockStatement is an interface wrapper for LockStatement type
type _github_com_switchupcb_jet_v2_postgres_LockStatement struct {
	IValue        interface{}
	WDebugSql     func() (query string)
	WExec         func(db qrm.Executable) (sql.Result, error)
	WExecContext  func(ctx context.Context, db qrm.Executable) (sql.Result, error)
	WIN           func(lockMode postgres.TableLockMode) postgres.LockStatement
	WNOWAIT       func() postgres.LockStatement
	WQuery        func(db qrm.Queryable, destination interface{}) error
	WQueryContext func(ctx context.Context, db qrm.Queryable, destination interface{}) error
	WRows         func(ctx context.Context, db qrm.Queryable) (*jet.Rows, error)
	WSql          func() (query string, args []interface{})
}

func (W _github_com_switchupcb_jet_v2_postgres_LockStatement) DebugSql() (query string) {
	return W.WDebugSql()
}
func (W _github_com_switchupcb_jet_v2_postgres_LockStatement) Exec(db qrm.Executable) (sql.Result, error) {
	return W.WExec(db)
}
func (W _github_com_switchupcb_jet_v2_postgres_LockStatement) ExecContext(ctx context.Context, db qrm.Executable) (sql.Result, error) {
	return W.WExecContext(ctx, db)
}
func (W _github_com_switchupcb_jet_v2_postgres_LockStatement) IN(lockMode postgres.TableLockMode) postgres.LockStatement {
	return W.WIN(lockMode)
}
func (W _github_com_switchupcb_jet_v2_postgres_LockStatement) NOWAIT() postgres.LockStatement {
	return W.WNOWAIT()
}
func (W _github_com_switchupcb_jet_v2_postgres_LockStatement) Query(db qrm.Queryable, destination interface{}) error {
	return W.WQuery(db, destination)
}
func (W _github_com_switchupcb_jet_v2_postgres_LockStatement) QueryContext(ctx context.Context, db qrm.Queryable, destination interface{}) error {
	return W.WQueryContext(ctx, db, destination)
}
func (W _github_com_switchupcb_jet_v2_postgres_LockStatement) Rows(ctx context.Context, db qrm.Queryable) (*jet.Rows, error) {
	return W.WRows(ctx, db)
}
func (W _github_com_switchupcb_jet_v2_postgres_LockStatement) Sql() (query string, args []interface{}) {
	return W.WSql()
}

// _github_com_switchupcb_jet_v2_postgres_NumericExpression is an interface wrapper for NumericExpression type
type _github_com_switchupcb_jet_v2_postgres_NumericExpression struct {
	IValue       interface{}
	WAS          func(alias string) jet.Projection
	WASC         func() jet.OrderByClause
	WDESC        func() jet.OrderByClause
	WIN          func(expressions ...jet.Expression) jet.BoolExpression
	WIS_NOT_NULL func() jet.BoolExpression
	WIS_NULL     func() jet.BoolExpression
	WNOT_IN      func(expressions ...jet.Expression) jet.BoolExpression
	WNULLS_FIRST func() jet.OrderByClause
	WNULLS_LAST  func() jet.OrderByClause
}

func (W _github_com_switchupcb_jet_v2_postgres_NumericExpression) AS(alias string) jet.Projection {
	return W.WAS(alias)
}
func (W _github_com_switchupcb_jet_v2_postgres_NumericExpression) ASC() jet.OrderByClause {
	return W.WASC()
}
func (W _github_com_switchupcb_jet_v2_postgres_NumericExpression) DESC() jet.OrderByClause {
	return W.WDESC()
}
func (W _github_com_switchupcb_jet_v2_postgres_NumericExpression) IN(expressions ...jet.Expression) jet.BoolExpression {
	return W.WIN(expressions...)
}
func (W _github_com_switchupcb_jet_v2_postgres_NumericExpression) IS_NOT_NULL() jet.BoolExpression {
	return W.WIS_NOT_NULL()
}
func (W _github_com_switchupcb_jet_v2_postgres_NumericExpression) IS_NULL() jet.BoolExpression {
	return W.WIS_NULL()
}
func (W _github_com_switchupcb_jet_v2_postgres_NumericExpression) NOT_IN(expressions ...jet.Expression) jet.BoolExpression {
	return W.WNOT_IN(expressions...)
}
func (W _github_com_switchupcb_jet_v2_postgres_NumericExpression) NULLS_FIRST() jet.OrderByClause {
	return W.WNULLS_FIRST()
}
func (W _github_com_switchupcb_jet_v2_postgres_NumericExpression) NULLS_LAST() jet.OrderByClause {
	return W.WNULLS_LAST()
}

// _github_com_switchupcb_jet_v2_postgres_NumericRange is an interface wrapper for NumericRange type
type _github_com_switchupcb_jet_v2_postgres_NumericRange struct {
	IValue          interface{}
	WAS             func(alias string) jet.Projection
	WASC            func() jet.OrderByClause
	WCONTAINS       func(rhs postgres.NumericExpression) jet.BoolExpression
	WCONTAINS_RANGE func(rhs jet.Range[postgres.NumericExpression]) jet.BoolExpression
	WDESC           func() jet.OrderByClause
	WDIFFERENCE     func(rhs jet.Range[postgres.NumericExpression]) jet.Range[postgres.NumericExpression]
	WEQ             func(rhs jet.Range[postgres.NumericExpression]) jet.BoolExpression
	WGT             func(rhs jet.Range[postgres.NumericExpression]) jet.BoolExpression
	WGT_EQ          func(rhs jet.Range[postgres.NumericExpression]) jet.BoolExpression
	WIN             func(expressions ...jet.Expression) jet.BoolExpression
	WINTERSECTION   func(rhs jet.Range[postgres.NumericExpression]) jet.Range[postgres.NumericExpression]
	WIS_EMPTY       func() jet.BoolExpression
	WIS_NOT_NULL    func() jet.BoolExpression
	WIS_NULL        func() jet.BoolExpression
	WLOWER_BOUND    func() postgres.NumericExpression
	WLOWER_INC      func() jet.BoolExpression
	WLOWER_INF      func() jet.BoolExpression
	WLT             func(rhs jet.Range[postgres.NumericExpression]) jet.BoolExpression
	WLT_EQ          func(rhs jet.Range[postgres.NumericExpression]) jet.BoolExpression
	WNOT_EQ         func(rhs jet.Range[postgres.NumericExpression]) jet.BoolExpression
	WNOT_IN         func(expressions ...jet.Expression) jet.BoolExpression
	WNULLS_FIRST    func() jet.OrderByClause
	WNULLS_LAST     func() jet.OrderByClause
	WOVERLAP        func(rhs jet.Range[postgres.NumericExpression]) jet.BoolExpression
	WUNION          func(rhs jet.Range[postgres.NumericExpression]) jet.Range[postgres.NumericExpression]
	WUPPER_BOUND    func() postgres.NumericExpression
	WUPPER_INC      func() jet.BoolExpression
	WUPPER_INF      func() jet.BoolExpression
}

func (W _github_com_switchupcb_jet_v2_postgres_NumericRange) AS(alias string) jet.Projection {
	return W.WAS(alias)
}
func (W _github_com_switchupcb_jet_v2_postgres_NumericRange) ASC() jet.OrderByClause {
	return W.WASC()
}
func (W _github_com_switchupcb_jet_v2_postgres_NumericRange) CONTAINS(rhs postgres.NumericExpression) jet.BoolExpression {
	return W.WCONTAINS(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_NumericRange) CONTAINS_RANGE(rhs jet.Range[postgres.NumericExpression]) jet.BoolExpression {
	return W.WCONTAINS_RANGE(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_NumericRange) DESC() jet.OrderByClause {
	return W.WDESC()
}
func (W _github_com_switchupcb_jet_v2_postgres_NumericRange) DIFFERENCE(rhs jet.Range[postgres.NumericExpression]) jet.Range[postgres.NumericExpression] {
	return W.WDIFFERENCE(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_NumericRange) EQ(rhs jet.Range[postgres.NumericExpression]) jet.BoolExpression {
	return W.WEQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_NumericRange) GT(rhs jet.Range[postgres.NumericExpression]) jet.BoolExpression {
	return W.WGT(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_NumericRange) GT_EQ(rhs jet.Range[postgres.NumericExpression]) jet.BoolExpression {
	return W.WGT_EQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_NumericRange) IN(expressions ...jet.Expression) jet.BoolExpression {
	return W.WIN(expressions...)
}
func (W _github_com_switchupcb_jet_v2_postgres_NumericRange) INTERSECTION(rhs jet.Range[postgres.NumericExpression]) jet.Range[postgres.NumericExpression] {
	return W.WINTERSECTION(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_NumericRange) IS_EMPTY() jet.BoolExpression {
	return W.WIS_EMPTY()
}
func (W _github_com_switchupcb_jet_v2_postgres_NumericRange) IS_NOT_NULL() jet.BoolExpression {
	return W.WIS_NOT_NULL()
}
func (W _github_com_switchupcb_jet_v2_postgres_NumericRange) IS_NULL() jet.BoolExpression {
	return W.WIS_NULL()
}
func (W _github_com_switchupcb_jet_v2_postgres_NumericRange) LOWER_BOUND() postgres.NumericExpression {
	return W.WLOWER_BOUND()
}
func (W _github_com_switchupcb_jet_v2_postgres_NumericRange) LOWER_INC() jet.BoolExpression {
	return W.WLOWER_INC()
}
func (W _github_com_switchupcb_jet_v2_postgres_NumericRange) LOWER_INF() jet.BoolExpression {
	return W.WLOWER_INF()
}
func (W _github_com_switchupcb_jet_v2_postgres_NumericRange) LT(rhs jet.Range[postgres.NumericExpression]) jet.BoolExpression {
	return W.WLT(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_NumericRange) LT_EQ(rhs jet.Range[postgres.NumericExpression]) jet.BoolExpression {
	return W.WLT_EQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_NumericRange) NOT_EQ(rhs jet.Range[postgres.NumericExpression]) jet.BoolExpression {
	return W.WNOT_EQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_NumericRange) NOT_IN(expressions ...jet.Expression) jet.BoolExpression {
	return W.WNOT_IN(expressions...)
}
func (W _github_com_switchupcb_jet_v2_postgres_NumericRange) NULLS_FIRST() jet.OrderByClause {
	return W.WNULLS_FIRST()
}
func (W _github_com_switchupcb_jet_v2_postgres_NumericRange) NULLS_LAST() jet.OrderByClause {
	return W.WNULLS_LAST()
}
func (W _github_com_switchupcb_jet_v2_postgres_NumericRange) OVERLAP(rhs jet.Range[postgres.NumericExpression]) jet.BoolExpression {
	return W.WOVERLAP(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_NumericRange) UNION(rhs jet.Range[postgres.NumericExpression]) jet.Range[postgres.NumericExpression] {
	return W.WUNION(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_NumericRange) UPPER_BOUND() postgres.NumericExpression {
	return W.WUPPER_BOUND()
}
func (W _github_com_switchupcb_jet_v2_postgres_NumericRange) UPPER_INC() jet.BoolExpression {
	return W.WUPPER_INC()
}
func (W _github_com_switchupcb_jet_v2_postgres_NumericRange) UPPER_INF() jet.BoolExpression {
	return W.WUPPER_INF()
}

// _github_com_switchupcb_jet_v2_postgres_OnConflict is an interface wrapper for OnConflict type
type _github_com_switchupcb_jet_v2_postgres_OnConflict struct {
	IValue         interface{}
	WDO_NOTHING    func() postgres.InsertStatement
	WDO_UPDATE     func(action postgres.ConflictAction) postgres.InsertStatement
	WON_CONSTRAINT func(name string) postgres.ConflictTarget
	WWHERE         func(indexPredicate postgres.BoolExpression) postgres.ConflictTarget
}

func (W _github_com_switchupcb_jet_v2_postgres_OnConflict) DO_NOTHING() postgres.InsertStatement {
	return W.WDO_NOTHING()
}
func (W _github_com_switchupcb_jet_v2_postgres_OnConflict) DO_UPDATE(action postgres.ConflictAction) postgres.InsertStatement {
	return W.WDO_UPDATE(action)
}
func (W _github_com_switchupcb_jet_v2_postgres_OnConflict) ON_CONSTRAINT(name string) postgres.ConflictTarget {
	return W.WON_CONSTRAINT(name)
}
func (W _github_com_switchupcb_jet_v2_postgres_OnConflict) WHERE(indexPredicate postgres.BoolExpression) postgres.ConflictTarget {
	return W.WWHERE(indexPredicate)
}

// _github_com_switchupcb_jet_v2_postgres_OrderByClause is an interface wrapper for OrderByClause type
type _github_com_switchupcb_jet_v2_postgres_OrderByClause struct {
	IValue       interface{}
	WNULLS_FIRST func() jet.OrderByClause
	WNULLS_LAST  func() jet.OrderByClause
}

func (W _github_com_switchupcb_jet_v2_postgres_OrderByClause) NULLS_FIRST() jet.OrderByClause {
	return W.WNULLS_FIRST()
}
func (W _github_com_switchupcb_jet_v2_postgres_OrderByClause) NULLS_LAST() jet.OrderByClause {
	return W.WNULLS_LAST()
}

// _github_com_switchupcb_jet_v2_postgres_PrintableStatement is an interface wrapper for PrintableStatement type
type _github_com_switchupcb_jet_v2_postgres_PrintableStatement struct {
	IValue    interface{}
	WDebugSql func() (query string)
	WSql      func() (query string, args []interface{})
}

func (W _github_com_switchupcb_jet_v2_postgres_PrintableStatement) DebugSql() (query string) {
	return W.WDebugSql()
}
func (W _github_com_switchupcb_jet_v2_postgres_PrintableStatement) Sql() (query string, args []interface{}) {
	return W.WSql()
}

// _github_com_switchupcb_jet_v2_postgres_Projection is an interface wrapper for Projection type
type _github_com_switchupcb_jet_v2_postgres_Projection struct {
	IValue interface{}
}

// _github_com_switchupcb_jet_v2_postgres_ReadableTable is an interface wrapper for ReadableTable type
type _github_com_switchupcb_jet_v2_postgres_ReadableTable struct {
	IValue      interface{}
	WCROSS_JOIN func(table postgres.ReadableTable) postgres.ReadableTable
	WFULL_JOIN  func(table postgres.ReadableTable, onCondition postgres.BoolExpression) postgres.ReadableTable
	WINNER_JOIN func(table postgres.ReadableTable, onCondition postgres.BoolExpression) postgres.ReadableTable
	WLEFT_JOIN  func(table postgres.ReadableTable, onCondition postgres.BoolExpression) postgres.ReadableTable
	WRIGHT_JOIN func(table postgres.ReadableTable, onCondition postgres.BoolExpression) postgres.ReadableTable
	WSELECT     func(projection postgres.Projection, projections ...postgres.Projection) postgres.SelectStatement
}

func (W _github_com_switchupcb_jet_v2_postgres_ReadableTable) CROSS_JOIN(table postgres.ReadableTable) postgres.ReadableTable {
	return W.WCROSS_JOIN(table)
}
func (W _github_com_switchupcb_jet_v2_postgres_ReadableTable) FULL_JOIN(table postgres.ReadableTable, onCondition postgres.BoolExpression) postgres.ReadableTable {
	return W.WFULL_JOIN(table, onCondition)
}
func (W _github_com_switchupcb_jet_v2_postgres_ReadableTable) INNER_JOIN(table postgres.ReadableTable, onCondition postgres.BoolExpression) postgres.ReadableTable {
	return W.WINNER_JOIN(table, onCondition)
}
func (W _github_com_switchupcb_jet_v2_postgres_ReadableTable) LEFT_JOIN(table postgres.ReadableTable, onCondition postgres.BoolExpression) postgres.ReadableTable {
	return W.WLEFT_JOIN(table, onCondition)
}
func (W _github_com_switchupcb_jet_v2_postgres_ReadableTable) RIGHT_JOIN(table postgres.ReadableTable, onCondition postgres.BoolExpression) postgres.ReadableTable {
	return W.WRIGHT_JOIN(table, onCondition)
}
func (W _github_com_switchupcb_jet_v2_postgres_ReadableTable) SELECT(projection postgres.Projection, projections ...postgres.Projection) postgres.SelectStatement {
	return W.WSELECT(projection, projections...)
}

// _github_com_switchupcb_jet_v2_postgres_RowExpression is an interface wrapper for RowExpression type
type _github_com_switchupcb_jet_v2_postgres_RowExpression struct {
	IValue                interface{}
	WAS                   func(alias string) jet.Projection
	WASC                  func() jet.OrderByClause
	WDESC                 func() jet.OrderByClause
	WEQ                   func(rhs jet.RowExpression) jet.BoolExpression
	WGT                   func(rhs jet.RowExpression) jet.BoolExpression
	WGT_EQ                func(rhs jet.RowExpression) jet.BoolExpression
	WIN                   func(expressions ...jet.Expression) jet.BoolExpression
	WIS_DISTINCT_FROM     func(rhs jet.RowExpression) jet.BoolExpression
	WIS_NOT_DISTINCT_FROM func(rhs jet.RowExpression) jet.BoolExpression
	WIS_NOT_NULL          func() jet.BoolExpression
	WIS_NULL              func() jet.BoolExpression
	WLT                   func(rhs jet.RowExpression) jet.BoolExpression
	WLT_EQ                func(rhs jet.RowExpression) jet.BoolExpression
	WNOT_EQ               func(rhs jet.RowExpression) jet.BoolExpression
	WNOT_IN               func(expressions ...jet.Expression) jet.BoolExpression
	WNULLS_FIRST          func() jet.OrderByClause
	WNULLS_LAST           func() jet.OrderByClause
}

func (W _github_com_switchupcb_jet_v2_postgres_RowExpression) AS(alias string) jet.Projection {
	return W.WAS(alias)
}
func (W _github_com_switchupcb_jet_v2_postgres_RowExpression) ASC() jet.OrderByClause {
	return W.WASC()
}
func (W _github_com_switchupcb_jet_v2_postgres_RowExpression) DESC() jet.OrderByClause {
	return W.WDESC()
}
func (W _github_com_switchupcb_jet_v2_postgres_RowExpression) EQ(rhs jet.RowExpression) jet.BoolExpression {
	return W.WEQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_RowExpression) GT(rhs jet.RowExpression) jet.BoolExpression {
	return W.WGT(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_RowExpression) GT_EQ(rhs jet.RowExpression) jet.BoolExpression {
	return W.WGT_EQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_RowExpression) IN(expressions ...jet.Expression) jet.BoolExpression {
	return W.WIN(expressions...)
}
func (W _github_com_switchupcb_jet_v2_postgres_RowExpression) IS_DISTINCT_FROM(rhs jet.RowExpression) jet.BoolExpression {
	return W.WIS_DISTINCT_FROM(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_RowExpression) IS_NOT_DISTINCT_FROM(rhs jet.RowExpression) jet.BoolExpression {
	return W.WIS_NOT_DISTINCT_FROM(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_RowExpression) IS_NOT_NULL() jet.BoolExpression {
	return W.WIS_NOT_NULL()
}
func (W _github_com_switchupcb_jet_v2_postgres_RowExpression) IS_NULL() jet.BoolExpression {
	return W.WIS_NULL()
}
func (W _github_com_switchupcb_jet_v2_postgres_RowExpression) LT(rhs jet.RowExpression) jet.BoolExpression {
	return W.WLT(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_RowExpression) LT_EQ(rhs jet.RowExpression) jet.BoolExpression {
	return W.WLT_EQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_RowExpression) NOT_EQ(rhs jet.RowExpression) jet.BoolExpression {
	return W.WNOT_EQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_RowExpression) NOT_IN(expressions ...jet.Expression) jet.BoolExpression {
	return W.WNOT_IN(expressions...)
}
func (W _github_com_switchupcb_jet_v2_postgres_RowExpression) NULLS_FIRST() jet.OrderByClause {
	return W.WNULLS_FIRST()
}
func (W _github_com_switchupcb_jet_v2_postgres_RowExpression) NULLS_LAST() jet.OrderByClause {
	return W.WNULLS_LAST()
}

// _github_com_switchupcb_jet_v2_postgres_RowLock is an interface wrapper for RowLock type
type _github_com_switchupcb_jet_v2_postgres_RowLock struct {
	IValue       interface{}
	WNOWAIT      func() jet.RowLock
	WOF          func(a0 ...jet.Table) jet.RowLock
	WSKIP_LOCKED func() jet.RowLock
}

func (W _github_com_switchupcb_jet_v2_postgres_RowLock) NOWAIT() jet.RowLock {
	return W.WNOWAIT()
}
func (W _github_com_switchupcb_jet_v2_postgres_RowLock) OF(a0 ...jet.Table) jet.RowLock {
	return W.WOF(a0...)
}
func (W _github_com_switchupcb_jet_v2_postgres_RowLock) SKIP_LOCKED() jet.RowLock {
	return W.WSKIP_LOCKED()
}

// _github_com_switchupcb_jet_v2_postgres_SelectStatement is an interface wrapper for SelectStatement type
type _github_com_switchupcb_jet_v2_postgres_SelectStatement struct {
	IValue         interface{}
	WAS            func(alias string) jet.Projection
	WASC           func() jet.OrderByClause
	WAsTable       func(alias string) postgres.SelectTable
	WDESC          func() jet.OrderByClause
	WDISTINCT      func(on ...jet.ColumnExpression) postgres.SelectStatement
	WDebugSql      func() (query string)
	WEXCEPT        func(rhs postgres.SelectStatement) postgres.SetStatement
	WEXCEPT_ALL    func(rhs postgres.SelectStatement) postgres.SetStatement
	WExec          func(db qrm.Executable) (sql.Result, error)
	WExecContext   func(ctx context.Context, db qrm.Executable) (sql.Result, error)
	WFETCH_FIRST   func(count postgres.IntegerExpression) postgres.FetchExpand
	WFOR           func(lock postgres.RowLock) postgres.SelectStatement
	WFROM          func(tables ...postgres.ReadableTable) postgres.SelectStatement
	WGROUP_BY      func(groupByClauses ...postgres.GroupByClause) postgres.SelectStatement
	WHAVING        func(boolExpression postgres.BoolExpression) postgres.SelectStatement
	WIN            func(expressions ...jet.Expression) jet.BoolExpression
	WINTERSECT     func(rhs postgres.SelectStatement) postgres.SetStatement
	WINTERSECT_ALL func(rhs postgres.SelectStatement) postgres.SetStatement
	WIS_NOT_NULL   func() jet.BoolExpression
	WIS_NULL       func() jet.BoolExpression
	WLIMIT         func(limit int64) postgres.SelectStatement
	WNOT_IN        func(expressions ...jet.Expression) jet.BoolExpression
	WNULLS_FIRST   func() jet.OrderByClause
	WNULLS_LAST    func() jet.OrderByClause
	WOFFSET        func(offset int64) postgres.SelectStatement
	WOFFSET_e      func(offset postgres.IntegerExpression) postgres.SelectStatement
	WORDER_BY      func(orderByClauses ...postgres.OrderByClause) postgres.SelectStatement
	WQuery         func(db qrm.Queryable, destination interface{}) error
	WQueryContext  func(ctx context.Context, db qrm.Queryable, destination interface{}) error
	WRows          func(ctx context.Context, db qrm.Queryable) (*jet.Rows, error)
	WSql           func() (query string, args []interface{})
	WUNION         func(rhs postgres.SelectStatement) postgres.SetStatement
	WUNION_ALL     func(rhs postgres.SelectStatement) postgres.SetStatement
	WWHERE         func(expression postgres.BoolExpression) postgres.SelectStatement
	WWINDOW        func(name string) postgres.WindowExand
}

func (W _github_com_switchupcb_jet_v2_postgres_SelectStatement) AS(alias string) jet.Projection {
	return W.WAS(alias)
}
func (W _github_com_switchupcb_jet_v2_postgres_SelectStatement) ASC() jet.OrderByClause {
	return W.WASC()
}
func (W _github_com_switchupcb_jet_v2_postgres_SelectStatement) AsTable(alias string) postgres.SelectTable {
	return W.WAsTable(alias)
}
func (W _github_com_switchupcb_jet_v2_postgres_SelectStatement) DESC() jet.OrderByClause {
	return W.WDESC()
}
func (W _github_com_switchupcb_jet_v2_postgres_SelectStatement) DISTINCT(on ...jet.ColumnExpression) postgres.SelectStatement {
	return W.WDISTINCT(on...)
}
func (W _github_com_switchupcb_jet_v2_postgres_SelectStatement) DebugSql() (query string) {
	return W.WDebugSql()
}
func (W _github_com_switchupcb_jet_v2_postgres_SelectStatement) EXCEPT(rhs postgres.SelectStatement) postgres.SetStatement {
	return W.WEXCEPT(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_SelectStatement) EXCEPT_ALL(rhs postgres.SelectStatement) postgres.SetStatement {
	return W.WEXCEPT_ALL(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_SelectStatement) Exec(db qrm.Executable) (sql.Result, error) {
	return W.WExec(db)
}
func (W _github_com_switchupcb_jet_v2_postgres_SelectStatement) ExecContext(ctx context.Context, db qrm.Executable) (sql.Result, error) {
	return W.WExecContext(ctx, db)
}
func (W _github_com_switchupcb_jet_v2_postgres_SelectStatement) FETCH_FIRST(count postgres.IntegerExpression) postgres.FetchExpand {
	return W.WFETCH_FIRST(count)
}
func (W _github_com_switchupcb_jet_v2_postgres_SelectStatement) FOR(lock postgres.RowLock) postgres.SelectStatement {
	return W.WFOR(lock)
}
func (W _github_com_switchupcb_jet_v2_postgres_SelectStatement) FROM(tables ...postgres.ReadableTable) postgres.SelectStatement {
	return W.WFROM(tables...)
}
func (W _github_com_switchupcb_jet_v2_postgres_SelectStatement) GROUP_BY(groupByClauses ...postgres.GroupByClause) postgres.SelectStatement {
	return W.WGROUP_BY(groupByClauses...)
}
func (W _github_com_switchupcb_jet_v2_postgres_SelectStatement) HAVING(boolExpression postgres.BoolExpression) postgres.SelectStatement {
	return W.WHAVING(boolExpression)
}
func (W _github_com_switchupcb_jet_v2_postgres_SelectStatement) IN(expressions ...jet.Expression) jet.BoolExpression {
	return W.WIN(expressions...)
}
func (W _github_com_switchupcb_jet_v2_postgres_SelectStatement) INTERSECT(rhs postgres.SelectStatement) postgres.SetStatement {
	return W.WINTERSECT(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_SelectStatement) INTERSECT_ALL(rhs postgres.SelectStatement) postgres.SetStatement {
	return W.WINTERSECT_ALL(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_SelectStatement) IS_NOT_NULL() jet.BoolExpression {
	return W.WIS_NOT_NULL()
}
func (W _github_com_switchupcb_jet_v2_postgres_SelectStatement) IS_NULL() jet.BoolExpression {
	return W.WIS_NULL()
}
func (W _github_com_switchupcb_jet_v2_postgres_SelectStatement) LIMIT(limit int64) postgres.SelectStatement {
	return W.WLIMIT(limit)
}
func (W _github_com_switchupcb_jet_v2_postgres_SelectStatement) NOT_IN(expressions ...jet.Expression) jet.BoolExpression {
	return W.WNOT_IN(expressions...)
}
func (W _github_com_switchupcb_jet_v2_postgres_SelectStatement) NULLS_FIRST() jet.OrderByClause {
	return W.WNULLS_FIRST()
}
func (W _github_com_switchupcb_jet_v2_postgres_SelectStatement) NULLS_LAST() jet.OrderByClause {
	return W.WNULLS_LAST()
}
func (W _github_com_switchupcb_jet_v2_postgres_SelectStatement) OFFSET(offset int64) postgres.SelectStatement {
	return W.WOFFSET(offset)
}
func (W _github_com_switchupcb_jet_v2_postgres_SelectStatement) OFFSET_e(offset postgres.IntegerExpression) postgres.SelectStatement {
	return W.WOFFSET_e(offset)
}
func (W _github_com_switchupcb_jet_v2_postgres_SelectStatement) ORDER_BY(orderByClauses ...postgres.OrderByClause) postgres.SelectStatement {
	return W.WORDER_BY(orderByClauses...)
}
func (W _github_com_switchupcb_jet_v2_postgres_SelectStatement) Query(db qrm.Queryable, destination interface{}) error {
	return W.WQuery(db, destination)
}
func (W _github_com_switchupcb_jet_v2_postgres_SelectStatement) QueryContext(ctx context.Context, db qrm.Queryable, destination interface{}) error {
	return W.WQueryContext(ctx, db, destination)
}
func (W _github_com_switchupcb_jet_v2_postgres_SelectStatement) Rows(ctx context.Context, db qrm.Queryable) (*jet.Rows, error) {
	return W.WRows(ctx, db)
}
func (W _github_com_switchupcb_jet_v2_postgres_SelectStatement) Sql() (query string, args []interface{}) {
	return W.WSql()
}
func (W _github_com_switchupcb_jet_v2_postgres_SelectStatement) UNION(rhs postgres.SelectStatement) postgres.SetStatement {
	return W.WUNION(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_SelectStatement) UNION_ALL(rhs postgres.SelectStatement) postgres.SetStatement {
	return W.WUNION_ALL(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_SelectStatement) WHERE(expression postgres.BoolExpression) postgres.SelectStatement {
	return W.WWHERE(expression)
}
func (W _github_com_switchupcb_jet_v2_postgres_SelectStatement) WINDOW(name string) postgres.WindowExand {
	return W.WWINDOW(name)
}

// _github_com_switchupcb_jet_v2_postgres_SelectTable is an interface wrapper for SelectTable type
type _github_com_switchupcb_jet_v2_postgres_SelectTable struct {
	IValue      interface{}
	WAlias      func() string
	WAllColumns func() jet.ProjectionList
	WCROSS_JOIN func(table postgres.ReadableTable) postgres.ReadableTable
	WFULL_JOIN  func(table postgres.ReadableTable, onCondition postgres.BoolExpression) postgres.ReadableTable
	WINNER_JOIN func(table postgres.ReadableTable, onCondition postgres.BoolExpression) postgres.ReadableTable
	WLEFT_JOIN  func(table postgres.ReadableTable, onCondition postgres.BoolExpression) postgres.ReadableTable
	WRIGHT_JOIN func(table postgres.ReadableTable, onCondition postgres.BoolExpression) postgres.ReadableTable
	WSELECT     func(projection postgres.Projection, projections ...postgres.Projection) postgres.SelectStatement
}

func (W _github_com_switchupcb_jet_v2_postgres_SelectTable) Alias() string {
	return W.WAlias()
}
func (W _github_com_switchupcb_jet_v2_postgres_SelectTable) AllColumns() jet.ProjectionList {
	return W.WAllColumns()
}
func (W _github_com_switchupcb_jet_v2_postgres_SelectTable) CROSS_JOIN(table postgres.ReadableTable) postgres.ReadableTable {
	return W.WCROSS_JOIN(table)
}
func (W _github_com_switchupcb_jet_v2_postgres_SelectTable) FULL_JOIN(table postgres.ReadableTable, onCondition postgres.BoolExpression) postgres.ReadableTable {
	return W.WFULL_JOIN(table, onCondition)
}
func (W _github_com_switchupcb_jet_v2_postgres_SelectTable) INNER_JOIN(table postgres.ReadableTable, onCondition postgres.BoolExpression) postgres.ReadableTable {
	return W.WINNER_JOIN(table, onCondition)
}
func (W _github_com_switchupcb_jet_v2_postgres_SelectTable) LEFT_JOIN(table postgres.ReadableTable, onCondition postgres.BoolExpression) postgres.ReadableTable {
	return W.WLEFT_JOIN(table, onCondition)
}
func (W _github_com_switchupcb_jet_v2_postgres_SelectTable) RIGHT_JOIN(table postgres.ReadableTable, onCondition postgres.BoolExpression) postgres.ReadableTable {
	return W.WRIGHT_JOIN(table, onCondition)
}
func (W _github_com_switchupcb_jet_v2_postgres_SelectTable) SELECT(projection postgres.Projection, projections ...postgres.Projection) postgres.SelectStatement {
	return W.WSELECT(projection, projections...)
}

// _github_com_switchupcb_jet_v2_postgres_SetStatement is an interface wrapper for SetStatement type
type _github_com_switchupcb_jet_v2_postgres_SetStatement struct {
	IValue         interface{}
	WAS            func(alias string) jet.Projection
	WASC           func() jet.OrderByClause
	WAsTable       func(alias string) postgres.SelectTable
	WDESC          func() jet.OrderByClause
	WDebugSql      func() (query string)
	WEXCEPT        func(rhs postgres.SelectStatement) postgres.SetStatement
	WEXCEPT_ALL    func(rhs postgres.SelectStatement) postgres.SetStatement
	WExec          func(db qrm.Executable) (sql.Result, error)
	WExecContext   func(ctx context.Context, db qrm.Executable) (sql.Result, error)
	WIN            func(expressions ...jet.Expression) jet.BoolExpression
	WINTERSECT     func(rhs postgres.SelectStatement) postgres.SetStatement
	WINTERSECT_ALL func(rhs postgres.SelectStatement) postgres.SetStatement
	WIS_NOT_NULL   func() jet.BoolExpression
	WIS_NULL       func() jet.BoolExpression
	WLIMIT         func(limit int64) postgres.SetStatement
	WNOT_IN        func(expressions ...jet.Expression) jet.BoolExpression
	WNULLS_FIRST   func() jet.OrderByClause
	WNULLS_LAST    func() jet.OrderByClause
	WOFFSET        func(offset int64) postgres.SetStatement
	WOFFSET_e      func(offset postgres.IntegerExpression) postgres.SetStatement
	WORDER_BY      func(orderByClauses ...postgres.OrderByClause) postgres.SetStatement
	WQuery         func(db qrm.Queryable, destination interface{}) error
	WQueryContext  func(ctx context.Context, db qrm.Queryable, destination interface{}) error
	WRows          func(ctx context.Context, db qrm.Queryable) (*jet.Rows, error)
	WSql           func() (query string, args []interface{})
	WUNION         func(rhs postgres.SelectStatement) postgres.SetStatement
	WUNION_ALL     func(rhs postgres.SelectStatement) postgres.SetStatement
}

func (W _github_com_switchupcb_jet_v2_postgres_SetStatement) AS(alias string) jet.Projection {
	return W.WAS(alias)
}
func (W _github_com_switchupcb_jet_v2_postgres_SetStatement) ASC() jet.OrderByClause {
	return W.WASC()
}
func (W _github_com_switchupcb_jet_v2_postgres_SetStatement) AsTable(alias string) postgres.SelectTable {
	return W.WAsTable(alias)
}
func (W _github_com_switchupcb_jet_v2_postgres_SetStatement) DESC() jet.OrderByClause {
	return W.WDESC()
}
func (W _github_com_switchupcb_jet_v2_postgres_SetStatement) DebugSql() (query string) {
	return W.WDebugSql()
}
func (W _github_com_switchupcb_jet_v2_postgres_SetStatement) EXCEPT(rhs postgres.SelectStatement) postgres.SetStatement {
	return W.WEXCEPT(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_SetStatement) EXCEPT_ALL(rhs postgres.SelectStatement) postgres.SetStatement {
	return W.WEXCEPT_ALL(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_SetStatement) Exec(db qrm.Executable) (sql.Result, error) {
	return W.WExec(db)
}
func (W _github_com_switchupcb_jet_v2_postgres_SetStatement) ExecContext(ctx context.Context, db qrm.Executable) (sql.Result, error) {
	return W.WExecContext(ctx, db)
}
func (W _github_com_switchupcb_jet_v2_postgres_SetStatement) IN(expressions ...jet.Expression) jet.BoolExpression {
	return W.WIN(expressions...)
}
func (W _github_com_switchupcb_jet_v2_postgres_SetStatement) INTERSECT(rhs postgres.SelectStatement) postgres.SetStatement {
	return W.WINTERSECT(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_SetStatement) INTERSECT_ALL(rhs postgres.SelectStatement) postgres.SetStatement {
	return W.WINTERSECT_ALL(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_SetStatement) IS_NOT_NULL() jet.BoolExpression {
	return W.WIS_NOT_NULL()
}
func (W _github_com_switchupcb_jet_v2_postgres_SetStatement) IS_NULL() jet.BoolExpression {
	return W.WIS_NULL()
}
func (W _github_com_switchupcb_jet_v2_postgres_SetStatement) LIMIT(limit int64) postgres.SetStatement {
	return W.WLIMIT(limit)
}
func (W _github_com_switchupcb_jet_v2_postgres_SetStatement) NOT_IN(expressions ...jet.Expression) jet.BoolExpression {
	return W.WNOT_IN(expressions...)
}
func (W _github_com_switchupcb_jet_v2_postgres_SetStatement) NULLS_FIRST() jet.OrderByClause {
	return W.WNULLS_FIRST()
}
func (W _github_com_switchupcb_jet_v2_postgres_SetStatement) NULLS_LAST() jet.OrderByClause {
	return W.WNULLS_LAST()
}
func (W _github_com_switchupcb_jet_v2_postgres_SetStatement) OFFSET(offset int64) postgres.SetStatement {
	return W.WOFFSET(offset)
}
func (W _github_com_switchupcb_jet_v2_postgres_SetStatement) OFFSET_e(offset postgres.IntegerExpression) postgres.SetStatement {
	return W.WOFFSET_e(offset)
}
func (W _github_com_switchupcb_jet_v2_postgres_SetStatement) ORDER_BY(orderByClauses ...postgres.OrderByClause) postgres.SetStatement {
	return W.WORDER_BY(orderByClauses...)
}
func (W _github_com_switchupcb_jet_v2_postgres_SetStatement) Query(db qrm.Queryable, destination interface{}) error {
	return W.WQuery(db, destination)
}
func (W _github_com_switchupcb_jet_v2_postgres_SetStatement) QueryContext(ctx context.Context, db qrm.Queryable, destination interface{}) error {
	return W.WQueryContext(ctx, db, destination)
}
func (W _github_com_switchupcb_jet_v2_postgres_SetStatement) Rows(ctx context.Context, db qrm.Queryable) (*jet.Rows, error) {
	return W.WRows(ctx, db)
}
func (W _github_com_switchupcb_jet_v2_postgres_SetStatement) Sql() (query string, args []interface{}) {
	return W.WSql()
}
func (W _github_com_switchupcb_jet_v2_postgres_SetStatement) UNION(rhs postgres.SelectStatement) postgres.SetStatement {
	return W.WUNION(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_SetStatement) UNION_ALL(rhs postgres.SelectStatement) postgres.SetStatement {
	return W.WUNION_ALL(rhs)
}

// _github_com_switchupcb_jet_v2_postgres_Statement is an interface wrapper for Statement type
type _github_com_switchupcb_jet_v2_postgres_Statement struct {
	IValue        interface{}
	WDebugSql     func() (query string)
	WExec         func(db qrm.Executable) (sql.Result, error)
	WExecContext  func(ctx context.Context, db qrm.Executable) (sql.Result, error)
	WQuery        func(db qrm.Queryable, destination interface{}) error
	WQueryContext func(ctx context.Context, db qrm.Queryable, destination interface{}) error
	WRows         func(ctx context.Context, db qrm.Queryable) (*jet.Rows, error)
	WSql          func() (query string, args []interface{})
}

func (W _github_com_switchupcb_jet_v2_postgres_Statement) DebugSql() (query string) {
	return W.WDebugSql()
}
func (W _github_com_switchupcb_jet_v2_postgres_Statement) Exec(db qrm.Executable) (sql.Result, error) {
	return W.WExec(db)
}
func (W _github_com_switchupcb_jet_v2_postgres_Statement) ExecContext(ctx context.Context, db qrm.Executable) (sql.Result, error) {
	return W.WExecContext(ctx, db)
}
func (W _github_com_switchupcb_jet_v2_postgres_Statement) Query(db qrm.Queryable, destination interface{}) error {
	return W.WQuery(db, destination)
}
func (W _github_com_switchupcb_jet_v2_postgres_Statement) QueryContext(ctx context.Context, db qrm.Queryable, destination interface{}) error {
	return W.WQueryContext(ctx, db, destination)
}
func (W _github_com_switchupcb_jet_v2_postgres_Statement) Rows(ctx context.Context, db qrm.Queryable) (*jet.Rows, error) {
	return W.WRows(ctx, db)
}
func (W _github_com_switchupcb_jet_v2_postgres_Statement) Sql() (query string, args []interface{}) {
	return W.WSql()
}

// _github_com_switchupcb_jet_v2_postgres_StringExpression is an interface wrapper for StringExpression type
type _github_com_switchupcb_jet_v2_postgres_StringExpression struct {
	IValue                interface{}
	WAS                   func(alias string) jet.Projection
	WASC                  func() jet.OrderByClause
	WBETWEEN              func(min jet.StringExpression, max jet.StringExpression) jet.BoolExpression
	WCONCAT               func(rhs jet.Expression) jet.StringExpression
	WDESC                 func() jet.OrderByClause
	WEQ                   func(rhs jet.StringExpression) jet.BoolExpression
	WGT                   func(rhs jet.StringExpression) jet.BoolExpression
	WGT_EQ                func(rhs jet.StringExpression) jet.BoolExpression
	WIN                   func(expressions ...jet.Expression) jet.BoolExpression
	WIS_DISTINCT_FROM     func(rhs jet.StringExpression) jet.BoolExpression
	WIS_NOT_DISTINCT_FROM func(rhs jet.StringExpression) jet.BoolExpression
	WIS_NOT_NULL          func() jet.BoolExpression
	WIS_NULL              func() jet.BoolExpression
	WLIKE                 func(pattern jet.StringExpression) jet.BoolExpression
	WLT                   func(rhs jet.StringExpression) jet.BoolExpression
	WLT_EQ                func(rhs jet.StringExpression) jet.BoolExpression
	WNOT_BETWEEN          func(min jet.StringExpression, max jet.StringExpression) jet.BoolExpression
	WNOT_EQ               func(rhs jet.StringExpression) jet.BoolExpression
	WNOT_IN               func(expressions ...jet.Expression) jet.BoolExpression
	WNOT_LIKE             func(pattern jet.StringExpression) jet.BoolExpression
	WNOT_REGEXP_LIKE      func(pattern jet.StringExpression, caseSensitive ...bool) jet.BoolExpression
	WNULLS_FIRST          func() jet.OrderByClause
	WNULLS_LAST           func() jet.OrderByClause
	WREGEXP_LIKE          func(pattern jet.StringExpression, caseSensitive ...bool) jet.BoolExpression
}

func (W _github_com_switchupcb_jet_v2_postgres_StringExpression) AS(alias string) jet.Projection {
	return W.WAS(alias)
}
func (W _github_com_switchupcb_jet_v2_postgres_StringExpression) ASC() jet.OrderByClause {
	return W.WASC()
}
func (W _github_com_switchupcb_jet_v2_postgres_StringExpression) BETWEEN(min jet.StringExpression, max jet.StringExpression) jet.BoolExpression {
	return W.WBETWEEN(min, max)
}
func (W _github_com_switchupcb_jet_v2_postgres_StringExpression) CONCAT(rhs jet.Expression) jet.StringExpression {
	return W.WCONCAT(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_StringExpression) DESC() jet.OrderByClause {
	return W.WDESC()
}
func (W _github_com_switchupcb_jet_v2_postgres_StringExpression) EQ(rhs jet.StringExpression) jet.BoolExpression {
	return W.WEQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_StringExpression) GT(rhs jet.StringExpression) jet.BoolExpression {
	return W.WGT(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_StringExpression) GT_EQ(rhs jet.StringExpression) jet.BoolExpression {
	return W.WGT_EQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_StringExpression) IN(expressions ...jet.Expression) jet.BoolExpression {
	return W.WIN(expressions...)
}
func (W _github_com_switchupcb_jet_v2_postgres_StringExpression) IS_DISTINCT_FROM(rhs jet.StringExpression) jet.BoolExpression {
	return W.WIS_DISTINCT_FROM(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_StringExpression) IS_NOT_DISTINCT_FROM(rhs jet.StringExpression) jet.BoolExpression {
	return W.WIS_NOT_DISTINCT_FROM(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_StringExpression) IS_NOT_NULL() jet.BoolExpression {
	return W.WIS_NOT_NULL()
}
func (W _github_com_switchupcb_jet_v2_postgres_StringExpression) IS_NULL() jet.BoolExpression {
	return W.WIS_NULL()
}
func (W _github_com_switchupcb_jet_v2_postgres_StringExpression) LIKE(pattern jet.StringExpression) jet.BoolExpression {
	return W.WLIKE(pattern)
}
func (W _github_com_switchupcb_jet_v2_postgres_StringExpression) LT(rhs jet.StringExpression) jet.BoolExpression {
	return W.WLT(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_StringExpression) LT_EQ(rhs jet.StringExpression) jet.BoolExpression {
	return W.WLT_EQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_StringExpression) NOT_BETWEEN(min jet.StringExpression, max jet.StringExpression) jet.BoolExpression {
	return W.WNOT_BETWEEN(min, max)
}
func (W _github_com_switchupcb_jet_v2_postgres_StringExpression) NOT_EQ(rhs jet.StringExpression) jet.BoolExpression {
	return W.WNOT_EQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_StringExpression) NOT_IN(expressions ...jet.Expression) jet.BoolExpression {
	return W.WNOT_IN(expressions...)
}
func (W _github_com_switchupcb_jet_v2_postgres_StringExpression) NOT_LIKE(pattern jet.StringExpression) jet.BoolExpression {
	return W.WNOT_LIKE(pattern)
}
func (W _github_com_switchupcb_jet_v2_postgres_StringExpression) NOT_REGEXP_LIKE(pattern jet.StringExpression, caseSensitive ...bool) jet.BoolExpression {
	return W.WNOT_REGEXP_LIKE(pattern, caseSensitive...)
}
func (W _github_com_switchupcb_jet_v2_postgres_StringExpression) NULLS_FIRST() jet.OrderByClause {
	return W.WNULLS_FIRST()
}
func (W _github_com_switchupcb_jet_v2_postgres_StringExpression) NULLS_LAST() jet.OrderByClause {
	return W.WNULLS_LAST()
}
func (W _github_com_switchupcb_jet_v2_postgres_StringExpression) REGEXP_LIKE(pattern jet.StringExpression, caseSensitive ...bool) jet.BoolExpression {
	return W.WREGEXP_LIKE(pattern, caseSensitive...)
}

// _github_com_switchupcb_jet_v2_postgres_Table is an interface wrapper for Table type
type _github_com_switchupcb_jet_v2_postgres_Table struct {
	IValue      interface{}
	WAlias      func() string
	WCROSS_JOIN func(table postgres.ReadableTable) postgres.ReadableTable
	WDELETE     func() postgres.DeleteStatement
	WFULL_JOIN  func(table postgres.ReadableTable, onCondition postgres.BoolExpression) postgres.ReadableTable
	WINNER_JOIN func(table postgres.ReadableTable, onCondition postgres.BoolExpression) postgres.ReadableTable
	WINSERT     func(columns ...jet.Column) postgres.InsertStatement
	WLEFT_JOIN  func(table postgres.ReadableTable, onCondition postgres.BoolExpression) postgres.ReadableTable
	WLOCK       func() postgres.LockStatement
	WRIGHT_JOIN func(table postgres.ReadableTable, onCondition postgres.BoolExpression) postgres.ReadableTable
	WSELECT     func(projection postgres.Projection, projections ...postgres.Projection) postgres.SelectStatement
	WSchemaName func() string
	WTableName  func() string
	WUPDATE     func(columns ...jet.Column) postgres.UpdateStatement
}

func (W _github_com_switchupcb_jet_v2_postgres_Table) Alias() string {
	return W.WAlias()
}
func (W _github_com_switchupcb_jet_v2_postgres_Table) CROSS_JOIN(table postgres.ReadableTable) postgres.ReadableTable {
	return W.WCROSS_JOIN(table)
}
func (W _github_com_switchupcb_jet_v2_postgres_Table) DELETE() postgres.DeleteStatement {
	return W.WDELETE()
}
func (W _github_com_switchupcb_jet_v2_postgres_Table) FULL_JOIN(table postgres.ReadableTable, onCondition postgres.BoolExpression) postgres.ReadableTable {
	return W.WFULL_JOIN(table, onCondition)
}
func (W _github_com_switchupcb_jet_v2_postgres_Table) INNER_JOIN(table postgres.ReadableTable, onCondition postgres.BoolExpression) postgres.ReadableTable {
	return W.WINNER_JOIN(table, onCondition)
}
func (W _github_com_switchupcb_jet_v2_postgres_Table) INSERT(columns ...jet.Column) postgres.InsertStatement {
	return W.WINSERT(columns...)
}
func (W _github_com_switchupcb_jet_v2_postgres_Table) LEFT_JOIN(table postgres.ReadableTable, onCondition postgres.BoolExpression) postgres.ReadableTable {
	return W.WLEFT_JOIN(table, onCondition)
}
func (W _github_com_switchupcb_jet_v2_postgres_Table) LOCK() postgres.LockStatement {
	return W.WLOCK()
}
func (W _github_com_switchupcb_jet_v2_postgres_Table) RIGHT_JOIN(table postgres.ReadableTable, onCondition postgres.BoolExpression) postgres.ReadableTable {
	return W.WRIGHT_JOIN(table, onCondition)
}
func (W _github_com_switchupcb_jet_v2_postgres_Table) SELECT(projection postgres.Projection, projections ...postgres.Projection) postgres.SelectStatement {
	return W.WSELECT(projection, projections...)
}
func (W _github_com_switchupcb_jet_v2_postgres_Table) SchemaName() string {
	return W.WSchemaName()
}
func (W _github_com_switchupcb_jet_v2_postgres_Table) TableName() string {
	return W.WTableName()
}
func (W _github_com_switchupcb_jet_v2_postgres_Table) UPDATE(columns ...jet.Column) postgres.UpdateStatement {
	return W.WUPDATE(columns...)
}

// _github_com_switchupcb_jet_v2_postgres_TimeExpression is an interface wrapper for TimeExpression type
type _github_com_switchupcb_jet_v2_postgres_TimeExpression struct {
	IValue                interface{}
	WADD                  func(rhs jet.Interval) jet.TimeExpression
	WAS                   func(alias string) jet.Projection
	WASC                  func() jet.OrderByClause
	WBETWEEN              func(min jet.TimeExpression, max jet.TimeExpression) jet.BoolExpression
	WDESC                 func() jet.OrderByClause
	WEQ                   func(rhs jet.TimeExpression) jet.BoolExpression
	WGT                   func(rhs jet.TimeExpression) jet.BoolExpression
	WGT_EQ                func(rhs jet.TimeExpression) jet.BoolExpression
	WIN                   func(expressions ...jet.Expression) jet.BoolExpression
	WIS_DISTINCT_FROM     func(rhs jet.TimeExpression) jet.BoolExpression
	WIS_NOT_DISTINCT_FROM func(rhs jet.TimeExpression) jet.BoolExpression
	WIS_NOT_NULL          func() jet.BoolExpression
	WIS_NULL              func() jet.BoolExpression
	WLT                   func(rhs jet.TimeExpression) jet.BoolExpression
	WLT_EQ                func(rhs jet.TimeExpression) jet.BoolExpression
	WNOT_BETWEEN          func(min jet.TimeExpression, max jet.TimeExpression) jet.BoolExpression
	WNOT_EQ               func(rhs jet.TimeExpression) jet.BoolExpression
	WNOT_IN               func(expressions ...jet.Expression) jet.BoolExpression
	WNULLS_FIRST          func() jet.OrderByClause
	WNULLS_LAST           func() jet.OrderByClause
	WSUB                  func(rhs jet.Interval) jet.TimeExpression
}

func (W _github_com_switchupcb_jet_v2_postgres_TimeExpression) ADD(rhs jet.Interval) jet.TimeExpression {
	return W.WADD(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_TimeExpression) AS(alias string) jet.Projection {
	return W.WAS(alias)
}
func (W _github_com_switchupcb_jet_v2_postgres_TimeExpression) ASC() jet.OrderByClause {
	return W.WASC()
}
func (W _github_com_switchupcb_jet_v2_postgres_TimeExpression) BETWEEN(min jet.TimeExpression, max jet.TimeExpression) jet.BoolExpression {
	return W.WBETWEEN(min, max)
}
func (W _github_com_switchupcb_jet_v2_postgres_TimeExpression) DESC() jet.OrderByClause {
	return W.WDESC()
}
func (W _github_com_switchupcb_jet_v2_postgres_TimeExpression) EQ(rhs jet.TimeExpression) jet.BoolExpression {
	return W.WEQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_TimeExpression) GT(rhs jet.TimeExpression) jet.BoolExpression {
	return W.WGT(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_TimeExpression) GT_EQ(rhs jet.TimeExpression) jet.BoolExpression {
	return W.WGT_EQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_TimeExpression) IN(expressions ...jet.Expression) jet.BoolExpression {
	return W.WIN(expressions...)
}
func (W _github_com_switchupcb_jet_v2_postgres_TimeExpression) IS_DISTINCT_FROM(rhs jet.TimeExpression) jet.BoolExpression {
	return W.WIS_DISTINCT_FROM(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_TimeExpression) IS_NOT_DISTINCT_FROM(rhs jet.TimeExpression) jet.BoolExpression {
	return W.WIS_NOT_DISTINCT_FROM(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_TimeExpression) IS_NOT_NULL() jet.BoolExpression {
	return W.WIS_NOT_NULL()
}
func (W _github_com_switchupcb_jet_v2_postgres_TimeExpression) IS_NULL() jet.BoolExpression {
	return W.WIS_NULL()
}
func (W _github_com_switchupcb_jet_v2_postgres_TimeExpression) LT(rhs jet.TimeExpression) jet.BoolExpression {
	return W.WLT(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_TimeExpression) LT_EQ(rhs jet.TimeExpression) jet.BoolExpression {
	return W.WLT_EQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_TimeExpression) NOT_BETWEEN(min jet.TimeExpression, max jet.TimeExpression) jet.BoolExpression {
	return W.WNOT_BETWEEN(min, max)
}
func (W _github_com_switchupcb_jet_v2_postgres_TimeExpression) NOT_EQ(rhs jet.TimeExpression) jet.BoolExpression {
	return W.WNOT_EQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_TimeExpression) NOT_IN(expressions ...jet.Expression) jet.BoolExpression {
	return W.WNOT_IN(expressions...)
}
func (W _github_com_switchupcb_jet_v2_postgres_TimeExpression) NULLS_FIRST() jet.OrderByClause {
	return W.WNULLS_FIRST()
}
func (W _github_com_switchupcb_jet_v2_postgres_TimeExpression) NULLS_LAST() jet.OrderByClause {
	return W.WNULLS_LAST()
}
func (W _github_com_switchupcb_jet_v2_postgres_TimeExpression) SUB(rhs jet.Interval) jet.TimeExpression {
	return W.WSUB(rhs)
}

// _github_com_switchupcb_jet_v2_postgres_TimestampExpression is an interface wrapper for TimestampExpression type
type _github_com_switchupcb_jet_v2_postgres_TimestampExpression struct {
	IValue                interface{}
	WADD                  func(rhs jet.Interval) jet.TimestampExpression
	WAS                   func(alias string) jet.Projection
	WASC                  func() jet.OrderByClause
	WBETWEEN              func(min jet.TimestampExpression, max jet.TimestampExpression) jet.BoolExpression
	WDESC                 func() jet.OrderByClause
	WEQ                   func(rhs jet.TimestampExpression) jet.BoolExpression
	WGT                   func(rhs jet.TimestampExpression) jet.BoolExpression
	WGT_EQ                func(rhs jet.TimestampExpression) jet.BoolExpression
	WIN                   func(expressions ...jet.Expression) jet.BoolExpression
	WIS_DISTINCT_FROM     func(rhs jet.TimestampExpression) jet.BoolExpression
	WIS_NOT_DISTINCT_FROM func(rhs jet.TimestampExpression) jet.BoolExpression
	WIS_NOT_NULL          func() jet.BoolExpression
	WIS_NULL              func() jet.BoolExpression
	WLT                   func(rhs jet.TimestampExpression) jet.BoolExpression
	WLT_EQ                func(rhs jet.TimestampExpression) jet.BoolExpression
	WNOT_BETWEEN          func(min jet.TimestampExpression, max jet.TimestampExpression) jet.BoolExpression
	WNOT_EQ               func(rhs jet.TimestampExpression) jet.BoolExpression
	WNOT_IN               func(expressions ...jet.Expression) jet.BoolExpression
	WNULLS_FIRST          func() jet.OrderByClause
	WNULLS_LAST           func() jet.OrderByClause
	WSUB                  func(rhs jet.Interval) jet.TimestampExpression
}

func (W _github_com_switchupcb_jet_v2_postgres_TimestampExpression) ADD(rhs jet.Interval) jet.TimestampExpression {
	return W.WADD(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_TimestampExpression) AS(alias string) jet.Projection {
	return W.WAS(alias)
}
func (W _github_com_switchupcb_jet_v2_postgres_TimestampExpression) ASC() jet.OrderByClause {
	return W.WASC()
}
func (W _github_com_switchupcb_jet_v2_postgres_TimestampExpression) BETWEEN(min jet.TimestampExpression, max jet.TimestampExpression) jet.BoolExpression {
	return W.WBETWEEN(min, max)
}
func (W _github_com_switchupcb_jet_v2_postgres_TimestampExpression) DESC() jet.OrderByClause {
	return W.WDESC()
}
func (W _github_com_switchupcb_jet_v2_postgres_TimestampExpression) EQ(rhs jet.TimestampExpression) jet.BoolExpression {
	return W.WEQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_TimestampExpression) GT(rhs jet.TimestampExpression) jet.BoolExpression {
	return W.WGT(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_TimestampExpression) GT_EQ(rhs jet.TimestampExpression) jet.BoolExpression {
	return W.WGT_EQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_TimestampExpression) IN(expressions ...jet.Expression) jet.BoolExpression {
	return W.WIN(expressions...)
}
func (W _github_com_switchupcb_jet_v2_postgres_TimestampExpression) IS_DISTINCT_FROM(rhs jet.TimestampExpression) jet.BoolExpression {
	return W.WIS_DISTINCT_FROM(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_TimestampExpression) IS_NOT_DISTINCT_FROM(rhs jet.TimestampExpression) jet.BoolExpression {
	return W.WIS_NOT_DISTINCT_FROM(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_TimestampExpression) IS_NOT_NULL() jet.BoolExpression {
	return W.WIS_NOT_NULL()
}
func (W _github_com_switchupcb_jet_v2_postgres_TimestampExpression) IS_NULL() jet.BoolExpression {
	return W.WIS_NULL()
}
func (W _github_com_switchupcb_jet_v2_postgres_TimestampExpression) LT(rhs jet.TimestampExpression) jet.BoolExpression {
	return W.WLT(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_TimestampExpression) LT_EQ(rhs jet.TimestampExpression) jet.BoolExpression {
	return W.WLT_EQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_TimestampExpression) NOT_BETWEEN(min jet.TimestampExpression, max jet.TimestampExpression) jet.BoolExpression {
	return W.WNOT_BETWEEN(min, max)
}
func (W _github_com_switchupcb_jet_v2_postgres_TimestampExpression) NOT_EQ(rhs jet.TimestampExpression) jet.BoolExpression {
	return W.WNOT_EQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_TimestampExpression) NOT_IN(expressions ...jet.Expression) jet.BoolExpression {
	return W.WNOT_IN(expressions...)
}
func (W _github_com_switchupcb_jet_v2_postgres_TimestampExpression) NULLS_FIRST() jet.OrderByClause {
	return W.WNULLS_FIRST()
}
func (W _github_com_switchupcb_jet_v2_postgres_TimestampExpression) NULLS_LAST() jet.OrderByClause {
	return W.WNULLS_LAST()
}
func (W _github_com_switchupcb_jet_v2_postgres_TimestampExpression) SUB(rhs jet.Interval) jet.TimestampExpression {
	return W.WSUB(rhs)
}

// _github_com_switchupcb_jet_v2_postgres_TimestampRange is an interface wrapper for TimestampRange type
type _github_com_switchupcb_jet_v2_postgres_TimestampRange struct {
	IValue          interface{}
	WAS             func(alias string) jet.Projection
	WASC            func() jet.OrderByClause
	WCONTAINS       func(rhs postgres.TimestampExpression) jet.BoolExpression
	WCONTAINS_RANGE func(rhs jet.Range[postgres.TimestampExpression]) jet.BoolExpression
	WDESC           func() jet.OrderByClause
	WDIFFERENCE     func(rhs jet.Range[postgres.TimestampExpression]) jet.Range[postgres.TimestampExpression]
	WEQ             func(rhs jet.Range[postgres.TimestampExpression]) jet.BoolExpression
	WGT             func(rhs jet.Range[postgres.TimestampExpression]) jet.BoolExpression
	WGT_EQ          func(rhs jet.Range[postgres.TimestampExpression]) jet.BoolExpression
	WIN             func(expressions ...jet.Expression) jet.BoolExpression
	WINTERSECTION   func(rhs jet.Range[postgres.TimestampExpression]) jet.Range[postgres.TimestampExpression]
	WIS_EMPTY       func() jet.BoolExpression
	WIS_NOT_NULL    func() jet.BoolExpression
	WIS_NULL        func() jet.BoolExpression
	WLOWER_BOUND    func() postgres.TimestampExpression
	WLOWER_INC      func() jet.BoolExpression
	WLOWER_INF      func() jet.BoolExpression
	WLT             func(rhs jet.Range[postgres.TimestampExpression]) jet.BoolExpression
	WLT_EQ          func(rhs jet.Range[postgres.TimestampExpression]) jet.BoolExpression
	WNOT_EQ         func(rhs jet.Range[postgres.TimestampExpression]) jet.BoolExpression
	WNOT_IN         func(expressions ...jet.Expression) jet.BoolExpression
	WNULLS_FIRST    func() jet.OrderByClause
	WNULLS_LAST     func() jet.OrderByClause
	WOVERLAP        func(rhs jet.Range[postgres.TimestampExpression]) jet.BoolExpression
	WUNION          func(rhs jet.Range[postgres.TimestampExpression]) jet.Range[postgres.TimestampExpression]
	WUPPER_BOUND    func() postgres.TimestampExpression
	WUPPER_INC      func() jet.BoolExpression
	WUPPER_INF      func() jet.BoolExpression
}

func (W _github_com_switchupcb_jet_v2_postgres_TimestampRange) AS(alias string) jet.Projection {
	return W.WAS(alias)
}
func (W _github_com_switchupcb_jet_v2_postgres_TimestampRange) ASC() jet.OrderByClause {
	return W.WASC()
}
func (W _github_com_switchupcb_jet_v2_postgres_TimestampRange) CONTAINS(rhs postgres.TimestampExpression) jet.BoolExpression {
	return W.WCONTAINS(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_TimestampRange) CONTAINS_RANGE(rhs jet.Range[postgres.TimestampExpression]) jet.BoolExpression {
	return W.WCONTAINS_RANGE(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_TimestampRange) DESC() jet.OrderByClause {
	return W.WDESC()
}
func (W _github_com_switchupcb_jet_v2_postgres_TimestampRange) DIFFERENCE(rhs jet.Range[postgres.TimestampExpression]) jet.Range[postgres.TimestampExpression] {
	return W.WDIFFERENCE(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_TimestampRange) EQ(rhs jet.Range[postgres.TimestampExpression]) jet.BoolExpression {
	return W.WEQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_TimestampRange) GT(rhs jet.Range[postgres.TimestampExpression]) jet.BoolExpression {
	return W.WGT(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_TimestampRange) GT_EQ(rhs jet.Range[postgres.TimestampExpression]) jet.BoolExpression {
	return W.WGT_EQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_TimestampRange) IN(expressions ...jet.Expression) jet.BoolExpression {
	return W.WIN(expressions...)
}
func (W _github_com_switchupcb_jet_v2_postgres_TimestampRange) INTERSECTION(rhs jet.Range[postgres.TimestampExpression]) jet.Range[postgres.TimestampExpression] {
	return W.WINTERSECTION(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_TimestampRange) IS_EMPTY() jet.BoolExpression {
	return W.WIS_EMPTY()
}
func (W _github_com_switchupcb_jet_v2_postgres_TimestampRange) IS_NOT_NULL() jet.BoolExpression {
	return W.WIS_NOT_NULL()
}
func (W _github_com_switchupcb_jet_v2_postgres_TimestampRange) IS_NULL() jet.BoolExpression {
	return W.WIS_NULL()
}
func (W _github_com_switchupcb_jet_v2_postgres_TimestampRange) LOWER_BOUND() postgres.TimestampExpression {
	return W.WLOWER_BOUND()
}
func (W _github_com_switchupcb_jet_v2_postgres_TimestampRange) LOWER_INC() jet.BoolExpression {
	return W.WLOWER_INC()
}
func (W _github_com_switchupcb_jet_v2_postgres_TimestampRange) LOWER_INF() jet.BoolExpression {
	return W.WLOWER_INF()
}
func (W _github_com_switchupcb_jet_v2_postgres_TimestampRange) LT(rhs jet.Range[postgres.TimestampExpression]) jet.BoolExpression {
	return W.WLT(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_TimestampRange) LT_EQ(rhs jet.Range[postgres.TimestampExpression]) jet.BoolExpression {
	return W.WLT_EQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_TimestampRange) NOT_EQ(rhs jet.Range[postgres.TimestampExpression]) jet.BoolExpression {
	return W.WNOT_EQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_TimestampRange) NOT_IN(expressions ...jet.Expression) jet.BoolExpression {
	return W.WNOT_IN(expressions...)
}
func (W _github_com_switchupcb_jet_v2_postgres_TimestampRange) NULLS_FIRST() jet.OrderByClause {
	return W.WNULLS_FIRST()
}
func (W _github_com_switchupcb_jet_v2_postgres_TimestampRange) NULLS_LAST() jet.OrderByClause {
	return W.WNULLS_LAST()
}
func (W _github_com_switchupcb_jet_v2_postgres_TimestampRange) OVERLAP(rhs jet.Range[postgres.TimestampExpression]) jet.BoolExpression {
	return W.WOVERLAP(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_TimestampRange) UNION(rhs jet.Range[postgres.TimestampExpression]) jet.Range[postgres.TimestampExpression] {
	return W.WUNION(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_TimestampRange) UPPER_BOUND() postgres.TimestampExpression {
	return W.WUPPER_BOUND()
}
func (W _github_com_switchupcb_jet_v2_postgres_TimestampRange) UPPER_INC() jet.BoolExpression {
	return W.WUPPER_INC()
}
func (W _github_com_switchupcb_jet_v2_postgres_TimestampRange) UPPER_INF() jet.BoolExpression {
	return W.WUPPER_INF()
}

// _github_com_switchupcb_jet_v2_postgres_TimestampzExpression is an interface wrapper for TimestampzExpression type
type _github_com_switchupcb_jet_v2_postgres_TimestampzExpression struct {
	IValue                interface{}
	WADD                  func(rhs jet.Interval) jet.TimestampzExpression
	WAS                   func(alias string) jet.Projection
	WASC                  func() jet.OrderByClause
	WBETWEEN              func(min jet.TimestampzExpression, max jet.TimestampzExpression) jet.BoolExpression
	WDESC                 func() jet.OrderByClause
	WEQ                   func(rhs jet.TimestampzExpression) jet.BoolExpression
	WGT                   func(rhs jet.TimestampzExpression) jet.BoolExpression
	WGT_EQ                func(rhs jet.TimestampzExpression) jet.BoolExpression
	WIN                   func(expressions ...jet.Expression) jet.BoolExpression
	WIS_DISTINCT_FROM     func(rhs jet.TimestampzExpression) jet.BoolExpression
	WIS_NOT_DISTINCT_FROM func(rhs jet.TimestampzExpression) jet.BoolExpression
	WIS_NOT_NULL          func() jet.BoolExpression
	WIS_NULL              func() jet.BoolExpression
	WLT                   func(rhs jet.TimestampzExpression) jet.BoolExpression
	WLT_EQ                func(rhs jet.TimestampzExpression) jet.BoolExpression
	WNOT_BETWEEN          func(min jet.TimestampzExpression, max jet.TimestampzExpression) jet.BoolExpression
	WNOT_EQ               func(rhs jet.TimestampzExpression) jet.BoolExpression
	WNOT_IN               func(expressions ...jet.Expression) jet.BoolExpression
	WNULLS_FIRST          func() jet.OrderByClause
	WNULLS_LAST           func() jet.OrderByClause
	WSUB                  func(rhs jet.Interval) jet.TimestampzExpression
}

func (W _github_com_switchupcb_jet_v2_postgres_TimestampzExpression) ADD(rhs jet.Interval) jet.TimestampzExpression {
	return W.WADD(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_TimestampzExpression) AS(alias string) jet.Projection {
	return W.WAS(alias)
}
func (W _github_com_switchupcb_jet_v2_postgres_TimestampzExpression) ASC() jet.OrderByClause {
	return W.WASC()
}
func (W _github_com_switchupcb_jet_v2_postgres_TimestampzExpression) BETWEEN(min jet.TimestampzExpression, max jet.TimestampzExpression) jet.BoolExpression {
	return W.WBETWEEN(min, max)
}
func (W _github_com_switchupcb_jet_v2_postgres_TimestampzExpression) DESC() jet.OrderByClause {
	return W.WDESC()
}
func (W _github_com_switchupcb_jet_v2_postgres_TimestampzExpression) EQ(rhs jet.TimestampzExpression) jet.BoolExpression {
	return W.WEQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_TimestampzExpression) GT(rhs jet.TimestampzExpression) jet.BoolExpression {
	return W.WGT(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_TimestampzExpression) GT_EQ(rhs jet.TimestampzExpression) jet.BoolExpression {
	return W.WGT_EQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_TimestampzExpression) IN(expressions ...jet.Expression) jet.BoolExpression {
	return W.WIN(expressions...)
}
func (W _github_com_switchupcb_jet_v2_postgres_TimestampzExpression) IS_DISTINCT_FROM(rhs jet.TimestampzExpression) jet.BoolExpression {
	return W.WIS_DISTINCT_FROM(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_TimestampzExpression) IS_NOT_DISTINCT_FROM(rhs jet.TimestampzExpression) jet.BoolExpression {
	return W.WIS_NOT_DISTINCT_FROM(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_TimestampzExpression) IS_NOT_NULL() jet.BoolExpression {
	return W.WIS_NOT_NULL()
}
func (W _github_com_switchupcb_jet_v2_postgres_TimestampzExpression) IS_NULL() jet.BoolExpression {
	return W.WIS_NULL()
}
func (W _github_com_switchupcb_jet_v2_postgres_TimestampzExpression) LT(rhs jet.TimestampzExpression) jet.BoolExpression {
	return W.WLT(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_TimestampzExpression) LT_EQ(rhs jet.TimestampzExpression) jet.BoolExpression {
	return W.WLT_EQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_TimestampzExpression) NOT_BETWEEN(min jet.TimestampzExpression, max jet.TimestampzExpression) jet.BoolExpression {
	return W.WNOT_BETWEEN(min, max)
}
func (W _github_com_switchupcb_jet_v2_postgres_TimestampzExpression) NOT_EQ(rhs jet.TimestampzExpression) jet.BoolExpression {
	return W.WNOT_EQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_TimestampzExpression) NOT_IN(expressions ...jet.Expression) jet.BoolExpression {
	return W.WNOT_IN(expressions...)
}
func (W _github_com_switchupcb_jet_v2_postgres_TimestampzExpression) NULLS_FIRST() jet.OrderByClause {
	return W.WNULLS_FIRST()
}
func (W _github_com_switchupcb_jet_v2_postgres_TimestampzExpression) NULLS_LAST() jet.OrderByClause {
	return W.WNULLS_LAST()
}
func (W _github_com_switchupcb_jet_v2_postgres_TimestampzExpression) SUB(rhs jet.Interval) jet.TimestampzExpression {
	return W.WSUB(rhs)
}

// _github_com_switchupcb_jet_v2_postgres_TimestampzRange is an interface wrapper for TimestampzRange type
type _github_com_switchupcb_jet_v2_postgres_TimestampzRange struct {
	IValue          interface{}
	WAS             func(alias string) jet.Projection
	WASC            func() jet.OrderByClause
	WCONTAINS       func(rhs postgres.TimestampzExpression) jet.BoolExpression
	WCONTAINS_RANGE func(rhs jet.Range[postgres.TimestampzExpression]) jet.BoolExpression
	WDESC           func() jet.OrderByClause
	WDIFFERENCE     func(rhs jet.Range[postgres.TimestampzExpression]) jet.Range[postgres.TimestampzExpression]
	WEQ             func(rhs jet.Range[postgres.TimestampzExpression]) jet.BoolExpression
	WGT             func(rhs jet.Range[postgres.TimestampzExpression]) jet.BoolExpression
	WGT_EQ          func(rhs jet.Range[postgres.TimestampzExpression]) jet.BoolExpression
	WIN             func(expressions ...jet.Expression) jet.BoolExpression
	WINTERSECTION   func(rhs jet.Range[postgres.TimestampzExpression]) jet.Range[postgres.TimestampzExpression]
	WIS_EMPTY       func() jet.BoolExpression
	WIS_NOT_NULL    func() jet.BoolExpression
	WIS_NULL        func() jet.BoolExpression
	WLOWER_BOUND    func() postgres.TimestampzExpression
	WLOWER_INC      func() jet.BoolExpression
	WLOWER_INF      func() jet.BoolExpression
	WLT             func(rhs jet.Range[postgres.TimestampzExpression]) jet.BoolExpression
	WLT_EQ          func(rhs jet.Range[postgres.TimestampzExpression]) jet.BoolExpression
	WNOT_EQ         func(rhs jet.Range[postgres.TimestampzExpression]) jet.BoolExpression
	WNOT_IN         func(expressions ...jet.Expression) jet.BoolExpression
	WNULLS_FIRST    func() jet.OrderByClause
	WNULLS_LAST     func() jet.OrderByClause
	WOVERLAP        func(rhs jet.Range[postgres.TimestampzExpression]) jet.BoolExpression
	WUNION          func(rhs jet.Range[postgres.TimestampzExpression]) jet.Range[postgres.TimestampzExpression]
	WUPPER_BOUND    func() postgres.TimestampzExpression
	WUPPER_INC      func() jet.BoolExpression
	WUPPER_INF      func() jet.BoolExpression
}

func (W _github_com_switchupcb_jet_v2_postgres_TimestampzRange) AS(alias string) jet.Projection {
	return W.WAS(alias)
}
func (W _github_com_switchupcb_jet_v2_postgres_TimestampzRange) ASC() jet.OrderByClause {
	return W.WASC()
}
func (W _github_com_switchupcb_jet_v2_postgres_TimestampzRange) CONTAINS(rhs postgres.TimestampzExpression) jet.BoolExpression {
	return W.WCONTAINS(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_TimestampzRange) CONTAINS_RANGE(rhs jet.Range[postgres.TimestampzExpression]) jet.BoolExpression {
	return W.WCONTAINS_RANGE(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_TimestampzRange) DESC() jet.OrderByClause {
	return W.WDESC()
}
func (W _github_com_switchupcb_jet_v2_postgres_TimestampzRange) DIFFERENCE(rhs jet.Range[postgres.TimestampzExpression]) jet.Range[postgres.TimestampzExpression] {
	return W.WDIFFERENCE(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_TimestampzRange) EQ(rhs jet.Range[postgres.TimestampzExpression]) jet.BoolExpression {
	return W.WEQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_TimestampzRange) GT(rhs jet.Range[postgres.TimestampzExpression]) jet.BoolExpression {
	return W.WGT(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_TimestampzRange) GT_EQ(rhs jet.Range[postgres.TimestampzExpression]) jet.BoolExpression {
	return W.WGT_EQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_TimestampzRange) IN(expressions ...jet.Expression) jet.BoolExpression {
	return W.WIN(expressions...)
}
func (W _github_com_switchupcb_jet_v2_postgres_TimestampzRange) INTERSECTION(rhs jet.Range[postgres.TimestampzExpression]) jet.Range[postgres.TimestampzExpression] {
	return W.WINTERSECTION(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_TimestampzRange) IS_EMPTY() jet.BoolExpression {
	return W.WIS_EMPTY()
}
func (W _github_com_switchupcb_jet_v2_postgres_TimestampzRange) IS_NOT_NULL() jet.BoolExpression {
	return W.WIS_NOT_NULL()
}
func (W _github_com_switchupcb_jet_v2_postgres_TimestampzRange) IS_NULL() jet.BoolExpression {
	return W.WIS_NULL()
}
func (W _github_com_switchupcb_jet_v2_postgres_TimestampzRange) LOWER_BOUND() postgres.TimestampzExpression {
	return W.WLOWER_BOUND()
}
func (W _github_com_switchupcb_jet_v2_postgres_TimestampzRange) LOWER_INC() jet.BoolExpression {
	return W.WLOWER_INC()
}
func (W _github_com_switchupcb_jet_v2_postgres_TimestampzRange) LOWER_INF() jet.BoolExpression {
	return W.WLOWER_INF()
}
func (W _github_com_switchupcb_jet_v2_postgres_TimestampzRange) LT(rhs jet.Range[postgres.TimestampzExpression]) jet.BoolExpression {
	return W.WLT(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_TimestampzRange) LT_EQ(rhs jet.Range[postgres.TimestampzExpression]) jet.BoolExpression {
	return W.WLT_EQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_TimestampzRange) NOT_EQ(rhs jet.Range[postgres.TimestampzExpression]) jet.BoolExpression {
	return W.WNOT_EQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_TimestampzRange) NOT_IN(expressions ...jet.Expression) jet.BoolExpression {
	return W.WNOT_IN(expressions...)
}
func (W _github_com_switchupcb_jet_v2_postgres_TimestampzRange) NULLS_FIRST() jet.OrderByClause {
	return W.WNULLS_FIRST()
}
func (W _github_com_switchupcb_jet_v2_postgres_TimestampzRange) NULLS_LAST() jet.OrderByClause {
	return W.WNULLS_LAST()
}
func (W _github_com_switchupcb_jet_v2_postgres_TimestampzRange) OVERLAP(rhs jet.Range[postgres.TimestampzExpression]) jet.BoolExpression {
	return W.WOVERLAP(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_TimestampzRange) UNION(rhs jet.Range[postgres.TimestampzExpression]) jet.Range[postgres.TimestampzExpression] {
	return W.WUNION(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_TimestampzRange) UPPER_BOUND() postgres.TimestampzExpression {
	return W.WUPPER_BOUND()
}
func (W _github_com_switchupcb_jet_v2_postgres_TimestampzRange) UPPER_INC() jet.BoolExpression {
	return W.WUPPER_INC()
}
func (W _github_com_switchupcb_jet_v2_postgres_TimestampzRange) UPPER_INF() jet.BoolExpression {
	return W.WUPPER_INF()
}

// _github_com_switchupcb_jet_v2_postgres_TimezExpression is an interface wrapper for TimezExpression type
type _github_com_switchupcb_jet_v2_postgres_TimezExpression struct {
	IValue                interface{}
	WADD                  func(rhs jet.Interval) jet.TimezExpression
	WAS                   func(alias string) jet.Projection
	WASC                  func() jet.OrderByClause
	WBETWEEN              func(min jet.TimezExpression, max jet.TimezExpression) jet.BoolExpression
	WDESC                 func() jet.OrderByClause
	WEQ                   func(rhs jet.TimezExpression) jet.BoolExpression
	WGT                   func(rhs jet.TimezExpression) jet.BoolExpression
	WGT_EQ                func(rhs jet.TimezExpression) jet.BoolExpression
	WIN                   func(expressions ...jet.Expression) jet.BoolExpression
	WIS_DISTINCT_FROM     func(rhs jet.TimezExpression) jet.BoolExpression
	WIS_NOT_DISTINCT_FROM func(rhs jet.TimezExpression) jet.BoolExpression
	WIS_NOT_NULL          func() jet.BoolExpression
	WIS_NULL              func() jet.BoolExpression
	WLT                   func(rhs jet.TimezExpression) jet.BoolExpression
	WLT_EQ                func(rhs jet.TimezExpression) jet.BoolExpression
	WNOT_BETWEEN          func(min jet.TimezExpression, max jet.TimezExpression) jet.BoolExpression
	WNOT_EQ               func(rhs jet.TimezExpression) jet.BoolExpression
	WNOT_IN               func(expressions ...jet.Expression) jet.BoolExpression
	WNULLS_FIRST          func() jet.OrderByClause
	WNULLS_LAST           func() jet.OrderByClause
	WSUB                  func(rhs jet.Interval) jet.TimezExpression
}

func (W _github_com_switchupcb_jet_v2_postgres_TimezExpression) ADD(rhs jet.Interval) jet.TimezExpression {
	return W.WADD(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_TimezExpression) AS(alias string) jet.Projection {
	return W.WAS(alias)
}
func (W _github_com_switchupcb_jet_v2_postgres_TimezExpression) ASC() jet.OrderByClause {
	return W.WASC()
}
func (W _github_com_switchupcb_jet_v2_postgres_TimezExpression) BETWEEN(min jet.TimezExpression, max jet.TimezExpression) jet.BoolExpression {
	return W.WBETWEEN(min, max)
}
func (W _github_com_switchupcb_jet_v2_postgres_TimezExpression) DESC() jet.OrderByClause {
	return W.WDESC()
}
func (W _github_com_switchupcb_jet_v2_postgres_TimezExpression) EQ(rhs jet.TimezExpression) jet.BoolExpression {
	return W.WEQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_TimezExpression) GT(rhs jet.TimezExpression) jet.BoolExpression {
	return W.WGT(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_TimezExpression) GT_EQ(rhs jet.TimezExpression) jet.BoolExpression {
	return W.WGT_EQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_TimezExpression) IN(expressions ...jet.Expression) jet.BoolExpression {
	return W.WIN(expressions...)
}
func (W _github_com_switchupcb_jet_v2_postgres_TimezExpression) IS_DISTINCT_FROM(rhs jet.TimezExpression) jet.BoolExpression {
	return W.WIS_DISTINCT_FROM(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_TimezExpression) IS_NOT_DISTINCT_FROM(rhs jet.TimezExpression) jet.BoolExpression {
	return W.WIS_NOT_DISTINCT_FROM(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_TimezExpression) IS_NOT_NULL() jet.BoolExpression {
	return W.WIS_NOT_NULL()
}
func (W _github_com_switchupcb_jet_v2_postgres_TimezExpression) IS_NULL() jet.BoolExpression {
	return W.WIS_NULL()
}
func (W _github_com_switchupcb_jet_v2_postgres_TimezExpression) LT(rhs jet.TimezExpression) jet.BoolExpression {
	return W.WLT(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_TimezExpression) LT_EQ(rhs jet.TimezExpression) jet.BoolExpression {
	return W.WLT_EQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_TimezExpression) NOT_BETWEEN(min jet.TimezExpression, max jet.TimezExpression) jet.BoolExpression {
	return W.WNOT_BETWEEN(min, max)
}
func (W _github_com_switchupcb_jet_v2_postgres_TimezExpression) NOT_EQ(rhs jet.TimezExpression) jet.BoolExpression {
	return W.WNOT_EQ(rhs)
}
func (W _github_com_switchupcb_jet_v2_postgres_TimezExpression) NOT_IN(expressions ...jet.Expression) jet.BoolExpression {
	return W.WNOT_IN(expressions...)
}
func (W _github_com_switchupcb_jet_v2_postgres_TimezExpression) NULLS_FIRST() jet.OrderByClause {
	return W.WNULLS_FIRST()
}
func (W _github_com_switchupcb_jet_v2_postgres_TimezExpression) NULLS_LAST() jet.OrderByClause {
	return W.WNULLS_LAST()
}
func (W _github_com_switchupcb_jet_v2_postgres_TimezExpression) SUB(rhs jet.Interval) jet.TimezExpression {
	return W.WSUB(rhs)
}

// _github_com_switchupcb_jet_v2_postgres_UpdateStatement is an interface wrapper for UpdateStatement type
type _github_com_switchupcb_jet_v2_postgres_UpdateStatement struct {
	IValue        interface{}
	WDebugSql     func() (query string)
	WExec         func(db qrm.Executable) (sql.Result, error)
	WExecContext  func(ctx context.Context, db qrm.Executable) (sql.Result, error)
	WFROM         func(tables ...postgres.ReadableTable) postgres.UpdateStatement
	WMODEL        func(data interface{}) postgres.UpdateStatement
	WQuery        func(db qrm.Queryable, destination interface{}) error
	WQueryContext func(ctx context.Context, db qrm.Queryable, destination interface{}) error
	WRETURNING    func(projections ...postgres.Projection) postgres.UpdateStatement
	WRows         func(ctx context.Context, db qrm.Queryable) (*jet.Rows, error)
	WSET          func(value interface{}, values ...interface{}) postgres.UpdateStatement
	WSql          func() (query string, args []interface{})
	WWHERE        func(expression postgres.BoolExpression) postgres.UpdateStatement
}

func (W _github_com_switchupcb_jet_v2_postgres_UpdateStatement) DebugSql() (query string) {
	return W.WDebugSql()
}
func (W _github_com_switchupcb_jet_v2_postgres_UpdateStatement) Exec(db qrm.Executable) (sql.Result, error) {
	return W.WExec(db)
}
func (W _github_com_switchupcb_jet_v2_postgres_UpdateStatement) ExecContext(ctx context.Context, db qrm.Executable) (sql.Result, error) {
	return W.WExecContext(ctx, db)
}
func (W _github_com_switchupcb_jet_v2_postgres_UpdateStatement) FROM(tables ...postgres.ReadableTable) postgres.UpdateStatement {
	return W.WFROM(tables...)
}
func (W _github_com_switchupcb_jet_v2_postgres_UpdateStatement) MODEL(data interface{}) postgres.UpdateStatement {
	return W.WMODEL(data)
}
func (W _github_com_switchupcb_jet_v2_postgres_UpdateStatement) Query(db qrm.Queryable, destination interface{}) error {
	return W.WQuery(db, destination)
}
func (W _github_com_switchupcb_jet_v2_postgres_UpdateStatement) QueryContext(ctx context.Context, db qrm.Queryable, destination interface{}) error {
	return W.WQueryContext(ctx, db, destination)
}
func (W _github_com_switchupcb_jet_v2_postgres_UpdateStatement) RETURNING(projections ...postgres.Projection) postgres.UpdateStatement {
	return W.WRETURNING(projections...)
}
func (W _github_com_switchupcb_jet_v2_postgres_UpdateStatement) Rows(ctx context.Context, db qrm.Queryable) (*jet.Rows, error) {
	return W.WRows(ctx, db)
}
func (W _github_com_switchupcb_jet_v2_postgres_UpdateStatement) SET(value interface{}, values ...interface{}) postgres.UpdateStatement {
	return W.WSET(value, values...)
}
func (W _github_com_switchupcb_jet_v2_postgres_UpdateStatement) Sql() (query string, args []interface{}) {
	return W.WSql()
}
func (W _github_com_switchupcb_jet_v2_postgres_UpdateStatement) WHERE(expression postgres.BoolExpression) postgres.UpdateStatement {
	return W.WWHERE(expression)
}

// _github_com_switchupcb_jet_v2_postgres_WritableTable is an interface wrapper for WritableTable type
type _github_com_switchupcb_jet_v2_postgres_WritableTable struct {
	IValue      interface{}
	WAlias      func() string
	WDELETE     func() postgres.DeleteStatement
	WINSERT     func(columns ...jet.Column) postgres.InsertStatement
	WLOCK       func() postgres.LockStatement
	WSchemaName func() string
	WTableName  func() string
	WUPDATE     func(columns ...jet.Column) postgres.UpdateStatement
}

func (W _github_com_switchupcb_jet_v2_postgres_WritableTable) Alias() string {
	return W.WAlias()
}
func (W _github_com_switchupcb_jet_v2_postgres_WritableTable) DELETE() postgres.DeleteStatement {
	return W.WDELETE()
}
func (W _github_com_switchupcb_jet_v2_postgres_WritableTable) INSERT(columns ...jet.Column) postgres.InsertStatement {
	return W.WINSERT(columns...)
}
func (W _github_com_switchupcb_jet_v2_postgres_WritableTable) LOCK() postgres.LockStatement {
	return W.WLOCK()
}
func (W _github_com_switchupcb_jet_v2_postgres_WritableTable) SchemaName() string {
	return W.WSchemaName()
}
func (W _github_com_switchupcb_jet_v2_postgres_WritableTable) TableName() string {
	return W.WTableName()
}
func (W _github_com_switchupcb_jet_v2_postgres_WritableTable) UPDATE(columns ...jet.Column) postgres.UpdateStatement {
	return W.WUPDATE(columns...)
}
